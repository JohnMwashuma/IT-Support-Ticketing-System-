<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Orm</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.Arithmetic`1">
            <summary>
            Provides delegates allowing to call <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> methods faster.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> generic argument.</typeparam>
        </member>
        <member name="T:Xtensive.Core.MethodCacheBase`1">
            <summary>
            Base class for any method caching class.
            </summary>
            <typeparam name="TImplementation">The type of <see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/>.</typeparam>
        </member>
        <member name="F:Xtensive.Core.MethodCacheBase`1.Implementation">
            <summary>
            Gets underlying implementation object or interface.
            </summary>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="implementation"><see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/> property value.</param>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Provider">
            <summary>
            Gets the provider underlying arithmetic is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Add">
            <summary>
            Adds one value to another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Negation">
            <summary>
            Gets negation.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Multiply">
            <summary>
            Multiplies value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Divide">
            <summary>
            Divides value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Subtract">
            <summary>
            Subtracts one value from another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.ApplyRules">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.Arithmetic`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.Arithmetic`1.#ctor(Xtensive.Arithmetic.IArithmetic{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="implementation"><see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/> property value.</param>
        </member>
        <member name="P:Xtensive.Arithmetic.Arithmetic`1.Default">
            <summary>
            Gets default arithmetic for type <typeparamref name="T"/>
            (uses <see cref="P:Xtensive.Arithmetic.ArithmeticProvider.Default"/> <see cref="T:Xtensive.Arithmetic.ArithmeticProvider"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticBase`1">
            <summary>
            Base class for <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> implementations.
            </summary>
            <typeparam name="T">Type to provide arithmetic operations for.</typeparam>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmetic`1">
            <summary>
            Provides arithmetic operations for specified type.
            </summary>
            <typeparam name="T">Type to provide arithmetic operations for.</typeparam>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmeticBase">
            <summary>
            Very base interface for any arithmetic implementation 
            supported by <see cref="T:Xtensive.Arithmetic.IArithmeticProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmeticBase.Provider">
            <summary>
            Gets the provider this arithmetic is associated with.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Add(`0,`0)">
            <summary>
            Adds one value to another.
            </summary>
            <param name="value1">First summand.</param>
            <param name="value2">Second summand.</param>
            <returns>Sum of <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Negation(`0)">
            <summary>
            Gets negation.
            </summary>
            <param name="value">Value to get negation for.</param>
            <returns>Negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Multiply(`0,System.Double)">
            <summary>
            Multiplies value by specified factor.
            </summary>
            <param name="value">Value to multiply.</param>
            <param name="factor">Factor.</param>
            <returns>Multiplication of <paramref name="value"/> by <paramref name="factor"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Divide(`0,System.Double)">
            <summary>
            Divides value by specified factor.
            </summary>
            <param name="value">Value to divide.</param>
            <param name="factor">Factor.</param>
            <returns>Quotient of <paramref name="value"/> by <paramref name="factor"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Subtract(`0,`0)">
            <summary>
            Subtracts one value from another.
            </summary>
            <param name="value1">Value to subtract from.</param>
            <param name="value2">Deduction</param>
            <returns>Subtraction of <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.ApplyRules(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> of this arithmetic).</param>
            <returns>New instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.OverflowAllowed">
            <summary>
            Indicates whether overflow is allowed (doesn't lead to an exception)
            on arithmetic operations.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.NullIsZero">
            <summary>
            Indicates whether <see langword="null"/> value is threated as zero
            in arithmetic operations.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.Rules">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> used by this arithmetic.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Add(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Subtract(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.ApplyRules(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> of this arithmetic).</param>
            <returns>New instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates new arithmetic of the same type, but using different arithmetic rules.
            </summary>
            <param name="rules">Arithmetic rules for the new arithmetic (relatively to this one).</param>
            <returns>New arithmetic of the same type, but using different arithmetic rules.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Negation(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Multiply(`0,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Divide(`0,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">Arithmetic provider this arithmetic is bound to.</param>
            <param name="rules">Arithmetic rules.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.OnDeserialization(System.Object)">
            <summary>
            Performs post-deserialization actions.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.IsSigned">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticProvider">
            <summary>
            Default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> provider. 
            Provides default arithmetic for the specified type.
            </summary>
            <assert>
            <summary>
            Default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> provider. 
            Provides default arithmetic for the specified type.
            </summary>
            <remarks>
            <para id="About">
            This class has default instance - use its <see cref="P:Xtensive.Arithmetic.ArithmeticProvider.Default"/>
            property to get it.
            </para>
            </remarks>
            </assert>
        </member>
        <member name="T:Xtensive.Core.AssociateProvider">
            <summary>
            Implements base functionality for associate provider.
            Creates and caches associates.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.AddHighPriorityLocation(System.Reflection.Assembly,System.String)">
            <summary>
            Adds high priority location for associate search.
            </summary>
            <param name="assembly">Assembly to search in.</param>
            <param name="nameSpace">Namespace to search in.</param>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.AddHighPriorityLocation(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Adds high priority location for associate search.
            </summary>
            <param name="assembly">Assembly to search in.</param>
            <param name="nameSpace">Namespace to search in.</param>
            <param name="overriding">Indicates whether specified location should 
            override all the others (i.e. be a first in the list of locations).</param>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociate``3">
            <summary>
            Gets associate instance for specified parameter and result types.
            All associate instances are cached and returned on the same calls further.
            </summary>
            <typeparam name="TKey">Type to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <returns>Associate instance, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociate``4">
            <summary>
            Gets associate instance for specified parameters and result types.
            All associate created instances are cached and returned on the same calls further.
            </summary>
            <typeparam name="TKey1">First type to try to provide the associate for.</typeparam>
            <typeparam name="TKey2">Second type to try to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <returns>Associate instance, if found;
            otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.PreferAssociate``3(``2,``2)">
            <summary>
            Chooses preferred associate instance from two associates.
            </summary>
            <param name="associate1">First choice option.</param>
            <param name="associate2">Second choice option.</param>
            <typeparam name="TKey1">First associate key type.</typeparam>
            <typeparam name="TKey2">Second associate key type.</typeparam>
            <typeparam name="TAssociate">Type of associate to choose.</typeparam>
            <returns>Preferred associate instance.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociateLocationPosition``1(``0)">
            <summary>
            Gets the position of specified associate in <see cref="P:Xtensive.Core.AssociateProvider.HighPriorityLocations"/>
            list.
            </summary>
            <param name="associate">Associate to get the position for.</param>
            <typeparam name="TAssociate">Type of associate.</typeparam>
            <returns>Associate position. <see cref="F:System.Int32.MaxValue"/>, if its
            location isn't listed in <see cref="P:Xtensive.Core.AssociateProvider.HighPriorityLocations"/> list.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.CreateAssociate``2(System.Type@)">
            <summary>
            Creates associate instance for specified parameter and result types.
            </summary>
            <typeparam name="TKey">Type to create the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to create the associate for.</typeparam>
            <param name="foundFor">The type associate was found for.</param>
            <returns>Newly created instance of associate, if found;
            otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Recursive associate lookup.</exception>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.CreateCustomAssociate``3">
            <summary>
            Creates associate by some custom way if no standard associate is found. 
            Override it to create the associate manually.
            </summary>
            <typeparam name="TKey1">First type to try to provide the associate for.</typeparam>
            <typeparam name="TKey2">Second type to try to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <returns>Associate instance or <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.ConvertAssociate``3(``1)">
            <summary>
            Converts <paramref name="associate"/> to <typeparamref name="TResult"/> object.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TAssociate">The type of associate.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="associate">Associate to convert to result.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.ConvertAssociate``4(``2)">
            <summary>
            Converts <paramref name="associate"/> to <typeparamref name="TResult"/> object.
            </summary>
            <typeparam name="TKey1">The type of key 1.</typeparam>
            <typeparam name="TKey2">The type of key 2.</typeparam>
            <typeparam name="TAssociate">The type of associate.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="associate">Associate to convert to result.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.OnDeserialization(System.Object)">
            <summary>
            Performs post-deserialization actions.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.ConstructorParams">
            <summary>
            Gets associate constructor parameters.
            </summary>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.TypeSuffixes">
            <summary>
            Gets or sets associate type suffixes.
            </summary>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.HighPriorityLocations">
            <summary>
            Gets a list of high priority locations.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmeticProvider">
            <summary>
            Arithmetic provider.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmeticProvider.GetArithmetic``1">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the arithmetic for.</typeparam>
            <returns><see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.GetArithmetic``1">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the arithmetic for.</typeparam>
            <returns><see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.ConvertAssociate``3(``1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticProvider.Default">
            <summary>
            Gets default instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticRules">
            <summary>
            Describes how to calculate arithmetics.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.Equals(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.#ctor(Xtensive.Arithmetic.NullBehavior,Xtensive.Arithmetic.OverflowBehavior)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/>.
            </summary>
            <param name="nullBehavior">Null behavior.</param>
            <param name="overflowBehavior">Overflow behavior.</param>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticRules.OverflowBehavior">
            <summary>
            Gets overflow behavior.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticRules.NullBehavior">
            <summary>
            Gets null behavior.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticStruct`1">
            <summary>
            A struct providing faster access for key 
            <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> delegates.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Default">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.ArithmeticStruct`1"/> for 
            <see cref="P:Xtensive.Arithmetic.Arithmetic`1.Default"/> arithmetic.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Arithmetic">
            <summary>
            Gets the underlying arithmetic for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Add">
            <summary>
            Adds one value to another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Negation">
            <summary>
            Gets negation.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Multiply">
            <summary>
            Multiplies value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Divide">
            <summary>
            Divides value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Subtract">
            <summary>
            Subtracts one value from another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.ApplyRules">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.op_Implicit(Xtensive.Arithmetic.Arithmetic{`0})~Xtensive.Arithmetic.ArithmeticStruct{`0}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> to 
            <see cref="T:Xtensive.Arithmetic.ArithmeticStruct`1"/>.
            </summary>
            <param name="arithmetic">Arithmetic to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.#ctor(Xtensive.Arithmetic.Arithmetic{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="arithmetic">Arithmetic to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Arithmetic.WrappingArithmetic`2">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>s.
            </summary>
            <typeparam name="T">The type to provide arithmetic operations for.</typeparam>
            <typeparam name="TBase">Base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Arithmetic.WrappingArithmetic`2.BaseArithmetic">
            <summary>
            Arithmetic delegates for <typeparamref name="TBase"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.WrappingArithmetic`2.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">Arithmetic provider this instance is bound to.</param>
            <param name="rules">Arithmetic rules.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Add(System.Nullable{`0},System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Negation(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Subtract(System.Nullable{`0},System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Multiply(System.Nullable{`0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Divide(System.Nullable{`0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.NullableArithmetic`1.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.NullableArithmetic`1.One">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Add(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Negation(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Subtract(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Multiply(System.Byte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Divide(System.Byte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Add(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Negation(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Subtract(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Multiply(System.SByte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Divide(System.SByte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Add(System.Char,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Negation(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Subtract(System.Char,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Multiply(System.Char,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Divide(System.Char,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Add(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Negation(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Subtract(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Multiply(System.Int16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Divide(System.Int16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Add(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Negation(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Subtract(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Multiply(System.UInt16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Divide(System.UInt16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Add(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Negation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Subtract(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Multiply(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Divide(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Add(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Negation(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Subtract(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Multiply(System.UInt32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Divide(System.UInt32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Add(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Negation(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Subtract(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Multiply(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Divide(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Add(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Negation(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Subtract(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Multiply(System.UInt64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Divide(System.UInt64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Add(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Negation(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Subtract(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Multiply(System.Decimal,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Divide(System.Decimal,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Add(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Negation(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Subtract(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Multiply(System.Single,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Divide(System.Single,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Add(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Negation(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Subtract(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Multiply(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Divide(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Arithmetic.NullBehavior">
            <summary>
            Describes how arithmetics treats <see langword="null"/> in operations.   
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.Default">
            <summary>
            Default <see langword="null"/> behavior.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.ThreatNullAsZero">
            <summary>
            Treats <see langword="null"/> as <see langword="zero"/> in additions and subtractions.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.ThreatNullAsNull">
            <summary>
            Treats <see langword="null"/> as is in additions and subtractions. If one of parameters is null, the result will be always null.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.OverflowBehavior">
            <summary>
            Describes arithmetic overflow behavior.   
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.Default">
            <summary>
            Default overflow behaviour.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.DenyOverflow">
            <summary>
            Overflow is suppressed.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.AllowOverflow">
            <summary>
            Overflow is allowed.
            </summary>
        </member>
        <member name="T:Xtensive.Caching.InfiniteCache`2">
            <summary>
            An unlimited set of items.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Caching.ICache`2">
            <summary>
            Cache contract.
            </summary>
            <typeparam name="TKey">The type of the cache key.</typeparam>
            <typeparam name="TItem">The type of the item to cached.</typeparam>
        </member>
        <member name="T:Xtensive.Caching.IInvalidatable">
            <summary>
            Invalidatable object contract.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.IInvalidatable.Invalidate">
            <summary>
            Invalidates the state of this object.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.TryGetItem(`0,System.Boolean,`1@)">
            <summary>
            Tries to get cached item by its <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item to get.</param>
            <param name="markAsHit">Indicates whether the item with specified key
            should be marked as hit.</param>
            <param name="item">The item, if found.</param>
            <returns>
            <see langword="true" />, if the item is found;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Contains(`1)">
            <summary>
            Determines whether cache contains the specified item.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="True"/> if cache contains the specified item; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.ContainsKey(`0)">
            <summary>
            Determines whether cache contains the item with specified key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="True"/> if cache contains the item with specified key; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Add(`1)">
            <summary>
            Adds a new item to the cache. If item with this key is already in cache - replaces is with new item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Add(`1,System.Boolean)">
            <summary>
            Adds a new item to the cache.
            </summary>
            <param name="item">The item to add.</param>
            <param name="replaceIfExists">Indicates whether existing item must be replaced or not.</param>
            <returns>An existing, or a newly added item.</returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Remove(`1)">
            <summary>
            Removes the specified <paramref name="item"/> from the cache.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.RemoveKey(`0)">
            <summary>
            Removes the item with specified <paramref name="key"/> from the cache.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Clear">
            <summary>
             Clears the cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.Count">
            <summary>
            Gets the count of cached items.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.KeyExtractor">
            <summary>
            Gets the item key extractor.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.Item(`0,System.Boolean)">
            <summary>
            Gets cached item by its <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item to get.</param>
            <param name="markAsHit">Indicates whether the item with specified key 
            should be marked as hit.</param>
            <returns>Item, if found; 
            otherwise, <see langword="default(TItem)"/>.</returns>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.#ctor(System.Converter{`1,`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.#ctor(System.Int32,System.Converter{`1,`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="capacity">The capacity of cache.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor"/> property value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>capacity</c> is out of range.</exception>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.LruCache`3">
            <summary>
            A set of items limited by the maximal amount of memory it can use, or by any other measure.
            Stores as many most frequently accessed items in memory as long as it is possible
            while maintaining the total size of cached items less or equal to <see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/>.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
            <typeparam name="TCached">The type of cached representation of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IHasSize">
            <summary>
            Describes an object that able to calculate its own size.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasSize.Size">
            <summary>
            Gets size of the instance in bytes.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Conversion.Biconverter{`1,`2})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="cacheConverter"><see cref="P:Xtensive.Caching.LruCache`3.CacheConverter"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`3.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Conversion.Biconverter{`1,`2},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="cacheConverter"><see cref="P:Xtensive.Caching.LruCache`3.CacheConverter"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`3.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.CacheConverter">
            <summary>
            Gets the cache converter.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Size">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.LruCache`2">
            <summary>
            A set of items limited by the maximal amount of memory it can use, or by any other measure.
            Stores as many most frequently accessed items in memory as long as it is possible
            while maintaining the total size of cached items less or equal to <see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/>.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},System.Func{`1,System.Int64})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="sizeExtractor"><see cref="P:Xtensive.Caching.LruCache`2.SizeExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},System.Func{`1,System.Int64},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="sizeExtractor"><see cref="P:Xtensive.Caching.LruCache`2.SizeExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.SizeExtractor">
            <summary>
            Gets the size extractor delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Size">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.MfLruCache`2">
            <summary>
            A set of items limited by the maximal count of them.
            Stores as many most recently and frequently accessed items in memory as long as it is possible.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IHasGarbage">
            <summary>
            Describes a class that might have some "garbage" inside it during the operation.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IHasGarbage.CollectGarbage">
            <summary>
            Collects the garbage.
            </summary>
            <remarks>
            <note type="caution" id="Caution">This method usually takes the time proportional to the size of the object it is invoked on.</note>
            </remarks>
        </member>
        <member name="F:Xtensive.Caching.MfLruCache`2.DefaultEfficiencyFactor">
            <summary>
            Default <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> value.
            Value is <see langword="4"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Caching.MfLruCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.MfLruCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.MfLruCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Converter{`1,`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Int32,System.Converter{`1,`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="efficiencyFactor">The <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.MfLruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Int32,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="efficiencyFactor">The <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.MfLruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.LruCapacity">
            <summary>
            Gets the Least Recently Used capacity.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.MfuCapacity">
            <summary>
            Gets the Most Frequently Used capacity.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Capacity">
            <summary>
            Gets the total capacity (<see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> + <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor">
            <summary>
            Gets the time shift factor offset.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.ThreadSafeCache`2">
            <summary>
            A thread-safe wrapper for any <see cref="T:Xtensive.Caching.ICache`2"/> implementation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.#ctor(Xtensive.Caching.ICache{`0,`1},System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="chainedCache">The chained cache.</param>
            <param name="syncRoot">The sync root.</param>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.#ctor(Xtensive.Caching.ICache{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="chainedCache">The chained cache.</param>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.SyncRoot">
            <summary>
            Gets sync root for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.WeakCache`2">
            <summary>
            A set of weekly referenced items.
            Stores the references while the underlying items aren't collected by GC.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="F:Xtensive.Caching.WeakCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.WeakCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.WeakCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.#ctor(System.Boolean,System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="trackResurrection">The <see cref="P:Xtensive.Caching.WeakCache`2.TrackResurrection"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.WeakCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Finalize">
            <summary>
            Releases resources associated with this instance.
            /// </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.TrackResurrection">
            <summary>
            Gets a value indicating whether this cache tracks resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.WeakestCache`2">
            <summary>
            A set of weekly referenced items identified by weekly referenced keys.
            Stores the references while the underlying keys or items aren't collected by GC.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="F:Xtensive.Caching.WeakestCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.WeakestCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.WeakestCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.#ctor(System.Boolean,System.Boolean,System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="trackKeyResurrection">The <see cref="P:Xtensive.Caching.WeakestCache`2.TrackKeyResurrection"/> property value.</param>
            <param name="trackItemResurrection">The <see cref="P:Xtensive.Caching.WeakestCache`2.TrackItemResurrection"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.WeakestCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Finalize">
            <summary>
            Releases resources associated with this instance.
            /// </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.TrackKeyResurrection">
            <summary>
            Gets a value indicating whether this cache tracks key resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.TrackItemResurrection">
            <summary>
            Gets a value indicating whether this cache tracks item resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ArrayUtils`1">
            <summary>
            <see cref="T:System.Array"/> related utilities.
            </summary>
            <typeparam name="TItem">Type of array item.</typeparam>
        </member>
        <member name="P:Xtensive.Collections.ArrayUtils`1.EmptyArray">
            <summary>
            Gets empty array of items of <typeparamref name="TItem"/> type.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.BindingCollection`2">
            <summary>
            Temporarily binds values of type <typeparamref name="TValue"/> to their keys
            and provides access to currently bound values.
            Any binding is active while its binding result (<see cref="T:System.IDisposable"/> object)
            isn't disposed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.Add(`0,`1)">
            <summary>
            Binds the specified <paramref name="value"/> to <paramref name="key"/>.
            </summary>
            <param name="key">The key to bind to.</param>
            <param name="value">The value to bind.</param>
            <returns>Disposable object that will 
            destroy the binding on its disposal.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.PermanentAdd(`0,`1)">
            <summary>
            Binds the specified <paramref name="value"/> to <paramref name="key"/>.
            </summary>
            <param name="key">The key to bind to.</param>
            <param name="value">The value to bind.</param>
            <returns><see langword="null" />, so this binding will not be removed.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.ReplaceBound(`0,`1)">
            <summary>
            Replaces previously bound value.
            </summary>
            <param name="key">The binding key of the value to replace.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Key isn't found.</exception>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the bound value by its key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns,
            contains the value bound to the specified key, if the key is found;
            otherwise, default value for the type of the value parameter.</param>
            <returns><see langword="True"/> if the <see cref="T:Xtensive.Collections.BindingCollection`2"/> 
            contains an element with the specified key;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.GetKeys">
            <summary>
            Gets the sequence of bound keys.
            </summary>
            <returns>The sequence of bound keys.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.BindingCollection`2.Count">
            <summary>
            Gets the number of currently bound items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.BindingCollection`2.Item(`0)">
            <summary>
            Gets the bound value by its key.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Collections.ChainedBuffer`1">
            <summary>
            Chained buffer collection.
            </summary>
            <typeparam name="T">The type of collection items.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="maxNodeSize">The maximal node size.</param>
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="items">The items to add to this collection.</param>   
        </member>
        <member name="M:Xtensive.Collections.ChainedBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="items">The items to add to this collection.</param>      
            <param name="maxNodeSize">The maximal node size.</param>
        </member>
        <member name="P:Xtensive.Collections.ChainedBuffer`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ChainedBuffer`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ChangeNotifierEventArgs">
            <summary>
            Represents a set of information describing <see cref="T:Xtensive.Collections.IChangeNotifier"/> change.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ChangeNotifierEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="changeInfo">The info.</param>
        </member>
        <member name="M:Xtensive.Collections.ChangeNotifierEventArgs.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ChangeNotifierEventArgs.ChangeInfo">
            <summary>
            Gets the object representing some additional change information.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Xtensive.Collections.ClassifiedCollection`2">
            <summary>
            A collection classifying all the items by their classes.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.IClassifiedCollection`2">
            <summary>
            Contract for collection classifying all the items by their classes.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the range of items.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.GetItems(`0)">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <param name="class">The class of items to get.</param>
            <returns>A sequence of items of the specified class.</returns>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.GetClasses">
            <summary>
            Gets the classes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.IsSet">
            <summary>
            Gets a value indicating whether this instance behaves like a set.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.ClassCount">
            <summary>
            Gets the count of classes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.Classifier">
            <summary>
            Gets the classifier function.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.GetItems(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.GetClasses">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.#ctor(System.Func{`1,`0[]})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="classifier">The classifier function.</param>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.#ctor(System.Func{`1,`0[]},System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="classifier">The classifier function.</param>
            <param name="isSet">Indicates whether this instance behaves like a set.</param>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.IsSet">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.ClassCount">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.Classifier">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.CollectionBase`1">
            <summary>
            Base class for any collection.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.CollectionBaseSlim`1">
            <summary>
            Lightweight base class for any collection.
            </summary>
        </member>
        <member name="T:Xtensive.Core.LockableBase">
            <summary>
            Base class for <see cref="T:Xtensive.Core.ILockable"/> implementors.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ILockable">
            <summary>
            Lockable contract.
            Should be implemented by classes, that can
            became immutable at some point of time.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ILockable.Lock">
            <summary>
            Locks the instance (non-recursively).
            </summary>
        </member>
        <member name="M:Xtensive.Core.ILockable.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked as well.</param>
        </member>
        <member name="P:Xtensive.Core.ILockable.IsLocked">
            <summary>
            Determines whether the instance of class implementing this interface
            is immutable (locked).
            </summary>
            <remarks>
            The implementor of setter of this property should consider, that this
            property should not change its value from <see langword="true"/> to 
            <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Lock">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Unlock">
            <summary>
            Unlocks the object.
            Sets <see cref="P:Xtensive.Core.LockableBase.IsLocked"/> to <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableBase.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableBase.#ctor(System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="isLocked">Initial <see cref="P:Xtensive.Core.LockableBase.IsLocked"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.LockableBase.IsLocked">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Xtensive.Collections.CollectionBaseSlim`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Xtensive.Collections.CollectionBaseSlim`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.System#Collections#Generic#ICollection{TItem}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ICollectionChangeNotifier`1">
            <summary>
            A collection exposing the collection change events contract.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.IChangeNotifier">
            <summary>
            An object exposing change related events contract.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.IChangeNotifier.Changing">
            <summary>
            Occurs when this instance is about to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.IChangeNotifier.Changed">
            <summary>
            Occurs when this instance is changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Clearing">
            <summary>
            Occurs when collection is intended to be cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Cleared">
            <summary>
            Occurs when collection was cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Validate">
            <summary>
            Occurs when collection validates new item.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Inserting">
            <summary>
            Occurs when item is inserting into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Inserted">
            <summary>
            Occurs when item was inserted into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Removing">
            <summary>
            Occurs when item is removing from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Removed">
            <summary>
            Occurs when item was removed from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.ItemChanging">
            <summary>
            Occurs when item is about to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.ItemChanged">
            <summary>
            Occurs when item is changed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element to the collection.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">Item to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all objects from the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Add(`0)">
            <summary>
            Adds new element to the collection.
            </summary>
            <param name="value">Item to add.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            Removes element from the the collection.
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.TrySubscribe(`0)">
            <summary>
            Tries to subscribe the collection on 
            change notifications from the specified item.
            </summary>
            <param name="item">The item to try.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.TryUnsubscribe(`0)">
            <summary>
            Tries to unsubscribe the collection from
            change notifications from the specified item.
            </summary>
            <param name="item">The item to try.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnChanging">
            <summary>
            Performs additional custom processes when changing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnChanged">
            <summary>
            Performs additional custom processes after the contents of the 
            collection instance was changed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnClearing">
            <summary>
            Performs additional custom processes when clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnCleared">
            <summary>
            Performs additional custom processes after clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnInserting(`0,System.Int32)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> of the value to insert.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnInserted(`0,System.Int32)">
            <summary>
            Performs additional custom processes after inserting a new element into the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> of the value to insert.</param>
            <param name="value">The inserted value.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnRemoving(`0,System.Int32)">
            <summary>
            Performs additional custom processes before removing an element from the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which to insert value.</param>
            <param name="value">The element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnRemoved(`0,System.Int32)">
            <summary>
            Performs additional custom processes after removing an element from the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which to insert value.</param>
            <param name="value">The element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnValidate(`0)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <remarks>
            The default implementation of this method determines whether value is a <see langword="null"/> 
            reference (Nothing in Visual Basic), and, if so, throws <see cref="T:System.ArgumentNullException"/>. 
            It is intended to be overridden by a derived class to perform additional action 
            when the specified element is validated.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnItemChanging(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item is about to be changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnItemChanged(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Changing">
            <summary>
            Occurs when collection is intended to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Changed">
            <summary>
            Occurs when collection was changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Validate">
            <summary>
            Occurs when item is validated.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Clearing">
            <summary>
            Occurs when collection is inteneded to be cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Cleared">
            <summary>
            Occurs when collection was cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Inserting">
            <summary>
            Occurs when item is inserting into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Inserted">
            <summary>
            Occurs when item was inserted into colection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Removing">
            <summary>
            Occurs when item is removing from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Removed">
            <summary>
            Occurs when item was removed from colection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.ItemChanging">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.ItemChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.CollectionChangeNotifierEventArgs`1">
            <summary>
            Represents class that contains <see cref="T:Xtensive.Collections.ICollectionChangeNotifier`1"/> related event data.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.Index">
            <summary>
            Gets the item's index if any.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Xtensive.Collections.Deque`1">
            <summary>
            Double-ended queue.
            </summary>
            <typeparam name="T">The type of queued elements.</typeparam>
            <remarks>
            <para>
            <see cref="T:Xtensive.Collections.Deque`1"/> it is a sequence that supports random access to its elements, 
            constant time of insertion and removal of elements at the both ends of the sequence, 
            and linear time of insertion and removal of elements in the middle.
            </para>
            <para>
            The capacity of a <see cref="T:Xtensive.Collections.Deque`1"/> is the number of elements the <see cref="T:Xtensive.Collections.Deque`1"/> can hold.
            In this implementation, the default initial capacity for a <see cref="T:Xtensive.Collections.Deque`1"/> is 16;
            however, that default might change in future versions.
            </para>
            <para>
            As elements are added to a <see cref="T:Xtensive.Collections.Deque`1"/>, the capacity is automatically increased as required
            by reallocating the internal array. The capacity can be decreased by calling <see cref="M:Xtensive.Collections.Deque`1.TrimExcess"/>.
            </para>
            <para>
            The growth factor is the number by which the current capacity is multiplied when a greater capacity
            is required. The growth factor is determined when the <see langword="Deque"/> is constructed.
            </para>
            <para>
            <see cref="T:Xtensive.Collections.Deque`1"/> accepts a <see langword="null"/>
            as a valid value for reference types and allows duplicate elements.
            </para>
            </remarks>
        </member>
        <member name="T:Xtensive.Collections.IDeque`1">
            <summary>
            Double-ended queue contract.
            </summary>
            <typeparam name="T">The type of queued elements.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Xtensive.Collections.IDeque`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
            <remarks>
            This method can be used to minimize a collection's memory overhead 
            if no new elements will be added to the collection. 
            <para>
            The cost of reallocating and copying a large <see cref="T:Xtensive.Collections.IDeque`1"/> can be considerable, however,
            so the <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/> method does nothing if the deque is at more than 90 percent of capacity.
            This avoids incurring a large reallocation cost for a relatively small gain.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            To reset a <see cref="T:Xtensive.Collections.IDeque`1"/> to its initial state, call the <see cref="M:System.Collections.IList.Clear"/> method
            before calling <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/> method. 
            Trimming an empty <see cref="T:Xtensive.Collections.IDeque`1"/> sets the capacity of the <see cref="T:Xtensive.Collections.IDeque`1"/>
            to the default capacity.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.AddHead(`0)">
            <summary>
            Adds <paramref name="element"/> to the <see cref="T:Xtensive.Collections.IDeque`1"/> head.
            </summary>
            <param name="element">
            The element to add to the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            The value can be a <see langword="null"/> for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> already equals the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/>,
            the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the <see cref="T:Xtensive.Collections.IDeque`1"/> is increased by 
            automatically reallocating the internal array, and the existing elements 
            are copied to the new array before the new element is added.
            </para>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> is less than the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the internal array,
            this method is an O(1) operation. 
            If the internal array needs to be reallocated to accommodate the new element,
            this method becomes an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.AddTail(`0)">
            <summary>
            Adds <paramref name="element"/> to the <see cref="T:Xtensive.Collections.IDeque`1"/> tail.
            </summary>
            <param name="element">
            The element to add to the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            The value can be a <see langword="null"/> for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> already equals the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/>,
            the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the <see cref="T:Xtensive.Collections.IDeque`1"/> is increased by 
            automatically reallocating the internal array, and the existing elements 
            are copied to the new array before the new element is added.
            </para>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> is less than the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the internal array,
            this method is an O(1) operation. 
            If the internal array needs to be reallocated to accommodate the new element,
            this method becomes an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.ExtractHead">
            <summary>
            Removes and returns the element at the head of the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
            <returns>The element that is removed from the head of the <see cref="T:Xtensive.Collections.IDeque`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Xtensive.Collections.IDeque`1"/> is empty.</exception>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.ExtractTail">
            <summary>
            Removes and returns the element at the tail of the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
            <returns>The element that is removed from the tail of the <see cref="T:Xtensive.Collections.IDeque`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Xtensive.Collections.IDeque`1"/> is empty.</exception>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items at the given index in the Deque. All items at indexes 
            greater than <paramref name="index"/> move down <paramref name="count"/> indices
            in the Deque.
            </summary>
            <param name="index">The index in the list to remove the range at. The
            first item in the list has index 0.</param>
            <param name="count">The number of items to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count, or <paramref name="count"/> is less than zero
            or too large.</exception>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Capacity">
            <summary>
            Gets or sets the size of an internal array.
            </summary>
            <value>
            Indicates the size of an internal array.
            The minimally allowed value which is also the default one is 16.
            </value>
            <remarks>
            As elements are added to a <see cref="T:Xtensive.Collections.IDeque`1"/>, the capacity is automatically increased as required
            by reallocating the internal array. The capacity can be decreased by calling <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/>.
            </remarks>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Head">
            <summary>
            Gets head element in the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.HeadOrDefault">
            <summary>
            Gets head element in the <see cref="T:Xtensive.Collections.IDeque`1"/>, or <see langword="default(T)"/>, if deque is empty.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Tail">
            <summary>
            Gets tail element in the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.TailOrDefault">
            <summary>
            Gets tail element in the <see cref="T:Xtensive.Collections.IDeque`1"/>, or <see langword="default(T)"/>, if deque is empty.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.AddHead(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.AddTail(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.ExtractHead">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.ExtractTail">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Xtensive.Collections.Deque`1"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:Xtensive.Collections.Deque`1"/>.</returns>
            <remarks>
            <para>
            A shallow copy of a collection copies only the elements of the collection,
            whether they are reference types or value types, but it does not copy 
            the objects that the references refer to. The references in the new collection 
            point to the same objects that the references in the original collection point to.
            </para>
            <para>
            In contrast, a deep copy of a collection copies the elements and 
            everything directly or indirectly referenced by the elements.
            </para>
            <para>
            This method is an O(n) operation, where n is <see langword="Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="initialCapacity">The initial <see cref="P:Xtensive.Collections.Deque`1.Capacity"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="initialCapacity">The initial <see cref="P:Xtensive.Collections.Deque`1.Capacity"/> property value.</param>
            <param name="growFactor">The factor by which the capacity of the <see cref="T:Xtensive.Collections.Deque`1"/> is expanded.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="source">The initial contents of the <see cref="T:Xtensive.Collections.Deque`1"/>.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Single)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="source">The initial contents of the <see cref="T:Xtensive.Collections.Deque`1"/>.</param>
            <param name="growFactor">The factor by which the capacity of the <see cref="T:Xtensive.Collections.Deque`1"/> is expanded.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Head">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.HeadOrDefault">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Tail">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.TailOrDefault">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.DifferentialDictionary`2">
            <summary>
            The dictionary storing its content as difference to its <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/>.
            <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/> must not be modified during 
            <see cref="T:Xtensive.Collections.DifferentialDictionary`2"/> lifetime (usage period).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.ApplyChanges">
            <summary>
            Commits the changes (<see cref="P:Xtensive.Collections.DifferentialDictionary`2.Difference"/>) to the <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/> dictionary.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.CancelChanges">
            <summary>
            Cancels (cleans up) all the changes (<see cref="P:Xtensive.Collections.DifferentialDictionary`2.Difference"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="origin">The original dictionary.</param>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Origin">
            <summary>
            Gets the origin.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Difference">
            <summary>
            Gets the difference of the current state with <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/>.
            This method requires constant time 
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Item(`0)">
            <summary>
            Gets the <typeparamref name="TValue"/> with the specified key.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Keys">
            <summary>
            <inheritdoc/>
            This property requires <see langword="O(Count)" /> time to return the result.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Values">
            <summary>
            <inheritdoc/>
            This property requires <see langword="O(Count)" /> time to return the result.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.DifferentialDictionaryDifference`2">
            <summary>
            Describes complete <see cref="T:Xtensive.Collections.DifferentialDictionary`2"/> change set.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionaryDifference`2.#ctor(Xtensive.Collections.ReadOnlyDictionary{`0,`1},Xtensive.Collections.ReadOnlyDictionary{`0,`1},Xtensive.Collections.ReadOnlyHashSet{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
            <param name="changedItems">The changed items.</param>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.AddedItems">
            <summary>
            Gets added items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.RemovedItems">
            <summary>
            Gets removed items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.ChangedItems">
            <summary>
            Gets the keys of all changed items, including keys of added, removed or changed items.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.DirectionCollection`1">
            <summary>
             A sequence of <typeparamref name="T"/>-<see cref="T:Xtensive.Core.Direction"/> pairs.
             Normally used to describe "order by" clauses.
            </summary>
             <typeparam name="T">The type of collection item to associate with direction.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.FlagCollection`2">
            <summary>
            A sequence of <typeparamref name="TKey"/>-<typeparamref name="TFlag"/> pairs.
            </summary>
            <remarks>
            Item count should be less than 32.
            <see cref="T:Xtensive.Conversion.Biconverter`2"/> is used to convert flag keys from type <typeparamref name="TFlag"/> to <see cref="T:System.Boolean"/>.
            </remarks>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TFlag">Type of the flag.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Equals(Xtensive.Collections.FlagCollection{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(Xtensive.Conversion.Biconverter{`1,System.Boolean})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="converter"><see cref="P:Xtensive.Collections.FlagCollection`2.Converter"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(Xtensive.Conversion.Biconverter{`1,System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="converter"><see cref="P:Xtensive.Collections.FlagCollection`2.Converter"/> property value.</param>
            <param name="enumerable">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Converter">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.Biconverter`2"/> instance
            used to convert flag value to <see cref="T:System.Boolean"/> and vice versa.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Flags">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.Collection`1"/> containing the flags.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Keys">
            <summary>
            Gets a list of keys.
            </summary>
            <returns>A list of keys.</returns>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IDictionary{TKey@TFlag}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Values">
            <summary>
            Gets an array of values.
            </summary>
            <returns>An array of values.</returns>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IDictionary{TKey@TFlag}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,Xtensive.Core.Direction}})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="enumerable">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="items">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.EnumerableUtils">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> related utilities.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.One``1(``0)">
            <summary>
            Gets the enumerable with one element.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <returns>Sequence with value inside.</returns>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.Unfold``1(``0,System.Func{``0,``0})">
            <summary>
            Unfolds the whole sequence from its <paramref name="first"/> item.
            If <paramref name="first"/> is <see langword="null" />,
            an empty sequence is returned.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <param name="first">The first item.</param>
            <param name="next">The delegate returning the next item by the current one.
            The enumeration continues until it returns <see langword="null" />.</param>
            <returns>Unfolded sequence of items 
            starting from the <paramref name="first"/> one.</returns>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.Unfold``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Unfolds the whole sequence from its <paramref name="first"/> item.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <param name="first">The first item.</param>
            <param name="include">The delegate indicating whether to include the current item
            into the sequence or not. Enumeration continues until this method returns
            <see langword="false" />.</param>
            <param name="next">The delegate returning the next item by the current one.</param>
            <returns>
            Unfolded sequence of items
            starting from the <paramref name="first"/> one.
            </returns>
        </member>
        <member name="T:Xtensive.Collections.EnumerableUtils`1">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> related utilities.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
        </member>
        <member name="P:Xtensive.Collections.EnumerableUtils`1.Empty">
            <summary>
            Gets the empty sequence.
            </summary>
            <returns>Empty sequence.</returns>
        </member>
        <member name="P:Xtensive.Collections.EnumerableUtils`1.EmptyEnumerator">
            <summary>
            Gets the enumerator of empty sequence.
            </summary>
            <returns>The enumerator of empty sequence.</returns>
        </member>
        <member name="T:Xtensive.Collections.ExtensionCollection">
            <summary>
            Default <see cref="T:Xtensive.Collections.IExtensionCollection"/> implementation (<see cref="T:Xtensive.Core.ILockable">lockable</see>).
            </summary>
        </member>
        <member name="T:Xtensive.Collections.IExtensionCollection">
            <summary>
            A collection of type-based extensions.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Get``1">
            <summary>
            Gets the extension of type <typeparamref name="T"/> from the collection.
            </summary>
            <typeparam name="T">The type of extension to get.</typeparam>
            <returns>The extension of type <typeparamref name="T"/>, if exists;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Get(System.Type)">
            <summary>
            Gets the extension of type <paramref name="extensionType"/> from the collection.
            </summary>
            <param name="extensionType">The type of extension to get.</param>
            <returns>The extension of type <paramref name="extensionType"/>, if exists;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Set``1(``0)">
            <summary>
            Adds \ replaces the extension of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The type of extension to add \ replace.</typeparam>
            <param name="value">The extension to add \ replace.</param>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Set(System.Type,System.Object)">
            <summary>
            Adds \ replaces the extension of type <paramref name="extensionType"/> in the collection.
            </summary>
            <param name="extensionType">The type of extension to add \ replace.</param>
            <param name="value">The extension to add \ replace.</param>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IExtensionCollection.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Set``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Set(System.Type,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.#ctor(Xtensive.Collections.IExtensionCollection)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source to copy into this collection.</param>
        </member>
        <member name="P:Xtensive.Collections.ExtensionCollection.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.FixedList3`1">
            <summary>
            Defines a fixed stack-like list with three items.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.Push(`0)">
            <summary>
            Adds item to the <see cref="T:Xtensive.Collections.FixedList3`1"/> list.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentException">The list already have three items.</exception>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.Pop">
            <summary>
            Removes latest item from the <see cref="T:Xtensive.Collections.FixedList3`1"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">First item to add.</param>
            <param name="second">Second item ot add.</param>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">First item to add.</param>
            <param name="second">Second item ot add.</param>
            <param name="third">Third item to add.</param>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Index of the item</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is greater or equal count of items.</exception>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Items">
            <summary>
            Enumerates all items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Count">
            <summary>
            Gets count of items.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.FlagRegistry`2">
            <summary>
            Flag registry. An item could be registered multiple times with the different flags. 
            Flags usually is an <see cref="T:System.Enum"/> descendant.
            </summary>
            <typeparam name="TFlag">The type of the flag.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.Register(`1)">
            <summary>
            Registers the specified item in this instance.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.GetFlags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.GetItems(`0)">
            <summary>
            Gets the items by specified flag.
            </summary>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="flagExtractor">The flag extractor.</param>
        </member>
        <member name="P:Xtensive.Collections.FlagRegistry`2.Count">
            <summary>
            Gets the total count of items registered in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Edge">
            <summary>
            A connection between two graph <see cref="T:Xtensive.Collections.Graphs.Node"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.Attach">
            <summary>
            Attaches the edge to source and target nodes.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.Detach">
            <summary>
            Detaches the edge from source and target nodes.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.ToString">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.#ctor(Xtensive.Collections.Graphs.Node,Xtensive.Collections.Graphs.Node)">
            <summary>
            Creates new graph edge instance and <see cref="M:Xtensive.Collections.Graphs.Edge.Attach"/>es it to nodes.
            </summary>
            <param name="source">Source node.</param>
            <param name="target">Target node.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.UntypedValue">
            <summary>
            Gets edge value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.Source">
            <summary>
            Gets or sets edge source.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.Target">
            <summary>
            Gets or sets edge target.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.IsAttached">
            <summary>
            Indicates whether this edge is attached to its source and target nodes.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Edge`1">
            <summary>
            A connection between two graph <see cref="T:Xtensive.Collections.Graphs.Node"/>s with value.
            </summary>
            <typeparam name="TValue">Edge value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="value">Edge value.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor(Xtensive.Collections.Graphs.Node,Xtensive.Collections.Graphs.Node,`0)">
            <summary>
            Creates new graph edge instance and <see cref="M:Xtensive.Collections.Graphs.Edge.Attach"/>es it to nodes.
            </summary>
            <param name="source">Source node.</param>
            <param name="target">Target node.</param>
            <param name="value">Edge value.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge`1.Value">
            <summary>
            Gets or sets edge value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge`1.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Graph`2">
            <summary>
            A graph.
            </summary>
            <typeparam name="TNode">Node type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.CreateMutableCopy">
            <summary>
            Creates a mutable copy of the graph.
            Mutable copy of the graph is a graph having identical structure (e.g. set of nodes and edges),
            but values of its nodes and edges points to appropriate original nodes and edges from the graph. 
            </summary>
            <returns>A mutable copy of the graph.</returns>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.AddEdges(System.Func{`0,`0,`1})">
            <summary>
            Creates and attaches outgoing (and consequently, incoming) edges in the graph using specified <paramref name="connector"/>.
            </summary>
            <param name="connector">Connector delegate. 
            Must return a new edge, is there is an edge pointing from its first argument to the second one.
            Otherwise is must return null.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="nodes">Graph nodes.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="nodes">Graph nodes.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Graph`2.Nodes">
            <summary>
            Get a list of graph nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Graph`2.Edges">
            <summary>
            Gets a sequence of graph edges.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Node">
            <summary>
            Graph node. 
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node.ToString">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.HasIncomingEdges">
            <summary>
            Indicates whether this node has incoming edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.HasOutgoingEdges">
            <summary>
            Indicates whether this node has outgoing edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.IncomingEdges">
            <summary>
            Gets incoming edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.OutgoingEdges">
            <summary>
            Gets outgoing edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.Edges">
            <summary>
            Gets all node edges.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Node`1">
            <summary>
            Graph node with value. 
            </summary>
            <typeparam name="TValue">Node value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node`1.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="value">Node value.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node`1.Value">
            <summary>
            Node value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node`1.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.TopologicalSorter">
            <summary>
            Topological sorter.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.TopologicalSorter.Sort``2(Xtensive.Collections.Graphs.Graph{``0,``1},System.Predicate{``1})">
            <summary>
            Sorts the <paramref name="graph"/> in topological order (nodes without incoming edges go first).
            <note>
            This method modifies the <paramref name="graph"/> by removing all non-loop edges from it!
            </note>
            </summary>
            <returns>Sorting result.</returns>
        </member>
        <member name="T:Xtensive.Collections.Graphs.TopologicalSortResult`2">
            <summary>
            Topological sorter result.
            </summary>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TNode">Node type.</typeparam>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.SortedNodes">
            <summary>
            Sorted nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.LoopNodes">
            <summary>
            Loop nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.BrokenEdges">
            <summary>
            Broken edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.HasLoops">
            <summary>
            Indicates whether result has loops.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.IFilterable`2">
            <summary>
            Defines contract for a filterable collection of <typeparamref name="TItem"/>s.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IFilterable`2.Find(`0)">
            <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria"/>.
            </summary>
            <param name="criteria">The object to filter initial collection with.</param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/> object.</returns>
        </member>
        <member name="M:Xtensive.Collections.IFilterable`2.Find(`0,Xtensive.Core.MatchType)">
            <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria"/>.
            </summary>
            <param name="criteria">The object to filter initial collection with.</param>
            <param name="matchType">Type of the match.</param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/> object.</returns>
        </member>
        <member name="T:Xtensive.Collections.INamedValueCollection">
            <summary>
            Named value collection contract.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.INamedValueCollection.Get(System.String)">
            <summary>
            Gets the specified value by its name.
            </summary>
            <param name="name">The name of the value.</param>
            <returns>
            Specified value, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.INamedValueCollection.Set(System.String,System.Object)">
            <summary>
            Sets the value of the specified name.
            </summary>
            <param name="name">The name to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Xtensive.Collections.IPriorityQueue`2">
            <summary>
            Priority queue interface.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of items to be stored in queue.</typeparam>
            <typeparam name="TPriority"><see cref="T:System.Type"/> of priority value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds an <paramref name="item"/> to the priority queue.
            </summary>
            <param name="item">Item to be added to the queue.</param>
            <param name="priority">Priority value.</param>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Dequeue">
            <summary>
            Removes top item from the queue.
            </summary>
            <returns>Top item from priority queue if applicable.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.DequeueRange(`1)">
            <summary>
            Removes range of items from queue. Item's priority must be greater than <paramref name="priority"/>.
            </summary>
            <param name="priority">Threshold value for items to remove from queue </param>
            <returns>An <see langword="array"/> of items. Empty <see langword="array"/> if no items found under <paramref name="priority"/> condition.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Peek">
            <summary>
            Returns top item from the priority queue but not removes it from the queue.
            </summary>
            <returns>Top item from queue if applicable.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the queue,
            </summary>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
            <remarks>
            <para>
            <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/> is set to zero, and references to other objects 
            from elements of the queue are also released.
            </para>
            <para>
            The capacity remains unchanged. To reset the capacity of the queue,
            call <see cref="M:Xtensive.Collections.IPriorityQueue`2.TrimExcess"/>. Trimming an empty queue sets the capacity 
            of the queue to the default capacity.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Contains(`0)">
            <summary>
            Determines whether an element is in the queue. 
            </summary>
            <param name="item">
            The element to locate in the queue. The value can be a 
            <see langword="null"/> for reference types.
            </param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the 
            queue; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>
            This method determines equality using the default equality comparer 
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for <typeparamref name="T"/>,
            the type of values in the queue.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation,
            where n is <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Remove(`0)">
            <summary>
            Removes an element from the queue
            </summary>
            <param name="item">The element to remove from the queue</param>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Count">
            <summary>
            Gets number of elements.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Direction">
            <summary>
            Gets direction of items stored in the queue
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Capacity">
            <summary>
            Gets or sets the size of an internal array.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index"/> 
            is less than zero or is equal to \ greater than <see langword="Count"/>.</exception>
        </member>
        <member name="T:Xtensive.Collections.ISet`1">
            <summary>
            Generic set of items.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ISet`1.Add(`0)">
            <summary>
            Adds the specified element to the <see cref="T:Xtensive.Collections.ISet`1"/>.
            </summary>
            <param name="item">Item to add to the set.</param>
            <returns><see langword="True"/> if the element is added to the <see cref="T:Xtensive.Collections.ISet`1"/> object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ISet`1.Item(`0)">
            <summary>
            Gets the specified item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Xtensive.Collections.ISet`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object 
            that is used to determine equality for the values in this instance.
            </summary>
            <value>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object 
            that is used to determine equality for the values in this instance.</value>
        </member>
        <member name="T:Xtensive.Collections.ITopDeque`2">
            <summary>
            "Top deque" contract - a combination of double-ended queue and dictionary.
            This class is normally used to build LRU caches.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the to get the value by its key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/>, if operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryGetValue(`0,System.Boolean,`1@)">
            <summary>
            Tries the to get the value by its key.
            </summary>
            <param name="key">The key.</param>
            <param name="moveToTop">Indicates whether item must be moved to the top, if found.</param>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/>, if operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryChangeValue(`0,`1,System.Boolean,System.Boolean,`1@)">
            <summary>
            Tries to the change value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="moveToTop">Indicates whether item must be moved to the top, if found.</param>
            <param name="replaceIfExists">Indicates whether value must be replaced, if specified key is found.</param>
            <param name="oldValue">The old value.</param>
            <returns>
            <see langword="true"/>, if change occurred;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Contains(`0)">
            <summary>
            Determines whether collection contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/>, if specified key is found;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.PopTop">
            <summary>
            Gets the top item and removes it from the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.PopBottom">
            <summary>
            Gets the top item and removes it from the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.MoveToTop(`0)">
            <summary>
            Moves the item with the specified key to top.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.MoveToBottom(`0)">
            <summary>
            Moves the item with the specified key to bottom.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.AddToTop(`0,`1)">
            <summary>
            Adds the new item to top.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.AddToBottom(`0,`1)">
            <summary>
            Adds the new item to bottom.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Remove(`0)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value>The item with the specified key.</value>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Top">
            <summary>
            Gets the top item without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Bottom">
            <summary>
            Gets the bottom item without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.TopKey">
            <summary>
            Gets the top key without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.BottomKey">
            <summary>
            Gets the bottom key without removing it from the collection.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ITypeRegistrationProcessor">
            <summary>
            Processes <see cref="T:Xtensive.Collections.TypeRegistration"/>s in <see cref="T:Xtensive.Collections.TypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITypeRegistrationProcessor.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration)">
            <summary>
            Processes the specified type registration.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The action to process.</param>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Converter{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="innerEnumerator">The inner enumerator.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerator`2.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueueItemComparer`2.Compare(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:Xtensive.Collections.LazyDictionary`2">
            <summary>
            Lazy dictionary.
            A dictionary-like structure allocating internal <see cref="T:System.Collections.Generic.Dictionary`2"/> in lazy fashion.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.SinglyLinkedList`1">
            <summary>
            Singly-linked immutable list.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.Add(`0)">
            <summary>
            Appends the head value and returns new instance of <see cref="T:Xtensive.Collections.SinglyLinkedList`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>New instance of <see cref="T:Xtensive.Collections.SinglyLinkedList`1"/> with provided <paramref name="value"/> as a head node.</returns>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source elements.</param>
        </member>
        <member name="M:Xtensive.Collections.SinglyLinkedList`1.#cctor">
            <summary>
            Initializes this type.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SinglyLinkedList`1.Empty">
            <summary>
            Gets the empty <see cref="T:Xtensive.Collections.SinglyLinkedList`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SinglyLinkedList`1.Head">
            <summary>
            Gets the value of the head node.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SinglyLinkedList`1.Tail">
            <summary>
            Gets the tail of the current insttance.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SinglyLinkedList`1.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.NamedValueCollection">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/>-based 
            <see cref="T:Xtensive.Collections.INamedValueCollection"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.NamedValueCollection.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.NamedValueCollection.Set(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.NativeTypeClassifier`1">
            <summary>
            Native type-based classifier.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.TypeClassifier`1">
            <summary>
            Type-based classifier.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.GetItems``1">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <typeparam name="TClass">The class of items to get.</typeparam>
            <returns>
            A sequence of items of the specified class.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.#ctor(System.Func{`0,System.Type[]})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.#ctor(System.Func{`0,System.Type[]},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.GetItems``1">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <typeparam name="TClass">The class of items to get.</typeparam>
            <returns>
            A sequence of items of the specified class.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.#ctor(System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="exactType">If set to <see langword="true"/>, exact item type is used as classifier;
            otherwise all its base types and interfaces are used.</param>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="exactType">If set to <see langword="true"/>, exact item type is used as classifier;
            otherwise all its base types and interfaces are used.</param>
            <param name="isSet">Indicates whether this instance behaves like a set.</param>
        </member>
        <member name="T:Xtensive.Collections.PriorityQueue`2">
            <summary>
            Priority queue.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of objects to be stored in queue.</typeparam>
            <typeparam name="TPriority"><see cref="T:System.Type"/> of priority value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.DequeueRange(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
            <param name="initialCapacity">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Capacity"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction,System.Int32,System.Single)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
            <param name="initialCapacity">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Capacity"/> property value.</param>
            <param name="growFactor">Capacity grow factor.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Direction">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyCollection`1">
            <summary>
            Read-only collection (<see cref="T:System.Collections.Generic.ICollection`1"/>) wrapper.
            </summary>
            <typeparam name="T">The type of collection items.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IReadOnly">
            <summary>
            Marks that implementing type is read-only analogue of 
            base type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.IsWrapperOf(System.Collections.Generic.ICollection{`0})">
            <summary>
            Indicates whether this collection is a read-only wrapper 
            of specified <paramref name="collection"/>.
            </summary>
            <param name="collection">Collection to check.</param>
            <returns><see langword="True"/> if this collection is wrapper of
            specified collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0},System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="collection">The collection to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="collection"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="collection">The collection to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Always returns <see langword="true"/>.
            </summary>
            <returns><see langword="True"/>.</returns>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyDictionary`2">
            <summary>
            Read-only generic dictionary (<see cref="T:System.Collections.Generic.IDictionary`2"/>) wrapper.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="dictionary">The dictionary to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="dictionary"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Item(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Item(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary> 
            Always returns <see langword="true"/>.
            </summary>
            <returns><see langword="True"/>. </returns>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyHashSet`1">
            <summary>
            Read-only set (<see cref="T:Xtensive.Collections.ISet`1"/>) wrapper.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.#ctor(System.Collections.Generic.HashSet{`0},System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="set">The set to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="set"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="set">The set to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyList`1">
            <summary>
            Read-only list (<see cref="T:System.Collections.IList"/>) wrapper.
            </summary>
        </member>
        <member name="F:Xtensive.Collections.ReadOnlyList`1.Empty">
            <summary>
            Empty <see cref="T:Xtensive.Collections.ReadOnlyList`1"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Add(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Remove(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="list">The list to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="list"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlySet`1">
            <summary>
            Read-only set (<see cref="T:Xtensive.Collections.ISet`1"/>) wrapper.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.#ctor(Xtensive.Collections.ISet{`0},System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="set">The set to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="set"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.#ctor(Xtensive.Collections.ISet{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="set">The set to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.Set`1">
            <summary>
            A set of items (with event-handling support).
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.SetSlim`1">
            <summary>
            Represents a set of items.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.SetBase`1">
            <summary>
            Base type for sets.
            </summary>
            <typeparam name="TItem">Type of values to store to set.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Items">
            <summary>
            Gets the underlying dictionary containing all the set items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.ContainsNull">
            <summary>
            Gets or sets a value indicating whether a set contains <see langword="null"/> item.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="items">Collection to copy the items from.</param>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="items">Collection to copy the items from.</param>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="P:Xtensive.Collections.SetSlim`1.Items">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnChanging">
            <summary>
            Performs additional custom processes when changing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnChanged">
            <summary>
            Performs additional custom processes after the contents of the 
            collection instance was changed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnClearing">
            <summary>
            Performs additional custom processes when clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnCleared">
            <summary>
            Performs additional custom processes after clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnInserting(`0)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            collection instance.
            </summary>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnInserted(`0)">
            <summary>
            Performs additional custom processes after inserting a new element into the
            collection instance.
            </summary>
            <param name="value">The inserted value.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnRemoving(`0)">
            <summary>
            Performs additional custom processes before removing an element from the
            collection instance.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnRemoved(`0)">
            <summary>
            Performs additional custom processes after removing an element from the
            collection instance.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnValidate(`0)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <remarks>
            The default implementation of this method determines whether value is a <see langword="null"/> 
            reference (Nothing in Visual Basic), and, if so, throws <see cref="T:System.ArgumentNullException"/>. 
            It is intended to be overridden by a derived class to perform additional action 
            when the specified element is validated.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnItemChanging(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item is about to be changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnItemChanged(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="comparer">Equality comparer for the set type.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="items">Collection to copy the items from.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="items">Collection to copy the items from.</param>
            <param name="comparer">Equality comparer for the set type.</param>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Changing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Changed">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Validate">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Clearing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Cleared">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Inserting">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Inserted">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Removing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Removed">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.ItemChanging">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.ItemChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ThreadSafeDictionary`2">
            <summary>
            Thread-safe dictionary. Any operation on it is atomic.
            Note: it recreates its internal dictionary on any data modifying
            operation on it.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TItem">Value type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue``1(`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <typeparam name="T">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue``2(`0,System.Func{`0,``0,``1,`1},``0,``1)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value by its key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">Found value, or default value, if value is not found.</param>
            <returns>Whether or not value was found.</returns>    
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with specified key.
            </summary>
            <param name="key">The key to set value for.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Initialize(System.Object)">
            <summary>
            Initializes the dictionary. 
            This method should be invoked just once - before
            the first operation on this dictionary.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Collections.ThreadSafeDictionary`2"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Collections.ThreadSafeDictionary`2"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ThreadSafeList`1">
            <summary>
            Thread-safe list. Any operation on it is atomic.
            Note: it recreates its internal array (makes it twice larger) when it should grow up.
            </summary>
            <typeparam name="TItem">Value type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue``1(System.Int32,System.Func{System.Int32,``0,`0},``0)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <typeparam name="T">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue``2(System.Int32,System.Func{System.Int32,``0,``1,`0},``0,``1)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue(System.Int32)">
            <summary>
            Gets the value by its index.
            </summary>
            <param name="index">The index to get value for.</param>
            <returns>Found value, or <see langword="default(TItem)"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value associated with specified index.
            </summary>
            <param name="index">The index to set value for.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Initialize(System.Object)">
            <summary>
            Initializes the list. 
            This method should be invoked just once - before
            the first operation on this list.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Collections.ThreadSafeList`1"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Collections.ThreadSafeList`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.TopDeque`2">
            <summary>
            Default <see cref="T:Xtensive.Collections.ITopDeque`2"/> implementation.
            </summary>
            <typeparam name="K">Type of the key.</typeparam>
            <typeparam name="V">Type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryGetValue(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryChangeValue(`0,`1,System.Boolean,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.PopTop">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.PopBottom">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.MoveToTop(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.MoveToBottom(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.AddToTop(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">The key is already added.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.AddToBottom(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">The key is already added.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="keyComparer">The key comparer.</param>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="keyComparer">The key comparer.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Item(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Top">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Bottom">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.TopKey">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.BottomKey">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistration">
            <summary>
            Describes a single type registration call to <see cref="T:Xtensive.Collections.TypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.Equals(Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.op_Equality(Xtensive.Collections.TypeRegistration,Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.op_Inequality(Xtensive.Collections.TypeRegistration,Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Type)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="assembly">The assembly to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="assembly">The assembly to register.</param>
            <param name="namespace">The namespace to register.</param>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Type">
            <summary>
            Gets the type registered by this action.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Assembly">
            <summary>
            Gets the assembly registered by this action.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Namespace">
            <summary>
            Gets the namespace registered by this action.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistrationElement">
            <summary>
            Type registration element within a configuration file.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ConfigurationCollectionElementBase">
            <summary>
            Abstract base class for a configuration element within a configuration file
            that is nested to a collection of similar ones.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IIdentified">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IIdentified.Identifier"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IIdentified.Identifier">
            <summary>
            Gets object identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ConfigurationCollectionElementBase.Identifier">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Collections.TypeRegistration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Type">
            <summary>
            Gets or sets the name of the type to register.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Assembly">
            <summary>
            Gets or sets the assembly where types to register are located.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Namespace">
            <summary>
            Gets or sets the namespace withing the <see cref="P:Xtensive.Collections.TypeRegistrationElement.Assembly"/>, 
            where types to register are located.
            If <see langword="null"/> or <see cref="F:System.String.Empty"/>, 
            all the persistent types from the <see cref="P:Xtensive.Collections.TypeRegistrationElement.Assembly"/> will be registered.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistrationProcessorBase">
            <summary>
            Abstract base class for <see cref="T:Xtensive.Collections.ITypeRegistrationProcessor"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration)">
            <summary>
            Processes the specified registration in the specified registration context.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The action.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration,System.Type)">
            <summary>
            Processes the single type registration.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The registration.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.IsAcceptable(Xtensive.Collections.TypeRegistration,System.Type)">
            <summary>
            Determines whether the specified type is acceptable for registration.
            </summary>
            <param name="registration">The currently processed registration.</param>
            <param name="type">The type to check.</param>
            <returns>
              <see langword="true"/> if the specified type is acceptable for registration;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationProcessorBase.BaseType">
            <summary>
            Gets base type.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistry">
            <summary>
            <see cref="T:System.Type"/> registration endpoint.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Contains(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is contained in this instance.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to search for.</param>
            <returns><see langword="True"/> if the <see cref="T:System.Type"/> is found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Type)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Reflection.Assembly)">
            <summary>
            Invoke this method to register types from the specified <see cref="T:System.Reflection.Assembly"/>.
            Search is restricted by assembly only.
            </summary>
            <param name="assembly">Assembly to search for types.</param>
            <exception cref="T:System.InvalidOperationException">When <see cref="M:System.Reflection.Assembly.GetTypes"/> 
            method call has thrown an exception or if no suitable types were found.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="assembly"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Reflection.Assembly,System.String)">
            <summary>
            Invoke this method to register types from the specified <see cref="T:System.Reflection.Assembly"/>.
            Search is restricted by assembly and namespace.
            </summary>
            <param name="assembly">Assembly to search for types.</param>
            <param name="namespace">Namespace to search for types.</param>
            <exception cref="T:System.InvalidOperationException">When <see cref="M:System.Reflection.Assembly.GetTypes"/> 
            method call has thrown an exception or if no suitable types were found.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="assembly"/> is null 
            or <paramref name="namespace"/> is empty string.</exception>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(Xtensive.Collections.TypeRegistration)">
            <summary>
            Registers the specified <see cref="T:Xtensive.Collections.TypeRegistration"/> for delayed processing.
            </summary>
            <param name="action">The type registration to register.</param>
            <returns><see langword="true"/> if specified registration was successfully added;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.#ctor(Xtensive.Collections.ITypeRegistrationProcessor)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="processor">The registry action processor.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.#ctor(Xtensive.Collections.TypeRegistry)">
            <summary>
            This constructor is used to clone the instance.
            </summary>
            <param name="source">The type registry to clone the state of.</param>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistry.Assemblies">
            <summary>
            Gets assemblies containing registered types.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistry.Count">
            <summary>
            Gets the number of types registered in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparer`1">
            <summary>
            Provides delegates allowing to call comparison methods faster.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ComparerImplementation">
            <summary>
            Gets the underlying comparer implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.EqualityComparerImplementation">
            <summary>
            Gets the underlying equality comparer implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Provider">
            <summary>
            Gets the provider underlying comparer is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ComparisonRules">
            <summary>
            Gets comparison rules used by the underlying comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Compare">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Equals">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.GetHashCode">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.GetNearestValue">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ValueRangeInfo">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> value used by the underlying comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ApplyRules">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.IAdvancedComparer`1.ApplyRules(Xtensive.Comparison.ComparisonRules)"/> method delegate.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.GetAsymmetric``1">
            <summary>
            A shortcut to <see cref="M:Xtensive.Comparison.IAdvancedComparer`1.GetAsymmetric``1"/> method
            of <see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(Xtensive.Comparison.IAdvancedComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="implementation">Implementation to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
            <param name="equalityComparer">Equality comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="equalityComparer">Equality comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparer`1.Default">
            <summary>
            Gets default advanced comparer for type <typeparamref name="T"/>
            (uses <see cref="P:Xtensive.Comparison.ComparerProvider.Default"/> <see cref="T:Xtensive.Comparison.ComparerProvider"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparer`1.System">
            <summary>
            Gets system comparers exposed as <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparerBase`1">
            <summary>
            Base class for <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> implementations.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.IAdvancedComparer`1">
            <summary>
            Interface for any comparer supported by <see cref="T:Xtensive.Comparison.ComparerProvider"/>.
            </summary>
            <typeparam name="T">The type of values this comparer can compare.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.IAdvancedComparerBase">
            <summary>
            Very base interface for any comparer supported by <see cref="T:Xtensive.Comparison.IComparerProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.IAdvancedComparerBase.Provider">
            <summary>
            Gets the provider this comparer is associated with.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.IAdvancedComparerBase.ComparisonRules">
            <summary>
            Gets comparison rules used by this comparer.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.IHasRangeInfo`1">
            <summary>
            "An object providing <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/>" contract.
            </summary>
            <typeparam name="T">Type of the value range boundaries.</typeparam>
        </member>
        <member name="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo">
            <summary>
            Gets the <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> object describing the range of type <typeparamref name="T"/>.
            </summary>
            <value>The <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> object.</value>
        </member>
        <member name="T:Xtensive.Comparison.INearestValueProvider`1">
            <summary>
            Provides nearest values for the specified value of specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)">
            <summary>
            Gets the nearest value in the specified direction.
            </summary>
            <param name="value">The initial value for which nearest value should be provided.</param>
            <param name="direction">The direction of the nearest value relative to <paramref name="value"/>.</param>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.ApplyRules(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> 
            with specified comparison rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Comparison.ComparisonRules"/> of this comparer).</param>
            <returns>New instance of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.GetAsymmetric``1">
            <summary>
            Gets the instance of <see cref="T:Xtensive.Comparison.IComparer`2"/> (asymmetric comparer)
            for <typeparamref name="T"/>-<typeparamref name="TSecond"/> pair, if supported.
            </summary>
            <typeparam name="TSecond">Type of the second argument to compare.</typeparam>
            <exception cref="T:System.InvalidOperationException">Complex comparer could not be 
            created for <typeparamref name="T"/>-<typeparamref name="TSecond"/> pair.</exception>
            <returns><see cref="T:Xtensive.Comparison.IComparer`2"/> asymmetric comparer.</returns>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerBase`1.ComparisonRules">
            <summary>
            Gets comparison rules used by this comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerBase`1.DefaultDirectionMultiplier">
            <summary>
            Multiplier for default direction in <see cref="F:Xtensive.Comparison.AdvancedComparerBase`1.ComparisonRules"/>
            (either <see langword="1"/> or <see langword="-1"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.ApplyRules(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetAsymmetric``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetNearestValue(`0,Xtensive.Core.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetArithmetic">
            <summary>
            Gets default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for type <typeparamref name="T"/>.
            </summary>
            <returns>Default arithmetic.</returns>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Creates new comparer of the same type, but using different comparison rules.
            </summary>
            <param name="rules">Comparison rules for the new comparer (relatively to this one).</param>
            <returns>New comparer of the same type, but using different comparison rules.</returns>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.OnDeserialization(System.Object)">
            <summary>
            Performs post-deserialization actions.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.Xtensive#Comparison#IAdvancedComparerBase#ComparisonRules">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.ValueRangeInfo">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparerStruct`1">
            <summary>
            A struct providing faster access for key <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> delegates.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Default">
            <summary>
            Gets <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/> for <see cref="P:Xtensive.Comparison.AdvancedComparer`1.Default"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.System">
            <summary>
            Gets <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/> for <see cref="P:Xtensive.Comparison.AdvancedComparer`1.System"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Comparer">
            <summary>
            Gets the underlying comparer for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Compare">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Equals">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.GetHashCode">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.GetNearestValue">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.ValueRangeInfo">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> value used by the underlying comparer.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.op_Implicit(Xtensive.Comparison.AdvancedComparer{`0})~Xtensive.Comparison.AdvancedComparerStruct{`0}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> to <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/>.
            </summary>
            <param name="comparer">Comparer to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.#ctor(Xtensive.Comparison.AdvancedComparer{`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.CastingComparer`2">
            <summary>
            Casting comparer - wraps some other comparer for type <typeparamref name="TTarget"/>
            </summary>
            <typeparam name="TSource">The type to compare.</typeparam>
            <typeparam name="TTarget">The base type of <typeparamref name="TSource"/> to provide a comparer for.</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.Compare(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.Equals(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetHashCode(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetNearestValue(`1,Xtensive.Core.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetAsymmetric``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.#ctor(Xtensive.Comparison.AdvancedComparer{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.IComparer`2">
            <summary>
            Coompares type <typeparamref name="TX"/> with <typeparamref name="TY"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.IComparer`2.Compare(`0,`1)">
            <summary>
            Compares <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <param name="x">First value to compare.</param>
            <param name="y">Second value to compare.</param>
            <returns><see langword="-1"/> if <c>x &lt; y</c>, <see langword="1"/> if <c>x &gt; y</c>; 
            otherwise, <see langword="0"/>.</returns>
        </member>
        <member name="T:Xtensive.Comparison.ComparerProvider">
            <summary>
            Default <see cref="T:System.Collections.Generic.IComparer`1"/> provider. 
            Provides default comparer for the specified type.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.IComparerProvider">
            <summary>
            Provides <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> comparers.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.IComparerProvider.GetComparer``1">
            <summary>
            Gets comparer for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the comparer for.</typeparam>
            <returns>Comparer for <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.GetComparer``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.CreateAssociate``2(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.ConvertAssociate``3(``1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparerProvider.Default">
            <summary>
            Gets default instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparerProvider.System">
            <summary>
            Gets system comparer provider.
            A shortcut to <see cref="P:Xtensive.Comparison.SystemComparerProvider.Instance"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ComparisonRule">
            <summary>
            Describes how to compare values of comparable objects.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.None">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Positive">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Negative">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.Negative"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Direction">
            <summary>
            Gets <see cref="T:Xtensive.Core.Direction"/> for the comparison.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Culture">
            <summary>
            Gets <see cref="T:System.Globalization.CultureInfo"/> for the comparison.
            <see langword="Null"/> means no culture is specified.
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> should normally be used
            for the comparison in this case.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Invert">
            <summary>
            Inverts the direction of the rule.
            </summary>
            <returns>The same rule, but with inverted direction.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Combine(Xtensive.Comparison.ComparisonRule)">
            <summary>
            Combines new comparison rule with the rule described by this instance.
            </summary>
            <param name="rule">Rule to combine.</param>
            <returns>Result of the combination.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Equals(Xtensive.Comparison.ComparisonRule)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Equality(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRule)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Inequality(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRule)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Implicit(Xtensive.Comparison.ComparisonRule)~Xtensive.Comparison.ComparisonRules">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Comparison.ComparisonRule"/> to <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            </summary>
            <param name="comparisonRule">The rule to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Implicit(Xtensive.Core.Direction)~Xtensive.Comparison.ComparisonRule">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Core.Direction"/> to <see cref="T:Xtensive.Comparison.ComparisonRule"/>.
            </summary>
            <param name="direction">Direction to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.#ctor(Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="direction">Initial <see cref="T:Xtensive.Core.Direction"/> property value.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.#ctor(Xtensive.Core.Direction,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="direction">Initial <see cref="T:Xtensive.Core.Direction"/> property value.</param>
            <param name="culture">Initial <see cref="F:Xtensive.Comparison.ComparisonRule.Culture"/> property value.</param>
        </member>
        <member name="T:Xtensive.Comparison.ComparisonRules">
            <summary>
            Ordering rule for <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.None">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.Positive">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.Negative">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.Negative"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetCompositeValue(System.Int32)">
            <summary>
            Gets the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule 
            for the specified index of composite rule.
            </summary>
            <param name="index">Index of composite rule to get the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of.</param>
            <returns><see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetDefaultRuleDirection(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Core.Direction"/> of the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule 
            for the specified index of composite rule.
            </summary>
            <param name="index">Index of composite rule to get the <see cref="T:Xtensive.Core.Direction"/> of.</param>
            <returns><see cref="T:Xtensive.Core.Direction"/> of the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Combine(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Combines new comparison rules with the rules described by this instance.
            </summary>
            <param name="rules">Rules to combine.</param>
            <returns>Result of the combination.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Equals(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.op_Implicit(Xtensive.Core.Direction)~Xtensive.Comparison.ComparisonRules">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Core.Direction"/> to <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            </summary>
            <param name="direction">The direction to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRules[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
            <param name="composite">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> property value.
            Last composite rule is considered as <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/> rule.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRules[],Xtensive.Comparison.ComparisonRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
            <param name="composite">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> property value.</param>
            <param name="tail">Tail comparison rule (repeated infinitely after composite rules).</param>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Value">
            <summary>
            Gets primary <see cref="T:Xtensive.Comparison.ComparisonRule"/> value.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Tail">
            <summary>
            Gets tail <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            Tail rule is considered repeating infinitely 
            starting from <see cref="P:Xtensive.Comparison.ComparisonRules.TailIndex"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Count">
            <summary>
            Gets count of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rules.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.TailIndex">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/> rule index in <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rules.
            Always returns <see cref="P:Xtensive.Comparison.ComparisonRules.Count"/>-1.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.IsRecursive">
            <summary>
            Indicates whether rule is recursive - 
            i.e. its <see cref="P:Xtensive.Comparison.ComparisonRules.Count"/>==<see langword="1"/> and 
            <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/><see langword="[0]"/> returns itself.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Item(System.Int32)">
            <summary>
            Gets composite rule for the specified index of composite value.
            </summary>
            <param name="index">Index of composite rule to get.</param>
            <returns>An instance of <see cref="T:Xtensive.Comparison.ComparisonRules"/>, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Composite">
            <summary>
            Gets a copy of internal array of composite rules
            that are used to order composite values.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ISystemComparer`1">
            <summary>
            Tagging interface specifying that comparer overrides
            <see cref="T:Xtensive.Comparison.SystemComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to override the system comparer for.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.WrappingComparer`2">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>s.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
            <typeparam name="TBase">Base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`2.BaseComparer">
            <summary>
            Comparer delegates for <typeparamref name="TBase"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.WrappingComparer`2.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="T:Xtensive.Comparison.WrappingComparer`3">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>s.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
            <typeparam name="TBase1">First base (wrapped) type.</typeparam>
            <typeparam name="TBase2">Second base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`3.BaseComparer1">
            <summary>
            Comparer delegates for <typeparamref name="TBase1"/> type.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`3.BaseComparer2">
            <summary>
            Comparer delegates for <typeparamref name="TBase2"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.WrappingComparer`3.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.CompareTo(`0)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.Equals(`0)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.GetHashCode">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="T:Xtensive.Comparison.ReferenceEqualityComparer`1">
            <summary>
            Compares two objects by their reference values.
            </summary>
            <typeparam name="T">Type of the object to compare.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.ReferenceEqualityComparer`1.Instance">
            <summary>
            Gets the only instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.SystemComparer`1">
            <summary>
            <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> wrapper for system comparers.
            </summary>
            <typeparam name="T">Type to compare.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.SystemComparer`1.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.SystemComparerProvider">
            <summary>
            Provides <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> wrappers for system comparers.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparerProvider.CreateAssociate``2(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.SystemComparerProvider.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ValueRangeInfo`1">
            <summary>
            Represents a pair of smallest and largest values defined for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of <typeparamref name="T"/>.</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.ValueRangeInfo`1.Invert">
            <summary>
            Inverts the instance of <see cref="T:Xtensive.Comparison.ValueRangeInfo`1"/>.
            Exactly, exchanges <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/> and <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>,
            and replaced <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/> to a negative one.
            </summary>
            <returns>Inverted <see cref="T:Xtensive.Comparison.ValueRangeInfo`1"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ValueRangeInfo`1.#ctor(System.Boolean,`0,System.Boolean,`0,System.Boolean,`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="hasMinValue">if set to <see langword="true"/> then this instance has the smallest possible value of <typeparamref name="T"/>.</param>
            <param name="minValue">The smallest possible value of <typeparamref name="T"/>.</param>
            <param name="hasMaxValue">if set to <see langword="true"/> then this instance has the largest possible value of <typeparamref name="T"/>.</param>
            <param name="maxValue">The largest possible value of <typeparamref name="T"/>.</param>
            <param name="hasDeltaValue">if set to <see langword="true"/> then this instance has the smallest possible delta value of <typeparamref name="T"/>.</param>
            <param name="deltaValue">The smallest possible delta value of <typeparamref name="T"/>.</param>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasMinValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasMaxValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasDeltaValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue">
            <summary>
            Represents the smallest possible value of a T.
            </summary>
            <value>The smallest possible value.</value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue">
            <summary>
            Represents the largest possible value of a T.
            </summary>
            <value>The largest possible value.</value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue">
            <summary>
            Represents the smallest possible delta value of a <typeparamref name="T"/>.
            </summary>
            <value>The smallest possible delta value.</value>
        </member>
        <member name="T:Xtensive.Comparison.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WellKnown.OrdinalMaxChar">
            <summary>
            Returns <see cref="F:System.Char.MaxValue"/>
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WellKnown.CultureSensitiveMaxChar">
            <summary>
            Returns "\uDBFF\uDFFF"
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverter`2">
            <summary>
            Provides delegates allowing to call conversion methods faster.
            </summary>
            <typeparam name="TFrom">Type of the first <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> generic argument.</typeparam>
            <typeparam name="TTo">Type of the second <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.Provider">
            <summary>
            Gets the provider underlying converter is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.Convert">
            <summary>
            Gets <see cref="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.IsRough">
            <summary>
            Gets <see cref="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough"/> value.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverter`2.#ctor(Xtensive.Conversion.IAdvancedConverter{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="implementation">Advanced converter to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverter`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverter`2.Default">
            <summary>
            Gets default advanced converter for types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.
            (uses <see cref="P:Xtensive.Conversion.AdvancedConverterProvider.Default"/> <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterBase">
            <summary>
            Base class for any advanced converter.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterBase">
            <summary>
            Tagging interface for any converter supported by
            <see cref="T:Xtensive.Conversion.AdvancedConverterProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverterBase.Provider">
            <summary>
            Gets the provider this converter is associated with.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterBase.#ctor(Xtensive.Conversion.IAdvancedConverterProvider)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="provider">The provider this advanced converter is bound to.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterBase.OnDeserialization(System.Object)">
            <summary>
            Performs post-deserialization actions.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterBase.Provider">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterProvider">
            <summary>
            Default <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> provider. 
            Provides default converter for specified types.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterProvider">
            <summary>
            Provides <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterProvider.GetConverter``2">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> for specified types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.
            </summary>
            <typeparam name="TFrom">Type to convert from.</typeparam>
            <typeparam name="TTo">Type to convert to.</typeparam>
            <returns><see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> instance  for specified types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.</returns>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverterProvider.BaseTime">
            <summary>
            Gets base time for <see cref="T:System.DateTime"/> conversions.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterProvider.ZeroTime">
            <summary>
            Zero time point (for conversion of <see cref="T:System.DateTime"/> to e.g. <see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.GetConverter``2">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.PreferAssociate``3(``2,``2)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.CreateCustomAssociate``3">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.ConvertAssociate``4(``2)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterProvider.Default">
            <summary>
            Gets default instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterProvider.BaseTime">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterStruct`2">
            <summary>
            A struct providing faster access for key <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/> delegates.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.Default">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.AdvancedConverterStruct`2"/> for 
            <see cref="P:Xtensive.Conversion.AdvancedConverter`2.Default"/> hasher.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.AdvancedConverter">
            <summary>
            Gets the underlying converter for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.Convert">
            <summary>
            Gets <see cref="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.IsRough">
            <summary>
            Gets <see cref="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough"/> value.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.op_Implicit(Xtensive.Conversion.AdvancedConverter{`0,`1})~Xtensive.Conversion.AdvancedConverterStruct{`0,`1}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/> to 
            <see cref="T:Xtensive.Conversion.AdvancedConverterStruct`2"/>.
            </summary>
            <param name="advancedConverter">Converter to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.#ctor(Xtensive.Conversion.AdvancedConverter{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="advancedConverter">Converter to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.Biconverter`2">
            <summary>
            Delegate-based implementation.
            </summary>
            <typeparam name="TFrom">Type to convert from.</typeparam>
            <typeparam name="TTo">Type to convert to.</typeparam>
        </member>
        <member name="F:Xtensive.Conversion.Biconverter`2.ConvertForward">
            <summary>
            Gets the delegate converting specified value 
            from <typeparamref name="TFrom"/>
            to <typeparamref name="TTo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.Biconverter`2.ConvertBackward">
            <summary>
            Gets the delegate converting specified value 
            from <typeparamref name="TTo"/>
            to <typeparamref name="TFrom"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.Equals(Xtensive.Conversion.Biconverter{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(System.Converter{`0,`1},System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="convertForward">Forward converter.</param>
            <param name="convertBackward">Backward converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(Xtensive.Conversion.IAdvancedConverter{`0,`1},Xtensive.Conversion.IAdvancedConverter{`1,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="forwardConverter">Forward converter.</param>
            <param name="backwardConverter">Backward converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(Xtensive.Conversion.IBiconverter{`0,`1})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="biconverter">The biconverter.</param>
        </member>
        <member name="P:Xtensive.Conversion.Biconverter`2.AsIs">
            <summary>
            Gets the "as is" bidirectional converter.
            Note: it involves boxing on any conversion (for <see cref="T:System.ValueType"/>s).
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.ConvertingEnumerable`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementor performing
            conversion from <typeparamref name="TFrom"/> to
            <typeparamref name="TTo"/> on the fly.
            </summary>
            <typeparam name="TFrom">The item type to convert from.</typeparam>
            <typeparam name="TTo">The item type to convert to.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="innerEnumerable">Enumerable to wrap.</param>
            <param name="converter">Item converter to use.</param>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverter`2">
            <summary>
            Converts values or instances of type <typeparamref name="TFrom"/> to 
            values or instances of type <typeparamref name="TTo"/>.
            </summary>
            <typeparam name="TFrom">The type of value to convert.</typeparam>
            <typeparam name="TTo">The type of converted value.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)">
            <summary>
             Converts specified value of <typeparamref name="TFrom"/> type
             to <typeparamref name="TTo"/> type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterFactory`1">
            <summary>
            A factory class creating complex <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/>.
            Usually implemented instead of converter for some complex type, e.g.
            <see cref="T:System.Nullable`1"/> to handle requests for its converters.
            </summary>
            <typeparam name="TFrom">The source type (the type to convert from).</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterFactory`1.CreateForwardConverter``1">
            <summary>
            Creates forward-converting converter.
            </summary>
            <typeparam name="TTo">The destination type (the type to convert to).</typeparam>
            <returns>Forward-converting converter.</returns>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterFactory`1.CreateBackwardConverter``1">
            <summary>
            Creates backward-converting converter.
            </summary>
            <typeparam name="TTo">The destination type (the type to convert to).</typeparam>
            <returns>Backward-converting converter.</returns>
        </member>
        <member name="T:Xtensive.Conversion.IBiconverter`2">
            <summary>
            Provides bidirectional conversion support.
            </summary>
            <typeparam name="TFrom">The 1st type to convert.</typeparam>
            <typeparam name="TTo">The 2nd type to convert.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IBiconverter`2.ConvertForward(`0)">
            <summary>
            Converts the value forward.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Conversion.IBiconverter`2.ConvertBackward(`1)">
            <summary>
            Converts the value backward.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Conversion.StrictAdvancedConverterBase`1.Convert(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Conversion.StrictAdvancedConverterBase`1.IsRough">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Conversion.RoughAdvancedConverterBase.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Boolean}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Byte}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#SByte}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int16}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt16}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int32}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt32}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int64}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt64}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Single}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Double}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#DateTime}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#TimeSpan}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Char}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.WrappingAdvancedConverter`4">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/>s.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.WrappingAdvancedConverter`4.BaseConverter">
            <summary>
            Converter delegates for <typeparamref name="TFromBase"/>-<typeparamref name="TToBase"/> types.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.WrappingAdvancedConverter`4.Convert(`0)">
            <summary>
             Converts specified value of <typeparamref name="TFrom"/> type
             to <typeparamref name="TTo"/> type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Xtensive.Conversion.WrappingAdvancedConverter`4.#ctor(Xtensive.Conversion.IAdvancedConverterProvider)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Conversion.WrappingAdvancedConverter`4"/>.
            </summary>
            <param name="provider">Converter provider this converter is bound to.</param>
        </member>
        <member name="P:Xtensive.Conversion.WrappingAdvancedConverter`4.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.NullableForwardAdvancedConverter`2.Convert(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.NullableNullableAdvancedConverter`2.Convert(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.NullableReverseAdvancedConverter`2.Convert(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.AliasGenerator">
            <summary>
            Universal alias generator.
            </summary>
        </member>
        <member name="F:Xtensive.Core.AliasGenerator.DefaultAliasTemplate">
            <summary>
            Default alias template. Value is "{0}{1}". Where {0} - template parameter for prefix and {1} - template parameter for suffix.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Next">
            <summary>
            Generates new alias.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create">
            <summary>
            Creates generator with default settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String)">
            <summary>
            Creates generator using specified alias template.
            </summary>
            <param name="aliasTemplate">Alias template. Could use two template parameters: {0} - for prefix and {1} for suffix.</param>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String[])">
            <summary>
            Creates generator using specified prefix sequence.
            </summary>
            <param name="overriddenPrefixes">The overridden prefix sequence.</param>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String[],System.String)">
            <summary>
            Creates generator using specified <paramref name="overriddenPrefixes"/> and <paramref name="aliasTemplate"/>.
            </summary>
            <param name="overriddenPrefixes">The overridden prefix sequence.</param>
            <param name="aliasTemplate">The alias template.</param>
        </member>
        <member name="T:Xtensive.Core.ArgumentValidator">
            <summary>
            Helper class validation most common error conditions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentNotNull(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/>.
            </summary>
            <param name="value">Value to compare with <see langword="null"/>.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsNotDefault``1(``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/>.
            </summary>
            <param name="value">Value to compare with <see langword="null"/>.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of default value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/> or <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIs``1(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not <see langword="null"/> 
            and of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The expected type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIs(System.Object,System.Type,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not <see langword="null"/> 
            and of <paramref name="type"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="type">The expected type of value.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsNullOr``1(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is either <see langword="null"/>,
            or of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The expected type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is either <see langword="null"/>,
            or of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="lowerBoundary">Lower range boundary (inclusively).</param>
            <param name="upperBoundary">Upper range boundary (inclusively).</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is greater then the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsGreaterThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is greater then or equal
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is less then
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsLessThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is less then or equal
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="T:Xtensive.Core.Cloner">
            <summary>
            Object cloning helper.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Cloner.Clone``1(``0)">
            <summary>
            Clones the <paramref name="source"/> using 
            provided <see cref="F:Xtensive.Core.Cloner.Formatter"/>.
            </summary>
            <param name="source">The source to clone.</param>
        </member>
        <member name="T:Xtensive.Core.ConfigurationCollection`1">
            <summary>
            A typed version of <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <typeparam name="T">The type of the collection item.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.CreateNewElement">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Xtensive.Core.ConfigurationCollection`1.Item(System.String)">
            <summary>
            Gets the element by specified identifier.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Context`1">
            <summary>
            Base <see cref="T:Xtensive.Core.IContext`1"/> implementation.
            To be used with various <see cref="T:Xtensive.Core.Scope`1"/> descendants.
            </summary>
            <typeparam name="TScope">The type of the associated scope.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IContext`1">
            <summary>
            Context contract.
            </summary>
            <typeparam name="TScope">The type of <see cref="T:Xtensive.Core.Scope`1"/> of the context.</typeparam>
            <seealso cref="T:Xtensive.Core.Scope`1"/>
        </member>
        <member name="T:Xtensive.Core.IContext">
            <summary>
            Base interface for any <see cref="T:Xtensive.Core.IContext`1"/> contract.
            </summary>
            <seealso cref="T:Xtensive.Core.IContext`1"/>
            <seealso cref="T:Xtensive.Core.Scope`1"/>
        </member>
        <member name="M:Xtensive.Core.IContext.Activate">
            <summary>
            Activates the current context.
            </summary>
            <returns><see cref="T:System.IDisposable"/> object (normally - <see cref="T:Xtensive.Core.Scope`1"/> descendant)
            that can be used to deactivate the context by disposing it.</returns>
            <seealso cref="P:Xtensive.Core.IContext.IsActive"/>
        </member>
        <member name="P:Xtensive.Core.IContext.IsActive">
            <summary>
            Indicates whether current context is active.
            </summary>
            <seealso cref="M:Xtensive.Core.IContext.Activate"/>
        </member>
        <member name="M:Xtensive.Core.IContext`1.Activate">
            <summary>
            Activates the current context.
            </summary>
            <returns><typeparamref name="TScope"/> object (normally - <see cref="T:Xtensive.Core.Scope`1"/> descendant)
            that can be used to deactivate the context by disposing it.</returns>
            <seealso cref="P:Xtensive.Core.IContext.IsActive"/>
        </member>
        <member name="M:Xtensive.Core.Context`1.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Context`1.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Context`1.CreateActiveScope">
            <summary>
            Creates the associated scope.
            </summary>
            <returns>New instance of the <typeparamref name="TScope"/> type.</returns>
        </member>
        <member name="P:Xtensive.Core.Context`1.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.Direction">
            <summary>
            Possible directions of iteration through the enumerable.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Default">
            <summary>
            Default direction (none).
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.None">
            <summary>
            No direction.
            Implies that either comparison for it can't be performed, or shouldn't be done.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Positive">
            <summary>
            Forward direction (acsending order).
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Negative">
            <summary>
            Backward direction (descending order).
            </summary>
        </member>
        <member name="T:Xtensive.Core.Disposable">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Disposable.op_BitwiseAnd(Xtensive.Core.Disposable,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable.#ctor(System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Xtensive.Core.Disposable.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Core.DisposableSet">
            <summary>
            Ensures all the <see cref="T:System.IDisposable"/> objects added to it are disposed
            on disposal of <see cref="T:Xtensive.Core.DisposableSet"/> instance.
            </summary>
            <remarks>
            <note>
            <see cref="M:System.IDisposable.Dispose"/> methods are invoked in backward order.
            </note>
            </remarks>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.Add(System.IDisposable)">
            <summary>
            Adds an <see cref="T:System.IDisposable"/> object to the set.
            </summary>
            <param name="disposable">The object to add.</param>
            <returns><see langword="True"/>, if object is successfully added;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.Clear">
            <summary>
            Clears this instance by discarding all registered objects.
            <see cref="M:System.IDisposable.Dispose"/> methods are not called.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.op_BitwiseAnd(Xtensive.Core.DisposableSet,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.DisposableSet"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="initialContent">The initial content.</param>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.System#IDisposable#Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Disposable`2">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            Allows to store and pass two parameters to this action.
            </summary>
            <typeparam name="T1">First parameter type.</typeparam>
            <typeparam name="T2">Second parameter type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.op_BitwiseAnd(Xtensive.Core.Disposable{`0,`1},System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable`2"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.#ctor(`0,`1,System.Action{System.Boolean,`0,`1})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="parameter1">First parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="parameter2">Second parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Disposable`1">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            Allows to store and pass one parameter to this action.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.op_BitwiseAnd(Xtensive.Core.Disposable{`0},System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable`1"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.#ctor(`0,System.Action{System.Boolean,`0})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="parameter">Parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ExceptionAggregator">
            <summary>
            Provides exception aggregation support.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Complete">
            <summary>
            Indicates exception aggregation was completed successfully,
            i.e. aggregated exceptions, if any, can be thrown on disposal.
            Sets <see cref="P:Xtensive.Core.ExceptionAggregator.IsCompleted"/> to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Add(System.Exception,System.Boolean)">
            <summary>
            Adds the specified exception to the list of caught exceptions.
            </summary>
            <param name="exception">The exception to add.</param>
            <param name="handle">Indicates whether <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/>
            must be invoked for this exception or not.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <param name="action">The action to execute.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``1(System.Action{``0},``0)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T">The type of action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument">The action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st action argument.</typeparam>
            <typeparam name="T2">The type of the 2nd action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument1">The 1st action argument value.</param>
            <param name="argument2">The 2nd action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st action argument.</typeparam>
            <typeparam name="T2">The type of the 2nd action argument.</typeparam>
            <typeparam name="T3">The type of the 3rd action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument1">The 1st action argument value.</param>
            <param name="argument2">The 2nd action argument value.</param>
            <param name="argument3">The 3rd action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument">The function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st function argument.</typeparam>
            <typeparam name="T2">The type of the 2nd function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument1">The 1st function argument value.</param>
            <param name="argument2">The 2nd function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st function argument.</typeparam>
            <typeparam name="T2">The type of the 2nd function argument.</typeparam>
            <typeparam name="T3">The type of the 3rd function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument1">The 1st function argument value.</param>
            <param name="argument2">The 2nd function argument value.</param>
            <param name="argument3">The 3rd function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.HandleException(System.Exception)">
            <summary>
            Invoked on any exception caught by <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.
            </summary>
            <param name="exception">The caught exception.</param>
            <remarks>
            If this method throws an exception, it won't be caught.
            I.e. it will throw "through" any of <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.
            </remarks>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="exceptionMessage">The message of <see cref="T:Xtensive.Core.AggregateException"/>.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor(System.Action{System.Exception},System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="exceptionHandler">The exception handler.</param>
            <param name="exceptionMessage">The message of <see cref="T:Xtensive.Core.AggregateException"/>.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
            <exception cref="T:Xtensive.Core.AggregateException">Thrown if at least one exception was caught 
            by <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.</exception>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler">
            <summary>
            Gets or sets the exception handler.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.Count">
            <summary>
            Gets the number of caught exceptions.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.IsCompleted">
            <summary>
            Gets a value indicating exception aggregation was completed successfully,
            i.e. aggregated exceptions, if any, can be thrown on disposal.
            Set to <see langword="true"/> by <see cref="M:Xtensive.Core.ExceptionAggregator.Complete"/> method call.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Exceptions">
            <summary>
            Most common <see cref="T:System.Exception"/> factory.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InternalError(System.String,Xtensive.Orm.Logging.BaseLog)">
            <summary>
            Returns an exception informing internal error has occurred.
            </summary>
            <param name="description">Error description.</param>
            <param name="log"><see cref="T:Xtensive.Orm.Logging.BaseLog"/> instance to log the problem;
            <see langword="null"/> means logging is not necessary.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InvalidUrl(System.String,System.String)">
            <summary>
            Returns an exception informing that URL is invalid.
            </summary>
            <param name="url">Invalid URL.</param>
            <param name="parameterName">Name of method parameter where URL was passed (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.AlreadyInitialized(System.String)">
            <summary>
            Returns an exception informing that object or property is already initialized.
            </summary>
            <param name="propertyName">Name of the property; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.AlreadyDisposed(System.String)">
            <summary>
            Returns an exception informing that object is already disposed.
            </summary>
            <param name="objectName">Name of the object; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.NotInitialized(System.String)">
            <summary>
            Returns an exception informing that object or property is not initialized,
            or not initialized properly.
            </summary>
            <param name="propertyName">Name of the property; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InvalidArgument``1(``0,System.String)">
            <summary>
            Returns an exception informing that specified argument
            value is not allowed or invalid.
            </summary>
            <param name="value">Actual parameter value.</param>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ObjectIsReadOnly(System.String)">
            <summary>
            Returns an exception informing that object is read-only.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionIsEmpty(System.String)">
            <summary>
            Returns an exception informing that collection is empty.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionIsReadOnly(System.String)">
            <summary>
            Returns an exception informing that collection is read-only.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionHasBeenChanged(System.String)">
            <summary>
            Returns an exception informing that collection has been changed during the enumeration.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ContextRequired(System.Type,System.Type)">
            <summary>
            Returns an exception informing that context is required.
            </summary>
            <param name="contextType">Type of required context.</param>
            <param name="scopeType">Type of <see cref="T:Xtensive.Core.Scope`1"/> used to set the context.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ContextRequired``2">
            <summary>
            Returns an exception informing that context is required.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TScope">The type of the scope.</typeparam>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ScopeRequired(System.Type)">
            <summary>
            Returns an exception informing that scope is required.
            </summary>
            <param name="scopeType">Type of <see cref="T:Xtensive.Core.SimpleScope`1"/> used to set the context.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ScopeRequired``1">
            <summary>
            Returns an exception informing that scope is required.
            </summary>
            <typeparam name="TScope">The type of the scope.</typeparam>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.LambdaParameterIsOutOfScope(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Returns an exception informing that specified <see cref="T:System.Linq.Expressions.ParameterExpression"/> is out of scope.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="T:Xtensive.Core.ActivationException">
            <summary>
            Thrown by <see cref="T:Xtensive.IoC.ServiceContainerBase"/> on activation errors.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Xtensive.Core.AggregateException">
            <summary>
            Aggregates a set of caught exceptions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AggregateException.GetFlatExceptions">
            <summary>
            Gets the "flat" list with all aggregated exceptions. 
            If other <see cref="T:Xtensive.Core.AggregateException"/>s were aggregated, 
            their inner exceptions are included instead of them.
            </summary>
            <returns>Flat list of aggregated exceptions.</returns>
        </member>
        <member name="M:Xtensive.Core.AggregateException.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="text">Text of message.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="message">Text of message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="exceptions">Inner exceptions.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="message">Text of message.</param>
            <param name="exceptions">Inner exceptions.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Xtensive.Core.AggregateException.Exceptions">
            <summary>
            Gets the list of caught exceptions.
            </summary>
        </member>
        <member name="T:Xtensive.Core.InstanceIsLockedException">
            <summary>
            Thrown by <see cref="T:Xtensive.Core.ILockable"/> implementors on attempts 
            to change instance properties in the locked state.
            </summary>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="text">Text of message.</param>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> object.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> object.</param>
        </member>
        <member name="T:Xtensive.Core.ArrayExtensions">
            <summary>
            <see cref="T:System.Array"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Copy``1(``0[])">
            <summary>
            Clones the array.
            </summary>
            <typeparam name="TItem">The type of array items.</typeparam>
            <param name="source">Array to clone.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Copy``1(``0[],``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> array
            to <paramref name="target"/> starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source array to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetIndex"/> is out of range.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Cast``2(``0[])">
            <summary>
            Clones <paramref name="source"/> array with type case.
            </summary>
            <typeparam name="TItem">The type of source array items.</typeparam>
            <typeparam name="TNewItem">The type of result array items.</typeparam>
            <param name="source">Collection to convert.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Convert``2(``0[],System.Converter{``0,``1})">
            <summary>
            Clones <paramref name="source"/> array with element conversion.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <typeparam name="TNewItem">The type of item to convert to.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="converter">A delegate that converts each element.</param>
            <returns>An array of converted elements.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Gets the index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise returns <see langword="-1"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Array to search for the item.</param>
            <param name="item">Item to locate in the array.</param>
            <returns>
            Index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise, <see langword="-1"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Segment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Enumerates segment of an array.
            </summary>
            <typeparam name="TItem">The type of the array item.</typeparam>
            <param name="items">The array to enumerate the segment of.</param>
            <param name="offset">Segment offset.</param>
            <param name="length">Segment length.</param>
            <returns>An enumerable iterating through the segment.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.IndexOf``1(``0[],``0,System.Boolean)">
            <summary>
            Gets the index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise returns <see langword="-1"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Array to search for the item.</param>
            <param name="item">Item to locate in the array.</param>
            <param name="byReference">Indicates whether just references
            should be compared.</param>
            <returns>
            Index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise, <see langword="-1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Value type is passed instead of class.</exception>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Select``1(``0[],System.Func{``0,``0,System.Int32},System.Int32)">
            <summary>
            Selects the specified item from the ordered sequence of items
            produced by ordering the <paramref name="items"/>.
            The original sequence will be partially reordered!
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items to select from.</param>
            <param name="index">The offset of the item to select from the ordered sequence.</param>
            <returns>The specified item from the ordered sequence of items.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Prepend``1(``0[],``0)">
            <summary>
            Creates new array consisting of <paramref name="items"/>
            and <paramref name="item"/> added before array elements.
            If <paramref name="items"/> is <see langword="null"/>
            returns array that contains just <paramref name="item"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The prefix item.</param>
            <returns>Result array.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Append``1(``0[],``0)">
            <summary>
            Creates new array consisting of <paramref name="items"/>
            and <paramref name="item"/> added after array elements.
            If <paramref name="items"/> is <see langword="null"/>
            returns array that contains just <paramref name="item"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The prefix item.</param>
            <returns>Result array.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            Combines the specified source and target arrays into new one.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Core.CollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts <paramref name="source"/> collection to an array.
            </summary>
            <typeparam name="TItem">The type of collection items.</typeparam>
            <param name="source">Collection to convert.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.Copy``1(System.Collections.Generic.ICollection{``0},``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.Copy``1(System.Collections.Generic.ICollection{``0},System.Array,System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small or multidimensional.</exception>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsNone``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            none of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
              <see langword="True"/> if the specified <paramref name="collection"/> none 
              of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            all of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="collection"/> all
            of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            any of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="collection"/> any 
             of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value from the dictionary by its key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>Found value.
            <see langword="default(T)" />, if there is no value corresponding to specified key.</returns>
        </member>
        <member name="T:Xtensive.Core.DelegateBindExtensions">
            <summary>
            Extension methods for binding delegates to parameters.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``2(System.Func{``0,``1},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``3(System.Func{``0,``1,``2},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``6(System.Func{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``1(System.Action{``0},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``2(System.Action{``0,``1},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``3(System.Action{``0,``1,``2},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``5(System.Action{``0,``1,``2,``3,``4},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``6(System.Action{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="T:Xtensive.Core.DisposableExtensions">
            <summary>
            <see cref="T:System.IDisposable"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.Join(System.IDisposable,System.IDisposable)">
            <summary>
            Joins the specified disposable objects by returning
            a single <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal.
            </summary>
            <param name="disposable">The first disposable.</param>
            <param name="joinWith">The second disposable.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.DisposeSafely(System.IDisposable)">
            <summary>
            Safely disposes an <see cref="T:System.IDisposable"/> object.
            </summary>
            <param name="disposable">Object to dispose (can be <see langword="null"/>).</param>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.DisposeSafely(System.IDisposable,System.Boolean)">
            <summary>
            Safely disposes an <see cref="T:System.IDisposable"/> object.
            </summary>
            <param name="disposable">Object to dispose (can be <see langword="null"/>).</param>
            <param name="silently">If set to <see langword="true"/>, it won't throw an exception in any case.</param>
        </member>
        <member name="T:Xtensive.Core.EnumerableExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether enumerable is empty or not 
            by attempting to cast it to <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Linq.IQueryable`1"/>.
            May return false negative response.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to check.</param>
            <returns><see langword="True"/> if collection is definitely <see langword="null"/> or empty;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.TryGetLongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the count of items (as <see cref="T:System.Int64"/>) of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if it is actually
            <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Linq.IQueryable`1"/>.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to get count of.</param>
            <returns>The count of items, if it's possible to get it;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the count of items of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if it is actually
            <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Linq.IQueryable`1"/>.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to get count of.</param>
            <returns>The count of items, if it's possible to get it;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Run``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            "Runs" the specified <paramref name="sequence"/> by enumerating it.
            </summary>
            <typeparam name="T">Type of the sequence item.</typeparam>
            <param name="sequence">The sequence to run.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified <paramref name="action"/> to all the items 
            from the <paramref name="items"/> sequence.
            </summary>
            <typeparam name="T">Type of the sequence item.</typeparam>
            <param name="items">The sequence to apply the <paramref name="action"/> to.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the sequence to the <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of sequence item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <returns>A new <see cref="T:System.Collections.Generic.HashSet`1"/> instance containing 
            all the unique items from the <paramref name="source"/> sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts the elements of <paramref name="source"/> sequence 
            using specified <paramref name="converter"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <typeparam name="TNewItem">The type of item to convert to.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="converter">A delegate that converts each element.</param>
            <returns>A sequence of converted elements.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.CalculateHashCode``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Calculates hash code of <see cref="T:System.Collections.Generic.IEnumerable`1"/> by XOR hash codes of it's items.
             </summary>
            <param name="items">Enumerable to calculate hash for.</param>
             <typeparam name="TItem">The type of item.</typeparam>
            <returns>Hash code, calculated by enumerable items. If enumerable is null or empty returns 0.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToCommaDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <paramref name="source"/> to comma-delimited string.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <returns>Comma-delimited string containing string representation 
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToCommaDelimitedString(System.Collections.IEnumerable)">
            <summary>
            Converts the <paramref name="source"/> to comma-delimited string.
            </summary>
            <param name="source">The sequence to convert.</param>
            <returns>Comma delimited string combining string representations
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the <paramref name="source"/> to a delimited string.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>A delimited string combining string representations
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToDelimitedString(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts the <paramref name="source"/> to delimited string.
            </summary>
            <param name="source">The sequence to convert.</param>
            <param name="separator">The delimiter.</param>
            <returns>Delimited string containing string representation 
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Constructs <see cref="T:System.Collections.Generic.IEnumerable`1"/> from
            this <see cref="T:System.Collections.Generic.IEnumerable`1"/> and specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            by creating a <see cref="T:Xtensive.Core.Pair`2"/> from each pair of items.
            If one input <see cref="T:System.Collections.Generic.IEnumerable`1"/> is short,
            excess elements of the longer <see cref="T:System.Collections.Generic.IEnumerable`1"/> are discarded.
            </summary>
            <typeparam name="TLeft">Type of first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TRight">Type of second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="leftSequence">First <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rightSequence">Second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Zip result.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToArraySafely``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If <paramref name="sequence"/> is not <see langword="null"/>, creates an array from <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Otherwise, returns empty array.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>Array of elements of <paramref name="sequence"/>
            or empty array, if <paramref name="sequence"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.GetItems(Xtensive.Core.Segment{System.Int32})">
            <summary>
            Gets the items from the segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AddOne``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Safely adds one value to sequence.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="value">Value to add to sequence.</param>
            <returns>New sequence with both <paramref name="source"/> and <paramref name="value"/> items inside without duplicates.</returns>
            <remarks>If source sequence is null, it's equals to empty sequence. If value is null, it will not added to result sequence.</remarks>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="firstFastCount">The count of the source sequence's items 
            which will be returned without batching.</param>
            <param name="initialBatchSize">The initial size of a batch.</param>
            <param name="maximalBatchSize">The maximal sized of a batch.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="firstFastCount">The count of the source sequence's items 
            which will be returned without batching.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ApplyBeforeAndAfter``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action,System.Action)">
            <summary>
            Invokes specified delegates before and after the enumeration of each batch.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="beforeAction">The delegate that will be invoked before 
            the enumeration of each batch. Set this parameter to <see langword="null" /> to omit 
            the invocation.</param>
            <param name="afterAction">The delegate that will be invoked after 
            the enumeration of each batch. Set this parameter to <see langword="null" /> to omit 
            the invocation.</param>
            <returns>The source sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Boolean)">
            <summary>
            Flattens the item's hierarchy.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="root">The root of the hierarchy.</param>
            <param name="childrenExtractor">The children extractor. It's always executed 
            before a root item will be returned.</param>
            <param name="exitAction">This action is always executed after a root item 
            was returned.</param>
            <param name="rootFirst">If set to <see langword="true"/> then a root item 
            will be returned before its children.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all items in the 
            specified hierarchy.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whenever specified sequence contains at least <paramref name="numberOfElements"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="numberOfElements">The number of elements.</param>
            <returns><see langword="true"/> if <paramref name="sequence"/> contains at least <paramref name="numberOfElements"/>;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whenever specified sequence contains at most <paramref name="numberOfElements"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="numberOfElements">The number of elements.</param>
            <returns><see langword="true"/> if <paramref name="sequence"/> contains at most <paramref name="numberOfElements"/>;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.SortTopologically``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Sorts <paramref name="values"/> in topological order according to <paramref name="edgeTester"/>.
            </summary>
            <typeparam name="TValue">Type of a value to sort.</typeparam>
            <param name="values">Values to sort.</param>
            <param name="edgeTester">A predicate for testing edge presence.</param>
            <returns>Topologically sorted <paramref name="values"/> if no cycles exist, otherwise null.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Object},System.Object)">
            <summary>
            Converts IEnumerable of <typeparamref name="TItem"/> to IEnumerator of <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">Type of elements.</typeparam>
            <param name="enumerable">Enumerable to convert</param>
            <param name="afterEnumerationAction">Action which invoked after enumeration even if enumreation fails.</param>
            <param name="parameterForAction">Object parameter for <paramref name="afterEnumerationAction"/> action.</param>
            <returns>IEnumerator of <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Action)">
            <summary>
            Converts IEnumerable of <typeparamref name="TItem"/> to IEnumerator of <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">Type of elements.</typeparam>
            <param name="enumerable">Enumerable to convert</param>
            <param name="afterEnumerationAction">Action which invoked after enumeration even if enumreation fails.</param>
            <returns>IEnumerator of <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="T:Xtensive.Core.ExpressionCompileExtensions">
            <summary>
            Extension methods for compiling strictly typed lambda expressions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile(System.Linq.Expressions.Expression{System.Action})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``7(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``8(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``9(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``10(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``11(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``12(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``13(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``14(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``15(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="T:Xtensive.Core.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToString(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Formats the <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to format.</param>
            <param name="inCSharpNotation">If set to <see langword="true"/>, 
            the result will be returned in C# notation 
            (<see cref="T:Xtensive.Linq.ExpressionWriter"/> will be used).</param>
            <returns>A string containing formatted expression.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.IsNull(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is <see cref="T:System.Linq.Expressions.ConstantExpression"/> 
            with <see langword="null"/> <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <see langword="true"/> if the specified expression is null; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.BindParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])">
            <summary>
            Bind parameter expressions to <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="lambdaExpression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to bind parameters.</param>
            <param name="parameters"><see cref="T:System.Linq.Expressions.Expression"/>s to bind to <paramref name="lambdaExpression"/></param>
            <returns>Body of <paramref name="lambdaExpression"/> with lambda's parameters replaced 
            with corresponding expression from <paramref name="parameters"/></returns>
            <exception cref="T:System.InvalidOperationException">Something went wrong :(.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToSerializableExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts specified <see cref="T:System.Linq.Expressions.Expression"/> to <see cref="T:Xtensive.Linq.SerializableExpressions.SerializableExpression"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>Serializable expression that represents <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToExpression(Xtensive.Linq.SerializableExpressions.SerializableExpression)">
            <summary>
            Converts specified <see cref="T:Xtensive.Linq.SerializableExpressions.SerializableExpression"/> to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetReturnType(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets return type of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            This method is used to write code that is compilable on .NET 3.5,
            which do not have corresponding property.
            </summary>
            <param name="lambda">Expression to get return type for.</param>
            <returns>Return type of <paramref name="lambda"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">The root node of expression isn't of <see cref="T:System.Linq.Expressions.MemberExpression"/> type.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetField(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference field.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetProperty(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference property.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetIndexer(System.Linq.Expressions.Expression)">
            <summary>
            Gets the index <see cref="T:System.Reflection.PropertyInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.IndexExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetConstructor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.ConstructorInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Strips <see cref="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)"/> expressions.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripCasts(System.Linq.Expressions.Expression)">
            <summary>
            Strips <see cref="F:System.Linq.Expressions.ExpressionType.Convert"/> and <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs"/>.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripLambda(System.Linq.Expressions.Expression)">
            <summary>
            Strips the lambda.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripMemberAccessChain(System.Linq.Expressions.Expression)">
            <summary>
            Strips the chain of <see cref="T:System.Linq.Expressions.MemberExpression"/>s
            </summary>
            <param name="expression">Expression to process.</param>
            <returns><paramref name="expression"/> with chain of <see cref="T:System.Linq.Expressions.MemberExpression"/>s removed (if any).</returns>
        </member>
        <member name="T:Xtensive.Core.HasServicesExtensions">
            <summary>
            <see cref="T:Xtensive.Core.IHasServices"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService``1(Xtensive.Core.IHasServices,System.Boolean)">
            <summary>
            Gets the service of specified type <typeparamref name="T"/>;
            throws <see cref="T:System.InvalidOperationException"/>, if there is no such service.
            </summary>
            <typeparam name="T">The type of service to get.</typeparam>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="failIfNone">If set to <see langword="true"/>, an exception will be thrown 
            if there is no requested service.</param>
            <returns>Requested service;
            <see langword="null"/>, if <paramref name="failIfNone"/>==<see langword="false"/> 
            and there is no requested service.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="failIfNone"/>==<see langword="true"/> 
            and there is no requested service.</exception>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService(Xtensive.Core.IHasServices,System.Type,System.Boolean)">
            <summary>
            Gets the service of the specified <paramref name="serviceType"/>;
            throws <see cref="T:System.InvalidOperationException"/>, if there is no such service.
            </summary>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="serviceType">Type of the service to get.</param>
            <param name="failIfNone">If set to <see langword="true"/>, an exception will be thrown 
            if there is no requested service.</param>
            <returns>Requested service;
            <see langword="null"/>, if <paramref name="failIfNone"/>==<see langword="false"/> 
            and there is no requested service.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="failIfNone"/>==<see langword="true"/> 
            and there is no requested service.</exception>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService(Xtensive.Core.IHasServices,System.Type)">
            <summary>
            Gets the service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="serviceType">Type of the service to get.</param>
            <returns>The service of specified type.</returns>
        </member>
        <member name="T:Xtensive.Core.ListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Copy``1(System.Collections.Generic.IList{``0},``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Copy``1(System.Collections.Generic.IList{``0},System.Array,System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small or multidimensional.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.EnsureIndexIsValid``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensures <paramref name="index"/> is in range of <paramref name="list"/> indexes.
            </summary>
            <param name="list">List to use the index range of.</param>
            <param name="index">Index value to check.</param>
            <exception cref="T:System.IndexOutOfRangeException">Specified index is not valid for the specified list.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.EnsureIndexIsValid(System.Collections.IList,System.Int32)">
            <summary>
            Ensures <paramref name="index"/> is in range of <paramref name="list"/> indexes.
            </summary>
            <param name="list">List to use the index range of.</param>
            <param name="index">Index value to check.</param>
            <exception cref="T:System.IndexOutOfRangeException">Specified index is not valid for the specified list.</exception>
        </member>
        <member name="T:Xtensive.Core.LockableExtensions">
            <summary>
            <see cref="T:Xtensive.Core.ILockable"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableExtensions.EnsureNotLocked(Xtensive.Core.ILockable)">
            <summary>
            Ensures <paramref name="lockable"/> is not locked (see <see cref="M:Xtensive.Core.ILockable.Lock"/>) yet.
            </summary>
            <param name="lockable">Lockable object to check.</param>
            <exception cref="T:Xtensive.Core.InstanceIsLockedException">Specified instance is locked.</exception>
        </member>
        <member name="T:Xtensive.Core.ParameterContextExtensions">
            <summary>
            Various extension methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ParameterContextExtensions.ActivateSafely(Xtensive.Core.ParameterContext)">
            <summary>
            Activates specified <see cref="T:Xtensive.Core.ParameterContext"/> if it is not null;
            otherwise does nothing.
            </summary>
            <param name="context">The context to activate.</param>
            <returns><see cref="T:Xtensive.Core.ParameterScope"/> if <paramref name="context"/> is not <see langword="null"/>;
            otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Xtensive.Core.ServiceContainerExtensions">
            <summary>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand``1(Xtensive.IoC.IServiceContainer)">
            <summary>
            Demands the specified service 
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get``1"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container to demand the service on.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand``1(Xtensive.IoC.IServiceContainer,System.String)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get``1(System.String)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container to demand the service on.</param>
            <param name="name">The service name.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand(Xtensive.IoC.IServiceContainer,System.Type)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get(System.Type)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <param name="container">The container to demand the service on.</param>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand(Xtensive.IoC.IServiceContainer,System.Type,System.String)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get(System.Type,System.String)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <param name="container">The container to demand the service on.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The service name.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.EnsureNotNull(System.Object,System.Type,System.String)">
            <exception cref="T:Xtensive.Core.ActivationException">Service is not available.</exception>
        </member>
        <member name="T:Xtensive.Core.StringBuilderExtensions">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendIndented(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Appends the specified <see cref="T:System.String"/> indented by specified count of spaces.
            </summary>
            <param name="builder">The builder to write indented string to.</param>
            <param name="indent">Count of spaces to indent.</param>
            <param name="value">The string value to write.</param>    
            <returns>
            A reference to the <paramref name="builder"/> after append operation has completed.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendIndented(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            Appends the specified <see cref="T:System.String"/> indented by specified count of spaces.
            </summary>
            <param name="builder">The builder to write indented string to.</param>
            <param name="indent">Count of spaces to indent.</param>
            <param name="value">The string value to write.</param>
            <param name="indentFirstLine">if set to <see langword="true"/> first line of string will be indented, otherwise not.</param>
            <returns>
            A reference to the <paramref name="builder"/> after append operation has completed.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendHexArray(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Appends the specified <see cref="T:System.Byte"/> array in hexidecimal representation.
            These bytes are written from left to right, high part of byte is written first.
            For example {1,2,10} will be appended as 01020A.
            </summary>
            <param name="builder">The builder.</param>
            <param name="values">The values.</param>
            <returns>Original <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Xtensive.Core.StringExtensions">
            <summary>
            <see cref="T:System.String"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutSuffix(System.String,System.String)">
            <summary>
            Cuts the specified <paramref name="suffix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="suffix">The suffix to cut.</param>
            <returns>String without <paramref name="suffix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutPrefix(System.String,System.String)">
            <summary>
            Cuts the specified <paramref name="prefix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="prefix">The prefix to cut.</param>
            <returns>String without <paramref name="prefix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string value.
            </summary>
            <param name="value">The value to indent.</param>
            <param name="indentSize">Size of the indent (in space characters).</param>
            <returns>Indented <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Indent(System.String,System.Int32,System.Boolean)">
            <summary>
            Indents the specified string value.
            </summary>
            <param name="value">The value to indent.</param>
            <param name="indentSize">Size of the indent (in space characters).</param>
            <param name="indentFirstLine">If set to <see langword="true"/>, first line must be indented;
            otherwise, <see langword="false"/>.</param>
            <returns>Indented <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.LessThan(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.LessThanOrEqual(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than or equals to <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than or equals to <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.GreaterThan(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is greater than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is greater than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.GreaterThanOrEqual(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)">
            <summary>
            Converts the <paramref name="source"/> to a separated string
            using "escape separator" syntax to encode inner separators in
            <paramref name="source"/> parts.
            </summary>
            <param name="source">The sequence of strings to join.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            Comma-separated string of all the items
            from <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleSplit(System.String,System.Char,System.Char)">
            <summary>
            Reverts the result of <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            The array of values that were previously joined
            by <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleSplitFirstAndTail(System.String,System.Char,System.Char)">
            <summary>
            Reverts the result of <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            The array of values that were previously joined
            by <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Escape(System.String,System.Char,System.Char[])">
            <summary>
            Escapes the specified source string.
            </summary>
            <param name="source">The source.</param>
            <param name="escape">The escape char.</param>
            <param name="escapedChars">Chars to escape.</param>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Unescape(System.String,System.Char)">
            <summary>
            Unescapes the specified source string.
            </summary>
            <param name="source">The source.</param>
            <param name="escape">The escape char.</param>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates all <paramref name="values"/> using specified <paramref name="separator"/>.
            This method aids with targeting .NET 3.5
            </summary>
            <param name="separator">Separator to use.</param>
            <param name="values">Values to join.</param>
            <returns>Joined value.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates all <paramref name="values"/> using specified <paramref name="separator"/>.
            This method aids with targeting .NET 3.5
            </summary>
            <param name="separator">Separator to use.</param>
            <param name="values">Values to join.</param>
            <returns>Joined value.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Like(System.String,System.String)">
            <summary>
            Compares <paramref name="value"/> with <paramref name="sqlLikePattern"/>
            </summary>
            <param name="value">Value to compare.</param>
            <param name="sqlLikePattern">SQL-Like pattern</param>
            <returns>
            <see langword="true" /> if <paramref name="value"/> fits the <paramref name="sqlLikePattern"/>; otherwise <see langword="false" />
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Like(System.String,System.String,System.Char)">
            <summary>
            Compares <paramref name="value"/> with <paramref name="sqlLikePattern"/>
            </summary>
            <param name="value">Value to compare.</param>
            <param name="sqlLikePattern">SQL-Like pattern</param>
            <param name="escapeCharacter">Character to escape special symbols like '%' or '_'</param>
            <returns>
            <see langword="true" /> if <paramref name="value"/> fits the <paramref name="sqlLikePattern"/>; otherwise <see langword="false" />
            </returns>
        </member>
        <member name="T:Xtensive.Core.HasVersion`2">
            <summary>
            A pair of <see cref="F:Xtensive.Core.HasVersion`2.Value"/> and its <see cref="F:Xtensive.Core.HasVersion`2.Version"/>.
            </summary>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of <see cref="F:Xtensive.Core.HasVersion`2.Value"/>.</typeparam>
            <typeparam name="TVersion">The <see cref="T:System.Type"/> of <see cref="F:Xtensive.Core.HasVersion`2.Version"/>.</typeparam>
        </member>
        <member name="F:Xtensive.Core.HasVersion`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.HasVersion`2.Version">
            <summary>
            The version bound to <see cref="F:Xtensive.Core.HasVersion`2.Value"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.Equals(Xtensive.Core.HasVersion{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.CompareTo(Xtensive.Core.HasVersion{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.op_Equality(Xtensive.Core.HasVersion{`0,`1},Xtensive.Core.HasVersion{`0,`1})">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.op_Inequality(Xtensive.Core.HasVersion{`0,`1},Xtensive.Core.HasVersion{`0,`1})">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="value">Initial <see cref="F:Xtensive.Core.HasVersion`2.Value"/> value.</param>
            <param name="version">Initial <see cref="F:Xtensive.Core.HasVersion`2.Version"/> value.</param>
        </member>
        <member name="T:Xtensive.Core.InheritableScope`2">
            <summary>
            Inheritable <see cref="T:Xtensive.Core.Scope`1"/> version.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TBaseAncestor">The type of the very base ancestor.</typeparam>
        </member>
        <member name="T:Xtensive.Core.Scope`1">
            <summary>
            Provides access to the thread-bound stack of contextual information 
            (<typeparamref name="TContext"/>).
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Activate(`0)">
            <summary>
            Initializes the scope.
            </summary>
            <param name="newContext">The new context.</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:Xtensive.Core.Scope`1.Context"/> is already initialized.</exception>
        </member>
        <member name="M:Xtensive.Core.Scope`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="service">The context of this scope.</param>
        </member>
        <member name="M:Xtensive.Core.Scope`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            Does not invoke <see cref="M:Xtensive.Core.Scope`1.Activate(`0)"/> method.
            </summary>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Dispose">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Current scope differs from this one.</exception>
        </member>
        <member name="P:Xtensive.Core.Scope`1.CurrentContext">
            <summary>
            Gets the current context of this type of scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.CurrentScope">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.Context">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.OuterScope">
            <summary>
            Gets the outer <see cref="T:Xtensive.Core.Scope`1"/> of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.IsNested">
            <summary>
            Gets a value indicating whether this scope is nested to another one.
            </summary>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#ctor">
            <inheritdoc/>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#cctor">
            <summary>
            Initializes this type.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IContextBound`1">
            <summary>
            Interface for all objects that are bound to some <see cref="P:Xtensive.Core.IContextBound`1.Context"/>
            instance.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="P:Xtensive.Core.IContextBound`1.Context">
            <summary>
            Gets <see cref="P:Xtensive.Core.IContextBound`1.Context"/> to which current instance is bound.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IHasExtensions">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IHasExtensions.Extensions"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasExtensions.Extensions">
            <summary>
            Gets the collection of extensions bound to the current instance.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IHasServices">
            <summary>
            Service provider contract.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IHasServices.GetService``1">
            <summary>
            Gets the service of the specified type <typeparamref name="T"/>.
            Returns <see langword="null" />, if there is no such service.
            </summary>
            <typeparam name="T">The type of the service to get.</typeparam>
            <returns>The service of specified type.</returns>
        </member>
        <member name="T:Xtensive.Core.IHasVersion">
            <summary>
            Allows to track changes in object by its <see cref="P:Xtensive.Core.IHasVersion.Version"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasVersion.Version">
            <summary>
            Gets object version.
            Object isn't changed, while its
            <c>oldVersion.Equals(newVersion)</c>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IHasVersion`1">
            <summary>
            Allows to track changes in object by its <see cref="P:Xtensive.Core.IHasVersion`1.Version"/>.
            </summary>
            <typeparam name="T">The type <see cref="P:Xtensive.Core.IHasVersion`1.Version"/> property.</typeparam>
        </member>
        <member name="P:Xtensive.Core.IHasVersion`1.Version">
            <summary>
            Gets object version.
            Object isn't changed, while its
            <c>oldVersion.Equals(newVersion)</c>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IIdentified`1">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IIdentified`1.Identifier"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IIdentified`1.Identifier">
            <summary>
            Gets object identifier.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IOperationSequence">
            <summary>
            General operation sequence contract.
            Allows to replay the operations contained in it later.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IOperationSequence.Replay(System.Object)">
            <summary>
            Replays the operations contained in sequence on <paramref name="target"/> object.
            </summary>
            <param name="target">The target object to replay the sequence at.</param>
            <returns>The result of execution.</returns>
        </member>
        <member name="P:Xtensive.Core.IOperationSequence.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
        </member>
        <member name="T:Xtensive.Core.JoiningDisposable">
            <summary>
            Disposes two <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.op_BitwiseAnd(Xtensive.Core.JoiningDisposable,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.JoiningDisposable"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.#ctor(System.IDisposable,System.IDisposable)">
            <summary>
              Initializes new instance of this type.
            </summary>
            <param name="disposable1">The first disposable.</param>
            <param name="disposable2">The second disposable.</param>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Core.JoiningDisposable.First">
            <summary>
            Gets the first object to dispose.
            </summary>
        </member>
        <member name="P:Xtensive.Core.JoiningDisposable.Second">
            <summary>
            Gets the second object to dispose.
            </summary>
        </member>
        <member name="T:Xtensive.Core.MatchType">
            <summary>
            Possible types of match to look for.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Pair`2">
            <summary>
            A pair of two values.
            </summary>
            <typeparam name="TFirst">The <see cref="T:System.Type"/> of first value.</typeparam>
            <typeparam name="TSecond">The <see cref="T:System.Type"/> of second value.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Pair`2.First">
            <summary>
            A first value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Pair`2.Second">
            <summary>
            A second value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Pair`2.Equals(Xtensive.Core.Pair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.CompareTo(Xtensive.Core.Pair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.op_Equality(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Pair`2.op_Inequality(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Pair`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">A first value in pair.</param>
            <param name="second">A second value in pair.</param>
        </member>
        <member name="T:Xtensive.Core.Pair`1">
            <summary>
            A pair of two values of the same type.
            </summary>
            <typeparam name="T">The type of both stored values.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Pair`1.First">
            <summary>
            The first value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Pair`1.Second">
            <summary>
            The second value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Pair`1.Equals(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.CompareTo(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.op_Equality(Xtensive.Core.Pair{`0},Xtensive.Core.Pair{`0})">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Pair`1.op_Inequality(Xtensive.Core.Pair{`0},Xtensive.Core.Pair{`0})">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Pair`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">The first value in the pair.</param>
            <param name="second">The second value in the pair.</param>
        </member>
        <member name="T:Xtensive.Core.Parameter">
            <summary>
            Parameter - an object identifying its value in active <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Parameter.IsExpectedValueSet">
            <summary>
            Indicates whether the property <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> is set.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Parameter.GetValue">
            <summary>
            Gets the value of the parameter.
            </summary>
            <returns>Parameter value.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="M:Xtensive.Core.Parameter.SetValue(System.Object)">
            <summary>
            Sets the value of the parameter.
            </summary>
            <param name="value">The new value.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>    
        </member>
        <member name="M:Xtensive.Core.Parameter.Clear">
            <summary>
            Clears parameter's value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Parameter.OnScopeDisposed(System.Object)">
            <summary>
            Called on leaving the scope.
            </summary>
            <param name="parameterScopeValue">The parameter scope value.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter.GetCurrentScope">
            <exception cref="T:System.Exception"><see cref="T:Xtensive.Core.ParameterContext"/> is required.</exception>
        </member>
        <member name="M:Xtensive.Core.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Parameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>    
        </member>
        <member name="P:Xtensive.Core.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="P:Xtensive.Core.Parameter.ExpectedValue">
            <summary>
            Gets the expected value of the parameter.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Parameter.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ParameterContext">
            <summary>
            Provides storing context-specific <see cref="T:Xtensive.Core.Parameter`1"/>'s values.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.EnsureIsRegular">
            <exception cref="T:System.InvalidOperationException">Context is <see cref="P:Xtensive.Core.ParameterContext.ExpectedValues"/> context.</exception>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ParameterContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>        
        </member>
        <member name="P:Xtensive.Core.ParameterContext.ExpectedValues">
            <summary>
            Gets the special singleton <see cref="T:Xtensive.Core.ParameterContext"/> instance 
            returning <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> instead of <see cref="P:Xtensive.Core.Parameter.Value"/> 
            if <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> is set.
            </summary>        
        </member>
        <member name="P:Xtensive.Core.ParameterContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.ParameterScope">
            <summary>
            <see cref="T:Xtensive.Core.ParameterContext"/> activation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.GetValue(Xtensive.Core.Parameter)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.#ctor(Xtensive.Core.ParameterContext)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="context">The context of this scope.</param>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Core.ParameterScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ParameterScope.Context">
            <summary>
            Gets the associated parameter context.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Parameter`1">
            <summary>
            Parameter - an object identifying its value in active <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>
            <typeparam name="TValue">The type of parameter value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.Action{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,System.Action{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,System.Action{`0},`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="P:Xtensive.Core.Parameter`1.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>    
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="T:Xtensive.Core.Predicate`2">
            <summary>
            A delegate returning boolean and accepting two arguments.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Segment`1">
            <summary>
            A definition of segment with boundaries of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of segment boundaries.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Segment`1.Offset">
            <summary>
            Segment offset.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Segment`1.Length">
            <summary>
            Segment length.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Segment`1.Equals(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.CompareTo(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.op_Addition(Xtensive.Core.Segment{`0},`0)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="segment">The segment.</param>
            <param name="offsetShift">The offset shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Core.Segment`1.op_Subtraction(Xtensive.Core.Segment{`0},`0)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="segment">The segment.</param>
            <param name="offsetShift">The offset shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Core.Segment`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.#ctor(`0,`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="offset">Segment offset.</param>
            <param name="length">Segment length.</param>
        </member>
        <member name="P:Xtensive.Core.Segment`1.EndOffset">
            <summary>
            Gets <see cref="F:Xtensive.Core.Segment`1.Offset"/>+<see cref="F:Xtensive.Core.Segment`1.Length"/> value.
            </summary>
        </member>
        <member name="T:Xtensive.Core.SimpleScope`1">
            <summary>
            Provides access to the thread-bound stack of contextual information
            (<typeparamref name="TVariator"/>).
            </summary>
            <typeparam name="TVariator">The type of the variator. Must be an internal type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance 
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.Dispose">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Scope can't be disposed.</exception>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.Current">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.Outer">
            <summary>
            Gets the outer <see cref="T:Xtensive.Core.Scope`1"/> of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.IsNested">
            <summary>
            Gets a value indicating whether this scope is nested to another one.
            </summary>
        </member>
        <member name="T:Xtensive.Core.SimpleXmlSerializer`1">
            <summary>
            Convenient wrapper for <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.SimpleXmlSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes value of <typeparamref name="T"/> from string.
            </summary>
            <param name="value">Serialized instance.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Xtensive.Core.SimpleXmlSerializer`1.Serialize(`0)">
            <summary>
            Serializes value of <typeparamref name="T"/> to string.
            </summary>
            <param name="value">Instance to serialize.</param>
            <returns>Serialized instance.</returns>
        </member>
        <member name="T:Xtensive.Core.ThreadSafeCached`1">
            <summary>
            A structure caching a single value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to cache.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue(System.Func{`0})">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <param name="generator">The value generator.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue``1(System.Func{``0,`0},``0)">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue``2(System.Func{``0,``1,`0},``0,``1)">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Equals(Xtensive.Core.ThreadSafeCached{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.CompareTo(Xtensive.Core.ThreadSafeCached{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Initialize(System.Object)">
            <summary>
            Initializes the cache. 
            This method should be invoked just once - before
            the first operation on this structure.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Core.ThreadSafeCached`1"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Core.ThreadSafeCached`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.Triplet`3">
            <summary>
            Container of three values.
            </summary>
            <typeparam name="TFirst"><see cref="T:System.Type"/> of the first value.</typeparam>
            <typeparam name="TSecond"><see cref="T:System.Type"/> of the second value.</typeparam>
            <typeparam name="TThird"><see cref="T:System.Type"/> of the third value.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.First">
            <summary>
            First value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.Second">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.Third">
            <summary>
            Third value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.Equals(Xtensive.Core.Triplet{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.CompareTo(Xtensive.Core.Triplet{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.op_Equality(Xtensive.Core.Triplet{`0,`1,`2},Xtensive.Core.Triplet{`0,`1,`2})">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.op_Inequality(Xtensive.Core.Triplet{`0,`1,`2},Xtensive.Core.Triplet{`0,`1,`2})">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">A first value in triplet.</param>
            <param name="second">A second value in triplet.</param>
            <param name="third">A third value in triplet.</param>
        </member>
        <member name="T:Xtensive.Core.Triplet`1">
            <summary>
            Container of three values.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the triplet values.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.First">
            <summary>
            First value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.Second">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.Third">
            <summary>
            Third value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.Equals(Xtensive.Core.Triplet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.CompareTo(Xtensive.Core.Triplet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.op_Equality(Xtensive.Core.Triplet{`0},Xtensive.Core.Triplet{`0})">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.op_Inequality(Xtensive.Core.Triplet{`0},Xtensive.Core.Triplet{`0})">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="first">A first value in triplet.</param>
            <param name="second">A second value in triplet.</param>
            <param name="third">A third value in triplet.</param>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DomainOptions">
            <summary>
            Possible options for <see cref="T:Xtensive.Orm.Domain"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainOptions.None">
            <summary>
            Empty option set.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainOptions.Default">
            <summary>
            Default option set (<see cref="F:Xtensive.Orm.Configuration.DomainOptions.None"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.LogElement">
            <summary>
            Log configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.LogElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.LogConfiguration"/>.
            </summary>
            <returns>Result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.LogElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.LogElement.Source">
            <summary>
            Gets or sets source or sources of log separated by comma.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.LogElement.Target">
            <summary>
            Gets or sets target of log (Console, DebufgOnlyConsole or file path).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.LoggingElement">
            <summary>
            Logging configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.LoggingElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.LoggingConfiguration"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.LoggingElement.Provider">
            <summary>
            Gets or sets external provider. Provider's name specified as assembly qualified name."
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.LoggingElement.Logs">
            <summary>
            Gets or sets collection of <see cref="T:Xtensive.Orm.Configuration.Elements.LogElement"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.LogConfiguration">
            <summary>
            Configuration of log. 
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LogConfiguration.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of this class
            </summary>
            <param name="source">Source or sources for new log. Sources must be separated by comma</param>
            <param name="target">Targer for new log</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LogConfiguration.Source">
            <summary>
            Gets or sets source or sources of log separated by comma.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LogConfiguration.Target">
            <summary>
            Gets or sets targer of log.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.LoggingConfiguration">
            <summary>
            Configuration of logging
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LoggingConfiguration.Load">
            <summary>
            Loads logging configuration from the default configuration section.
            </summary>
            <returns>Loaded configuration.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LoggingConfiguration.Load(System.String)">
            <summary>
            Loads logging configuration from the specified configuration section.
            </summary>
            <param name="sectionName">Name of configuration section.</param>
            <returns>Loaded configuration.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LoggingConfiguration.#ctor">
            <summary>
            Creates instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LoggingConfiguration.#ctor(System.String)">
            <summary>
            Creates instance of this class.
            </summary>
            <param name="provider">External provider for logging. Provider's name specified as assembly qualified name.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LoggingConfiguration.Provider">
            <summary>
            Gets or sets external provider. Provider's name specified as assembly qualified name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LoggingConfiguration.Logs">
            <summary>
            Gets or sets list of <see cref="T:Xtensive.Orm.Configuration.LogConfiguration"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.NameMappingCollection">
            <summary>
            Name mapping collection.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NameMappingCollection.Empty">
            <summary>
            Gets empty <see cref="T:Xtensive.Orm.Configuration.NameMappingCollection"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.Add(System.String,System.String)">
            <summary>
            Adds mapping between <paramref name="originalName"/>
            and <paramref name="mappedName"/>.
            </summary>
            <param name="originalName"></param>
            <param name="mappedName"></param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.Remove(System.String)">
            <summary>
            Removes mapping for <paramref name="originalName"/>.
            </summary>
            <param name="originalName"></param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.Apply(System.String)">
            <summary>
            Applies mapping to the specified <paramref name="name"/>.
            </summary>
            <param name="name">Mapped name for <paramref name="name"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.Clear">
            <summary>
            Removes all mappings.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.Clone">
            <summary>
            Creates clone of this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NameMappingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="items">Mappings to add to this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NameMappingCollection.Count">
            <summary>
            Gets number of elements in this collection.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.NodeConfiguration">
            <summary>
            Storage node configuration.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NodeConfiguration.Clone">
            <summary>
            Creates clone of this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NodeConfiguration.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NodeConfiguration.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.NodeId">
            <summary>
            Gets or sets node identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.UpgradeMode">
            <summary>
            Gets or sets <see cref="T:Xtensive.Orm.DomainUpgradeMode"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.ConnectionInfo">
            <summary>
            Gets or sets connection information.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.ConnectionInitializationSql">
            <summary>
            Gets or sets connection initialization SQL code.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.SchemaMapping">
            <summary>
            Gets schema mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NodeConfiguration.DatabaseMapping">
            <summary>
            Gets database mapping.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.SessionBound">
            <summary>
            Base class for any object that is bound to <see cref="P:Xtensive.Orm.SessionBound.Session"/> instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ISessionBound">
            <summary>
            Contract for all the objects that are bound to the <see cref="P:Xtensive.Orm.ISessionBound.Session"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ISessionBound.Session">
            <summary>
            Gets the session this instance is bound to.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SessionBound.EnsureTheSameSession(Xtensive.Orm.SessionBound)">
            <summary>
            Ensures <see cref="P:Xtensive.Orm.SessionBound.Session"/> of <paramref name="other"/> is the same 
            as <see cref="P:Xtensive.Orm.SessionBound.Session"/> of this instance.
            </summary>
            <param name="other">The <see cref="T:Xtensive.Orm.SessionBound"/> object to check the session of.</param>
            <exception cref="T:System.ArgumentException">Session of <paramref name="other"/>
            	<see cref="T:Xtensive.Orm.SessionBound"/> differs from this <see cref="P:Xtensive.Orm.SessionBound.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.SessionBound.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SessionBound.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class. 
            </summary>
            <param name="session"><see cref="T:Xtensive.Orm.Session"/>, to which current instance 
            is bound.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Orm.SessionBound.Session">
            <summary>
            Gets <see cref="P:Xtensive.Orm.SessionBound.Session"/> which current instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.DelayedTask.Status">
            <summary>
            Gets status of delayed task.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.DelayedTask`1">
            <summary>
            Represents delayed query task.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.RunSyncroniously">
            <summary>
            Runs task syncroniously.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.Wait">
            <summary>
            Wait for DelayedTask{<typeparamref name="TResult"/>} to complete execution.
            </summary>
            <exception cref="T:System.AggregateException">The exception was thrown during the execution of the task.</exception>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.Wait(System.Int32)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution within a specified number of milliseconds.
            </summary>
            
            <returns><see langword="true"/> if the delayed task completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.AggregateException">The exception was thrown during the execution of the task.</exception>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.Wait(System.TimeSpan)">
            <summary>
            Wait for DelayedTask{<typeparamref name="TResult"/>} to complete execution.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, 
            or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns><see langword="true"/> if the delayed task completed execution within the allotted time; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task"/> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.GetAwaiter">
            <summary>
            Gets awaiter for this delayed task.
            </summary>
            <returns>Returns awaiter.</returns>
        </member>
        <member name="M:Xtensive.Orm.DelayedTask`1.ToTask">
            <summary>
            Convert this instance to Task.
            </summary>
            <returns>Conversion result.</returns>
        </member>
        <member name="P:Xtensive.Orm.DelayedTask`1.Result">
            <summary>
            Gets result of task. If task not started yet, then task will started and wait until task finished.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.AddNewAsyncQuery(Xtensive.Orm.StateLifetimeToken,System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Registers information about new asynchronous query.
            </summary>
            <param name="lifetimeToken">Token to bound</param>
            <param name="task">Async query.</param>
            <param name="cancellationTokenSource">Cancellation token.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.TryRemoveFinishedAsyncQuery(Xtensive.Orm.StateLifetimeToken,System.Threading.Tasks.Task)">
            <summary>
            Removes information about asynchronous query which have already finished.
            </summary>
            <param name="lifetimeToken">Token the task bounds to.</param>
            <param name="task">Finished task.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.TryCancelAsyncQuery(Xtensive.Orm.StateLifetimeToken,System.Threading.Tasks.Task)">
            <summary>
            Try cancel specified <see cref="T:System.Threading.Tasks.Task"/> bounded to specified <see cref="!:stateLifetimeToken"/>.
            </summary>
            <param name="stateLifetimeToken">Token the task bounds to.</param>
            <param name="task">Task to cancel.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.TryCancelAllAsyncQueriesForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Sets cancellation tokens to canceled state for queries bounded to specified <see cref="T:Xtensive.Orm.StateLifetimeToken"/>.
            </summary>
            <param name="stateLifetimeToken">Token to search</param>
            <returns><see langword="true"/> if there is queries bounded <paramref name="stateLifetimeToken"/>, otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.TryCancelAllAsyncQueries">
            <summary>
            Sets all cancellation tokens to canceled and tries to cancel queries.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.HasAsyncQueries">
            <summary>
            Checks if manager has incompleted async queries.
            </summary>
            <returns><see langword="true"/> if manager has incomleted async queries bounded to, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.HasAsyncQueriesForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Checks if manager has incompleted async queries for specified <see cref="T:Xtensive.Orm.StateLifetimeToken"/>.
            </summary>
            <param name="stateLifetimeToken">Token to check.</param>
            <returns><see langword="true"/> if manager has incomleted async queries bounded to <paramref name="stateLifetimeToken"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.AddNewBlockingCommand(Xtensive.Orm.StateLifetimeToken,Xtensive.Orm.Providers.Command)">
            <summary>
            Register blocking command.
            </summary>
            <param name="token"><see cref="T:Xtensive.Orm.StateLifetimeToken"/> command bounds to.</param>
            <param name="command">Blocing command.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.DisposeBlockingCommands">
            <summary>
            Disposes all registered blocking commands.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.DisposeBlockingCommandForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Disposes all blocking commands which bounded to specified <see cref="T:Xtensive.Orm.StateLifetimeToken"/>.
            </summary>
            <param name="stateLifetimeToken">Token to search.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.HasBlockingCommandsForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Checks if manager has blocking commands for specified <see cref="T:Xtensive.Orm.StateLifetimeToken"/>.
            </summary>
            <param name="token">Token to check.</param>
            <returns><see langword="true"/> if manager has registered blocking command bounded to, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.HasBlockingCommands">
            <summary>
            Checks if manager has blocking commands.
            </summary>
            <returns><see langword="true"/> if manager has registered blocking command, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.ClearAsyncQueriesAndBlockingCommands">
            <summary>
            Clear list of async queries and blocking commands.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.AddNewDelayedTask(Xtensive.Orm.Internals.QueryTask,Xtensive.Orm.DelayedTask)">
            <summary>
            Register binding between <paramref name="delayedTask"/> and <paramref name="query"/>.
            </summary>
            <param name="query">Delayed query</param>
            <param name="delayedTask">Delayed task which created <paramref name="query"/></param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.SetDelayedTaskToStarted(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask})">
            <summary>
            Sets <see cref="T:Xtensive.Orm.DelayedTask"/> to started state for all <see cref="T:Xtensive.Orm.Internals.QueryTask"/>s from <paramref name="aliveQueries"/> which has bounded <see cref="T:Xtensive.Orm.DelayedTask"/> 
            and sets all died <see cref="T:Xtensive.Orm.DelayedTask"/>s to cancelled state.
            </summary>
            <param name="aliveQueries">Alive queries(i.e. which have alive <see cref="T:Xtensive.Orm.StateLifetimeToken"/>).</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.SetDelayedTasksToCompleted(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask})">
            <summary>
            Sets <see cref="T:Xtensive.Orm.DelayedTask"/> to completed state for all <see cref="T:Xtensive.Orm.Internals.QueryTask"/>s from <paramref name="queries"/> which has bounded <see cref="T:Xtensive.Orm.DelayedTask"/>.
            </summary>
            <param name="queries">Finished queries.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.AsyncQueriesManager.SetDelayedTasksToFault(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Exception)">
            <summary>
            Sets <see cref="T:Xtensive.Orm.DelayedTask"/> to completed with exception state for all <see cref="T:Xtensive.Orm.Internals.QueryTask"/>s from <paramref name="queries"/> which has bounded <see cref="T:Xtensive.Orm.DelayedTask"/>.
            </summary>
            <param name="queries"><see cref="T:Xtensive.Orm.Internals.QueryTask"/>s which finished with exception.</param>
            <param name="exception">Exception which <paramref name="queries"/> finished with.</param>
        </member>
        <member name="F:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.removedReferences">
            <summary>
            For removed references and added references:
            TKey is entity which referenced;
            TValue is dictionary of entities where TKey is referencing entity and TValue is count of references
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.HasReferenceFrom(Xtensive.Orm.EntityState,Xtensive.Orm.EntityState)">
            <summary>
            Checks that reference from <paramref name="entityStateForSearch"/> was removed.
            </summary>
            <param name="entityStateForSearch">State of entity for search.</param>
            <returns><see langword="false"/> if registry contains information about removed reference, otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.GetRemovedReferences(Xtensive.Orm.EntityState)">
            <summary>
            Gets all states which no longer referencing to <paramref name="target"/>.
            </summary>
            <param name="target">Referenced state</param>
            <returns>Read-only list of states which no longer referencing to <paramref name="target"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.GetAddedReferences(Xtensive.Orm.EntityState)">
            <summary>
            Gets all states which add reference to <paramref name="target"/>.
            </summary>
            <param name="target">Referenced state.</param>
            <returns>Read-only list of states which add reference to <paramref name="target"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.RegisterRemovedReference(Xtensive.Orm.EntityState,Xtensive.Orm.EntityState)">
            <summary>
            Registers removing of reference between <paramref name="referencedEntityState"/> and <paramref name="referencedEntityState"/>.
            </summary>
            <param name="referencedEntityState">Referenced <see cref="T:Xtensive.Orm.EntityState"/>.</param>
            <param name="noLongerReferncingEntityState"><see cref="T:Xtensive.Orm.EntityState"/> which no longer referencing to <paramref name="referencedEntityState"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.RegisterAddedReference(Xtensive.Orm.EntityState,Xtensive.Orm.EntityState)">
            <summary>
            Registers addition of reference between <paramref name="referencedEntityState"/> and <paramref name="referencedEntityState"/>.
            </summary>
            <param name="referencedEntityState">Referenced <see cref="T:Xtensive.Orm.EntityState"/>.</param>
            <param name="newReferencingEntity">Referencing <see cref="T:Xtensive.Orm.EntityState"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.Clear">
            <summary>
            Clears registry.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.RemovedReferencesCount">
            <summary>
            Gets count of removed references in registry.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntityReferenceChangesRegistry.AddedReferencesCount">
            <summary>
            Gets count of added references in registry.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.KeyRemapper.Remap(Xtensive.Orm.Internals.EntityChangeRegistry)">
            <summary>
            Remap temporary (local) keys to real (will be saved to storage) keys.
            </summary>
            <param name="registry">Registry that contains changed <see cref="T:Xtensive.Orm.EntityState">states of entity.</see></param>
            <returns>Mapping temporary keys to real keys.</returns>
        </member>
        <member name="T:Xtensive.Orm.Internals.ReferenceFieldChangeInfo">
            <summary>
            Contains information about change of reference field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.ReferenceFieldChangeInfo.FieldOwner">
            <summary>
            Gets key of entity that owns the <see cref="P:Xtensive.Orm.Internals.ReferenceFieldChangeInfo.Field"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.ReferenceFieldChangeInfo.FieldValue">
            <summary>
            Gets value of field which was set.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.ReferenceFieldChangeInfo.Field">
            <summary>
            Gets field which was set.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.ReferenceFieldChangeInfo.AuxiliaryEntity">
            <summary>
            Auxiliary entity which associated with <see cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.ReferenceFieldsChangesRegistry">
            <summary>
            Registrates information about changed reference fields.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.ReferenceFieldsChangesRegistry.Register(Xtensive.Orm.Key,Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Registrates information about field which value was set.
            </summary>
            <param name="fieldOwner">Key of entity which field was set.</param>
            <param name="fieldValue">Value of field.</param>
            <param name="field">Field which value was set./</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.ReferenceFieldsChangesRegistry.Register(Xtensive.Orm.Key,Xtensive.Orm.Key,Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Registrates information about field which value was set.
            </summary>
            <param name="fieldOwner">Key of entity which field was set.</param>
            <param name="fieldValue">Value of field.</param>
            <param name="auxiliaryEntity">Key of auxiliary entity which associated with <see cref="T:Xtensive.Orm.EntitySet`1"/> field.</param>
            <param name="field">Field which value was set.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.ReferenceFieldsChangesRegistry.GetItems">
            <summary>
            Gets all registered items.
            </summary>
            <returns>All registered items.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.ReferenceFieldsChangesRegistry.Clear">
            <summary>
            Removes all registered items.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.EntitySetChangeRegistry">
            <summary>
            Contains <see cref="T:Xtensive.Orm.Internals.EntitySetState"/>s which modified during the bounded session.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetChangeRegistry.Register(Xtensive.Orm.Internals.EntitySetState)">
            <summary>
            Register the specified <see cref="T:Xtensive.Orm.Internals.EntitySetState"/>.
            </summary>
            <param name="entitySetState"><see cref="T:Xtensive.Orm.Internals.EntitySetState"/> to bound.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetChangeRegistry.GetItems">
            <summary>
            Gets all registered items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetChangeRegistry.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session"><see cref="T:Xtensive.Orm.Session"/>, to which current instance 
            is bound.</param>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetChangeRegistry.Count">
            <summary>
            Count of registered <see cref="T:Xtensive.Orm.Internals.EntitySetState"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.RemapContext.RegisterKeyMap(Xtensive.Orm.Key,Xtensive.Orm.Key)">
            <summary>
            Registers map from <paramref name="localKey"/> to <paramref name="realKey"/>.
            </summary>
            <param name="localKey">Temporary key</param>
            <param name="realKey">Actual key</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.RemapContext.TryRemapKey(Xtensive.Orm.Key)">
            <summary>
            Finds actual key for local key.
            </summary>
            <param name="oldKey">Local key</param>
            <returns>Real key</returns>
        </member>
        <member name="P:Xtensive.Orm.Internals.RemapContext.KeyMapping">
            <summary>
            Gets maps from local key to actual(storage) key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.RemapContext.EntitiesToRemap">
            <summary>
            Gets entities which need to be remap.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Logging.BaseLog">
            <summary>
            Base log.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.IsLogged(Xtensive.Orm.Logging.LogLevel)">
            <summary>
            Checks if specified <see cref="T:Xtensive.Orm.Logging.LogLevel"/> is processed by current instance.
            </summary>
            <param name="level"><see cref="T:System.LogLevel"/> to check.</param>
            <returns>true if current instance supports specified <see cref="T:Xtensive.Orm.Logging.LogLevel"/>, otherwise false.</returns>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.DebugRegion(System.String,System.Object[])">
            <summary>
            Creates region. Within the region, all messages are indented.
            </summary>
            <param name="message">Message, which writes to beginning of region and end of region.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <returns><see cref="T:System.IDisposable"/> object. Region will closed by disposing of this object.</returns>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.InfoRegion(System.String,System.Object[])">
            <summary>
            Creates region. Within the region, all messages are indented.
            </summary>
            <param name="message">Message, which writes to beginning of region and end of region.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <returns><see cref="T:System.IDisposable"/> object. Region will closed by disposing of this object.</returns>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.Debug(System.String,System.Object[],System.Exception)">
            <summary>
            Writes debug message.
            </summary>
            <param name="message">Message to write to.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <param name="exception">Exception, which must be written.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.Info(System.String,System.Object[],System.Exception)">
            <summary>
            Writes information message.
            </summary>
            <param name="message">Message to write to.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <param name="exception">Exception, which must be written.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.Warning(System.String,System.Object[],System.Exception)">
            <summary>
            Writes warning message.
            </summary>
            <param name="message">Message to write to.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <param name="exception">Exception, which must be written.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.Error(System.String,System.Object[],System.Exception)">
            <summary>
            Writes error message.
            </summary>
            <param name="message">Message to write to.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <param name="exception">Exception, which must be written.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.FatalError(System.String,System.Object[],System.Exception)">
            <summary>
            Writes fatal error message.
            </summary>
            <param name="message">Message to write to.</param>
            <param name="parameters">Values of parameters in <paramref name="message"/>.</param>
            <param name="exception">Exception, which must be written.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.Write(Xtensive.Orm.Logging.LogEventInfo)">
            <summary>
            Writes log message.
            </summary>
            <param name="info">Log event information.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.#ctor">
            <summary>
            Creates instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.BaseLog.#ctor(System.String)">
            <summary>
            Creates instance of this class.
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="P:Xtensive.Orm.Logging.BaseLog.Name">
            <summary>
            Gets name of this log.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Logging.IndentManager">
            <summary>
            Log indentation manager.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.IndentManager.IncreaseIndent(System.Action)">
            <summary>
            Increases indentation for current thread.
            </summary>
            <returns>Indentation scope.</returns>
        </member>
        <member name="P:Xtensive.Orm.Logging.IndentManager.CurrentIdent">
            <summary>
            Gets indentation for current thread.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.ConsoleWriter.Write(Xtensive.Orm.Logging.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Logging.DebugOnlyConsoleWriter.Write(Xtensive.Orm.Logging.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Logging.DebugOnlyConsoleWriter.#ctor">
            <summary>
            Creates instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.FileWriter.Write(Xtensive.Orm.Logging.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Logging.FileWriter.#ctor(System.String)">
            <summary>
            Creates instance of this class.
            </summary>
            <param name="filename">Name of file to write to.</param>
        </member>
        <member name="T:Xtensive.Orm.Logging.LogProvider">
            <summary>
            Parent class for providers of logs. 
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogProvider.GetLog(System.String)">
            <summary>
            Gets log by name.
            </summary>
            <param name="logName">Name of log.</param>
            <returns>Founded log or default.</returns>
        </member>
        <member name="T:Xtensive.Orm.Logging.LogEventInfo">
            <summary>
            Represent information to write to target of log.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogEventInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogEventInfo.#ctor(System.String,Xtensive.Orm.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">Event source.</param>
            <param name="level">Event level.</param>
            <param name="message">Log message.</param>
            <param name="parameters">Format parameters for log message.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="P:Xtensive.Orm.Logging.LogEventInfo.Source">
            <summary>
            Gets source of this event.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Logging.LogEventInfo.Level">
            <summary>
            Gets log level for this event.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Logging.LogEventInfo.FormattedMessage">
            <summary>
            Gets log message for this event.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Logging.LogEventInfo.Exception">
            <summary>
            Gets exception for this event.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Logging.LogLevel">
            <summary>
            Represents different levels of logs.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Logging.LogManager">
            <summary>
            Manager class, which gives logs.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogManager.Initialize">
            <summary>
            Initialaze manager by creation logs from default section of configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogManager.Initialize(Xtensive.Orm.Logging.LogProvider)">
            <summary>
            Initialaze manager by privider.
            </summary>
            <param name="logProvider">Instance of class, which implements <see cref="T:Xtensive.Orm.Logging.LogProvider"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogManager.Initialize(Xtensive.Orm.Configuration.LoggingConfiguration)">
            <summary>
            Initialaze manager by <see cref="T:Xtensive.Orm.Configuration.LoggingConfiguration"/> instance.
            </summary>
            <param name="configuration">Configuration of logging.</param>
        </member>
        <member name="M:Xtensive.Orm.Logging.LogManager.GetLog(System.String)">
            <summary>
            Gets log by name.
            </summary>
            <param name="logName">Name of log.</param>
            <returns>Founded log or default.</returns>
        </member>
        <member name="P:Xtensive.Orm.Logging.LogManager.Default">
            <summary>
            Gets default <see cref="T:Xtensive.Orm.Logging.LogManager"/> instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeIdRegistry">
            <summary>
            Dual-mapping between type identifiers and <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIdRegistry.Contains(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Checks if specified <paramref name="type"/> is registered.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if <paramref name="type"/> is registered,
            otherwise false.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIdRegistry.GetTypeId(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Gets type identifier for the specified <paramref name="type"/>.
            Unlike <see cref="P:Xtensive.Orm.Model.TypeIdRegistry.Item(Xtensive.Orm.Model.TypeInfo)"/>
            this method does not throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            if <paramref name="type"/> is not registered.
            </summary>
            <param name="type">Type to get type identifier for.</param>
            <returns>Type identifier for <paramref name="type"/> if it is registered,
            otherwise <see cref="F:Xtensive.Orm.Model.TypeInfo.NoTypeId"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIdRegistry.Clear">
            <summary>
            Resets all mapping information.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIdRegistry.Register(System.Int32,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Registers mapping between <paramref name="typeId"/>
            and <paramref name="type"/>.
            </summary>
            <param name="typeId">Type identifier.</param>
            <param name="type">Type.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIdRegistry.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIdRegistry.Types">
            <summary>
            Gets collection of registered types.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIdRegistry.TypeIdentifiers">
            <summary>
            Gets collection of registered type identifiers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIdRegistry.Item(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Gets type identifier for the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type to get type identifier for.</param>
            <returns>Type identifier for the specified <paramref name="type"/>.</returns>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIdRegistry.Item(System.Int32)">
            <summary>
            Gets type for the specified <paramref name="typeId"/>.
            </summary>
            <param name="typeId">Type identifier to get type for.</param>
            <returns>Type for the specified <paramref name="typeId"/>.</returns>
        </member>
        <member name="T:Xtensive.Orm.Session">
            <summary>
            <c>DataContext</c> analogue maintaining database connection
            and entity cache (identity map in the simplest case).
            </summary>
            <remarks>
            <para>
            Each session maintains its own connection to the database and 
            caches a set of materialized persistent instates.
            </para>
            <para>
            <c>Session</c> implements <see cref="T:Xtensive.Core.IContext"/> interface, that means each <c>Session</c>
            can be either active or not active in a particular thread (see <see cref="P:Xtensive.Orm.Session.IsActive"/> property).
            Each thread can contain only one active session in each point of time, such session 
            can be a accessed via <see cref="P:Xtensive.Orm.Session.Current">Session.Current</see> property 
            or <see cref="M:Xtensive.Orm.Session.Demand">Session.Demand()</see> method.
            </para>
            <para>
            Sessions are opened (and, optionally, activated) by 
            <see cref="M:Xtensive.Orm.Domain.OpenSession">Domain.OpenSession()</see> method. 
            Existing session can be activated by <see cref="M:Xtensive.Orm.Session.Activate"/> method.
            </para>
            </remarks>
            <example>
            <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Session sample"></code>
            </example>
            <seealso cref="T:Xtensive.Orm.Domain"/>
            <seealso cref="T:Xtensive.Orm.SessionBound"/>
        </member>
        <member name="T:Xtensive.Orm.DomainBound">
            <summary>
            Base class for all objects that are bound to the <see cref="P:Xtensive.Orm.DomainBound.Domain"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DomainBound.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DomainBound.#ctor(Xtensive.Orm.Domain)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="domain"><see cref="T:Xtensive.Orm.Domain"/>, to which current instance 
            is bound.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domain"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Orm.DomainBound.Domain">
            <summary>
            Gets <see cref="P:Xtensive.Orm.DomainBound.Domain"/> to which current instance is bound.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.DomainBound.Xtensive#Core#IContextBound{Xtensive#Orm#Domain}#Context">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.IVersionSetProvider">
            <summary>
            <see cref="T:Xtensive.Orm.VersionSet"/> provider contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IVersionSetProvider.CreateVersionSet(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
            <summary>
            Creates <see cref="T:Xtensive.Orm.VersionSet"/> set containing versions
            for specified <paramref name="keys"/>.
            </summary>
            <param name="keys">The keys to create version set for.</param>
            <returns><see cref="T:Xtensive.Orm.VersionSet"/> containing versions
            for specified <paramref name="keys"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.RemoveFinishedAsyncQuery(System.Threading.Tasks.Task)">
            <summary>
            Unbounds information about completed asynchronous query from current <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="task">Completed task.</param>
        </member>
        <member name="M:Xtensive.Orm.Session.AddNewAsyncQuery(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Bounds information about incompleted token to current <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="task"></param>
            <param name="cancellationTokenSource"></param>
        </member>
        <member name="M:Xtensive.Orm.Session.CancelAllAsyncQueriesForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Cancels all incompleted asynchronous queries for specified <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="token"><see cref="T:Xtensive.Orm.StateLifetimeToken"/></param>
        </member>
        <member name="M:Xtensive.Orm.Session.AddNewBlockingCommand(Xtensive.Orm.Providers.Command)">
            <summary>
            Adds new blocking command for current <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="command">Blocking command</param>
        </member>
        <member name="M:Xtensive.Orm.Session.DisposeBlockingCommandsForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Disposes all registered blocking commands for specified <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="token"><see cref="T:Xtensive.Orm.StateLifetimeToken">Lifetime token</see> to register.</param>
        </member>
        <member name="M:Xtensive.Orm.Session.HasIncompletedAsyncQueries">
            <summary>
            Checks existance of incompleted asynchronous queries for specified <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <returns>Returns <see langword="true"/> if there is incompleted asyncronous queries, otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.HasIncompletedAsyncQueriesForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Checks existance of incompleted asynchronous queries for specified <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="token"><see cref="T:Xtensive.Orm.StateLifetimeToken">Lifetime token to check.</see></param>
            <returns>Returns <see langword="true"/> if there is incompleted asyncronous queries, otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.HasBlockingQueries">
            <summary>
            Checks existance of blocking readers of results of asynchronous queries.
            </summary>
            <returns>Returns <see langword="true"/> if there are blocking commands, otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.HasBlockingCommandsForToken(Xtensive.Orm.StateLifetimeToken)">
            <summary>
            Checks existance of blocking commands of results of asynchronous queries for specified <see cref="T:Xtensive.Orm.StateLifetimeToken">lifetime token</see>.
            </summary>
            <param name="token"><see cref="T:Xtensive.Orm.StateLifetimeToken">Lifetime token to check.</see></param>
            <returns>Returns <see langword="true"/> if there are blocking commands, otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.NotifyChanged">
            <summary>
            Raises events on all <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> subscribers stating that
            all entities and collections are changed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Session.NotifyChanged(Xtensive.Orm.NotifyChangedOptions)">
            <summary>
            Raises events on all <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> subscribers stating that
            all entities and collections are changed.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Xtensive.Orm.Session.OverrideQueryRoot(Xtensive.Orm.IQueryRootBuilder)">
            <summary>
            Overrides current query root builder (i.e. builder of <see cref="M:Xtensive.Orm.QueryEndpoint.All``1"/> expression).
            After this method is called <see cref="P:Xtensive.Orm.Session.Query"/> is changed to a new <see cref="T:Xtensive.Orm.QueryEndpoint"/>
            that utilizes specified <paramref name="queryRootBuilder"/>.
            </summary>
            <param name="queryRootBuilder"><see cref="T:Xtensive.Orm.IQueryRootBuilder"/> to use.</param>
            <returns><see cref="T:System.IDisposable"/> implementor
            that reverts <see cref="T:Xtensive.Orm.IQueryRootBuilder"/> to original
            once <see cref="M:System.IDisposable.Dispose"/> is called.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenTransaction">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenTransaction(System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenTransaction(Xtensive.Orm.TransactionOpenMode)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenTransaction(Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="mode">The mode.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenAutoTransaction">
            <summary>
            Opens the automatic transaction, or does nothing.
            </summary>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.OpenAutoTransaction(System.Transactions.IsolationLevel)">
            <summary>
            Opens the automatic transaction, or does nothing.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.EnsureIsolationLevelCompatibility(System.Transactions.IsolationLevel,System.Transactions.IsolationLevel)">
            <exception cref="T:System.InvalidOperationException">Can't create a transaction
            with requested isolation level.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Session"/>, 
            or throws <see cref="T:System.InvalidOperationException"/>, 
            if active <see cref="T:Xtensive.Orm.Session"/> is not found.
            </summary>
            <returns>Current session.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Session.Current"/> <see cref="T:Xtensive.Orm.Session"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Session.Activate(System.Boolean)">
            <summary>
            Activates the session.
            See <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching"/> for more detailed explanation
            of purpose of this method.
            </summary>
            <param name="checkSwitching">If set to <see langword="true"/>, 
            <see cref="T:System.InvalidOperationException"/> is thrown if another session is active, and
            either this or active session does not have <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching"/> flag.</param>
            <returns>A disposable object reverting the action.</returns>
            <exception cref="T:System.InvalidOperationException">Session switching is detected.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.Deactivate">
            <summary>
            Deactivates <see cref="P:Xtensive.Orm.Session.Current"/> session making it equal to <see langword="null"/>.
            See <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching"/> for more detailed explanation
            of purpose of this method.
            </summary>
            <returns>A disposable object reverting the action.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Session.Xtensive#Orm#IVersionSetProvider#CreateVersionSet(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Session.SelectStorageNode(System.String)">
            <summary>
            Selects storage node identifier by <paramref name="nodeId"/>.
            </summary>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:Xtensive.Orm.Session.OverrideCommandTimeout(System.Nullable{System.Int32})">
            <summary>
            Temporary overrides <see cref="P:Xtensive.Orm.Session.CommandTimeout"/>.
            </summary>
            <param name="newTimeout">New <see cref="P:Xtensive.Orm.Session.CommandTimeout"/> value.</param>
            <returns>Command timeout overriding scope.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.Remove``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified set of entities.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entities">The entities.</param>
            <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny"/> on-remove action.
            </exception>
        </member>
        <member name="M:Xtensive.Orm.Session.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Session.Validate">
            <summary>
            Validates all instances registered in <see cref="P:Xtensive.Orm.Session.ValidationContext"/>
            of current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Session.ValidateAndGetErrors">
            <summary>
            Validates all registered entities similar to <see cref="M:Xtensive.Orm.Session.Validate"/> method
            and returns all validation exceptions.
            </summary>
            <returns>List exceptions occured during validation.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.UpdateStateInCache(Xtensive.Orm.Key,Xtensive.Tuples.Tuple,System.Boolean)">
            <exception cref="T:System.InvalidOperationException">
            Attempt to associate non-null <paramref name="tuple"/> with <paramref name="key"/> of unknown type.
            </exception>
        </member>
        <member name="M:Xtensive.Orm.Session.Persist">
            <summary>
            Saves all modified instances immediately to the database.
            Obsolete, use <see cref="M:Xtensive.Orm.Session.SaveChanges"/> method instead.
            </summary>
            <remarks>
            <para>
            This method should be called to ensure that all delayed
            updates are flushed to the storage.
            </para>
            <para>
            For session with auto saving (with <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoSaveChanges"/> this method is called automatically when it's necessary,
            e.g. before beginning, committing and rolling back a transaction, performing a
            query and so further. So generally you should not worry
            about calling this method.
            </para>
            <para>
            For session without auto saving (without <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoSaveChanges"/> option) you should call this method manually.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.SaveChanges">
            <summary>
            Saves all modified instances immediately to the database.
            </summary>
            <remarks>
            <para>
            This method should be called to ensure that all delayed
            updates are flushed to the storage.
            </para>
            <para>
            For session with auto saving (with <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoSaveChanges"/> this method is called automatically when it's necessary,
            e.g. before beginning, committing and rolling back a transaction, performing a
            query and so further. So generally you should not worry
            about calling this method.
            </para>
            <para>
            For session without auto saving (without <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoSaveChanges"/> option) you should call this method manually.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.CancelChanges">
            <summary>
            Cancels all changes and resets modified entities to their original state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
            <exception cref="T:System.NotSupportedException">Unable to cancel changes for non-disconnected session. Use transaction boundaries to control the state.</exception>
        </member>
        <member name="M:Xtensive.Orm.Session.DisableSaveChanges(Xtensive.Orm.IEntity)">
            <summary>
            Temporarily disables all save changes operations (both explicit ant automatic) 
            for specified <paramref name="target"/>.
            Such entity is prevented from being persisted to the database,
            when <see cref="M:Xtensive.Orm.Session.SaveChanges"/> is called or query is executed.
            If persist is to be performed due to starting a nested transaction or committing a transaction,
            the presence of such an entity will lead to failure.
            If <paramref name="target"/> is not present in the database,
            all entities that reference <paramref name="target"/> are also pinned automatically.
            </summary>
            <param name="target">The entity to disable persisting.</param>
            <returns>A special object that controls lifetime of such behavior if <paramref name="target"/> was not previously processed by the method,
            otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Session.DisableSaveChanges">
            <summary>
            Temporarily disables only automatic save changes operations before queries, etc.
            Explicit call of <see cref="M:Xtensive.Orm.Session.SaveChanges"/> will lead to flush changes anyway.
            If save changes is to be performed due to starting a nested transaction or committing a transaction,
            active disabling save changes scope will lead to failure.
            <returns>A special object that controls lifetime of such behavior if there is no active scope,
            otherwise <see langword="null"/>.</returns>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Session.userDefinedQueryTasks">
            <summary>
            Uses only for queries which defined by Future/Delayed api
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Session.internalQueryTasks">
            <summary>
            Uses for internal query tasks like fetching, validation of versions and some others
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = Domain.OpenSession()) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation"/> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options"/>, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate"/>.
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,System.Boolean)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <param name="activate">Determines whether created session should be activated or not.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = domain.OpenSession(false)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation"/> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options"/>, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate"/>.
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionType)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType"/>.
            </summary>
            <param name="domain">The domain.</param>    
            <param name="type">The type of session.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = domain.OpenSession(sessionType)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation"/> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options"/>, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate"/>.
            }
            </code></sample>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionType,System.Boolean)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType"/>.
            </summary>
            <param name="domain">The domain.</param>    
            <param name="type">The type of session.</param>
            <param name="activate">Determines whether created session should be activated or not.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (domain.OpenSession(sessionType, true)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code></sample>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionConfiguration)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <param name="configuration">The session configuration.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = domain.OpenSession(configuration)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation"/> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options"/>, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate"/>.
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionConfiguration,System.Boolean)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <param name="configuration">The session configuration.</param>
            <param name="activate">Determines whether created session should be activated or not.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (domain.OpenSession(sessionConfiguration, false)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="P:Xtensive.Orm.Session.Events">
            <summary>
            Gets access point to all <see cref="T:Xtensive.Orm.Session"/>-related events.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.SystemEvents">
            <summary>
            Gets access point to all system <see cref="T:Xtensive.Orm.Session"/>-related events.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.EntityEvents">
            <summary>
            The manager of <see cref="T:Xtensive.Orm.Entity"/>'s events.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Query">
            <summary>
            Single access point allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key"/>s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.SystemQuery">
            <summary>
            <see cref="T:Xtensive.Orm.QueryEndpoint"/> that always uses default <see cref="T:Xtensive.Orm.IQueryRootBuilder"/>
            ignoring any calls to <see cref="M:Xtensive.Orm.Session.OverrideQueryRoot(Xtensive.Orm.IQueryRootBuilder)"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Transaction">
            <summary>
            Gets the active transaction.
            </summary>    
        </member>
        <member name="P:Xtensive.Orm.Session.Configuration">
            <summary>
            Gets the configuration of the <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Name">
            <summary>
            Gets the name of the <see cref="T:Xtensive.Orm.Session"/>
            (useful mainly for debugging purposes - e.g. it is used in logs).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.IsDebugEventLoggingEnabled">
            <summary>
            Indicates whether debug event logging is enabled.
            Caches <see cref="M:Xtensive.Orm.Logging.BaseLog.IsLogged(Xtensive.Orm.Logging.LogLevel)"/> method result for <see cref="F:Xtensive.Orm.Logging.LogLevel.Debug"/> event.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.IsPersisting">
            <summary>
            Gets a value indicating whether <see cref="M:Xtensive.Orm.Session.SaveChanges"/> method is running.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.IsDisconnected">
            <summary>
            Gets a value indicating whether session is disconnected:
            session supports non-transactional entity states and does not support autosaving of changes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.LazyKeyGenerationIsEnabled">
            <summary>
            Indicates whether lazy generation of keys is enabled.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Operations">
            <summary>
            Gets the operations registry of this <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.CommandTimeout">
            <summary>
            Gets or sets timeout for all <see cref="T:System.Data.IDbCommand"/>s that
            are executed within this session.
            <seealso cref="P:System.Data.IDbCommand.CommandTimeout"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.ConnectionInfo">
            <summary>
            Gets or sets <see cref="P:Xtensive.Orm.Session.ConnectionInfo"/>
            for this <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.StorageNodeId">
            <summary>
            Gets current storage node identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.StorageNode">
            <summary>
            Gets current storage node.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Resolver">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Orm.Session.Current"/> session resolver to use
            when there is no active <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <remarks>
            The setter of this property can be invoked just once per application lifetime; 
            assigned resolver can not be changed.
            </remarks>
            <exception cref="T:System.NotSupportedException">Resolver is already assigned.</exception>
        </member>
        <member name="P:Xtensive.Orm.Session.Services">
            <summary>
            Gets the session service provider.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.Current">
            <summary>
            Gets the current active <see cref="T:Xtensive.Orm.Session"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Session.IsActive">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Session.Extensions">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Session.ValidationContext">
            <summary>
            Gets the current validation context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Can not get validation context: There is no active transaction.</exception>
        </member>
        <member name="P:Xtensive.Orm.Session.IsSystemLogicOnly">
            <summary>
            Gets a value indicating whether only a system logic is enabled.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StorageNodeManager">
            <summary>
            Storage node manager.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.StorageNodeManager.AddNode(Xtensive.Orm.Configuration.NodeConfiguration)">
            <summary>
            Adds node with the specified <paramref name="configuration"/>
            and performs required upgrade actions.
            </summary>
            <param name="configuration">Node configuration.</param>
        </member>
        <member name="M:Xtensive.Orm.StorageNodeManager.RemoveNode(System.String)">
            <summary>
            Removes node with specified <paramref name="nodeId"/>.
            </summary>
            <param name="nodeId">Node identifier.</param>
            <returns>True if node was removed, otherwise false.</returns>
        </member>
        <member name="M:Xtensive.Orm.StorageNodeManager.GetNode(System.String)">
            <summary>
            Gets node with the specified <paramref name="nodeId"/>
            </summary>
            <param name="nodeId">Node identifier.</param>
            <returns><see cref="T:Xtensive.Orm.StorageNode"/> with the specified <paramref name="nodeId"/> if found,
            otherwise null.</returns>
        </member>
        <member name="T:Xtensive.Orm.Providers.CompilationService">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> compilation service.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StorageNode">
            <summary>
            Storage node.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageNode.Id">
            <summary>
            Gets node identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageNode.Configuration">
            <summary>
            Gets node configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageNode.Mapping">
            <summary>
            Gets model mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageNode.TypeIdRegistry">
            <summary>
            Gets type identifier registry.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StateLifetimeToken">
            <summary>
            State lifetime token for transactional objects.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StateLifetimeToken.IsActive">
            <summary>
            Gets value indicating whenever this token is active.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.ServiceAttribute">
            <summary>
            An attribute describing mapping of service implementation to service.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Type">
            <summary>
            Gets or sets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Singleton">
            <summary>
            Gets or sets a value indicating whether this service is singleton.
            Default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Default">
            <summary>
            Gets or sets a value indicating whether this is default service implementation or not.
            Default value is <see langword="false" />.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.ServiceConstructorAttribute">
            <summary>
            An attribute tagging default service constructor to use.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ConfigurationSection">
            <summary>
            A root element of diagnostics configuration section within a configuration file.
            </summary>
        </member>
        <member name="F:Xtensive.IoC.Configuration.ConfigurationSection.DefaultSectionName">
            <summary>
            Gets default section name for IoC configuration.
            Value is "Xtensive.IoC".
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ConfigurationSection.Containers">
            <summary>
            Gets the collection of container configurations.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ContainerElement">
            <summary>
            IoC container configuration element.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Name">
            <summary>
            Gets or sets the name of the container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Type">
            <summary>
            Gets or sets the type of the container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Parent">
            <summary>
            Gets or sets the name of the parent container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Explicit">
            <summary>
            Gets the collection of service configurations.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Auto">
            <summary>
            Gets the automatic .
            </summary>
            <value>The types.</value>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ServiceRegistrationElement">
            <summary>
            Service mapping configuration element.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.Configuration.ServiceRegistrationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.IoC.ServiceRegistration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Type">
            <summary>
            Gets or sets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.MapTo">
            <summary>
            Gets or sets the type to map the service to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Singleton">
            <summary>
            Indicates whether instance of service is container-level singleton or not.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.IServiceContainer">
            <summary>
            Inversion of control container contract.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.GetAll``1">
            <summary>
            Gets all the instances of type <typeparamref name="TService"/>
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
            A sequence of all the requested instances.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.GetAll(System.Type)">
            <summary>
            Gets all the instances of type <paramref name="serviceType"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            A sequence of all the requested instances.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get``1">
            <summary>
            Gets the instance of <typeparamref name="TService"/> type
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get``1(System.String)">
            <summary>
            Gets the instance of <typeparamref name="TService"/> type
            identified by the specified <paramref name="name"/>
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The identifier of the service to get.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get(System.Type)">
            <summary>
            Gets the instance of <paramref name="serviceType"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get(System.Type,System.String)">
            <summary>
            Gets the instance of <paramref name="serviceType"/>
            identified by the specified <paramref name="name"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The identifier of the service to get.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="P:Xtensive.IoC.IServiceContainer.Parent">
            <summary>
            Gets the parent service container.
            Parent service container usually resolves services that 
            can't be resolved by the current container.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.ServiceContainerBase">
            <summary>
            Abstract base class for <see cref="T:Xtensive.IoC.IServiceContainer"/>
            implementation.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetAll``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetAll(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get``1(System.String)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetService(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type,System.String)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetService``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.HandleGetAll(System.Type)">
            <summary>
            Actual implementation of <see cref="M:Xtensive.IoC.ServiceContainerBase.GetAll(System.Type)"/> method.
            </summary>
            <param name="serviceType">Type of the services to get.</param>
            <returns>The sequence of requested services.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.HandleGet(System.Type,System.String)">
            <summary>
            Actual implementation of <see cref="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type,System.String)"/> method.
            </summary>
            <param name="serviceType">Type of the service to get.</param>
            <param name="name">The name of the service. <see langword="null"/>, if name is not specified.</param>
            <returns>The requested service.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.FormatActivationErrorMessage(System.Exception,System.Type)">
            <summary>
            Formats the activation error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>Formatted error message.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.FormatActivationErrorMessage(System.Exception,System.Type,System.String)">
            <summary>
            Formats the activation error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The service name.</param>
            <returns>Formatted error message.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.#ctor(Xtensive.IoC.IServiceContainer)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="parent"><see cref="P:Xtensive.IoC.ServiceContainerBase.Parent"/> property value.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Dispose">
            <summary>
            Releases resources associated with this instance.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceContainerBase.Parent">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.IoC.ServiceContainer">
            <summary>
            Default IoC (inversion of control) container implementation.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.HandleGet(System.Type,System.String)">
            <inheritdoc/>
            <exception cref="T:System.Reflection.AmbiguousMatchException">Multiple services match to the specified arguments.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.HandleGetAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.CreateInstance(Xtensive.IoC.ServiceRegistration)">
            <summary>
            Creates the service instance for the specified <paramref name="serviceInfo"/>.
            </summary>
            <param name="serviceInfo">The service info.</param>
            <returns>Specified service instance.</returns>
            <exception cref="T:Xtensive.Core.ActivationException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            and with the specified <see cref="P:Xtensive.IoC.IServiceContainer.Parent"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="parent">The parent container.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,System.Object)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            with specified <paramref name="configuration"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="configuration">The container's configuration.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,System.Object,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            with the specified <see cref="P:Xtensive.IoC.IServiceContainer.Parent"/>
            and <paramref name="configuration"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="configuration">The container's configuration.</param>
            <param name="parent">The parent container.</param>
            <returns>Created service container.</returns>
            <exception cref="T:System.ArgumentException">Wrong container type.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by default configuration.
            </summary>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the default configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.String)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="name">The name of container configuration to create container for.</param>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.String,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="name">The name of container configuration to create container for.</param>
            <param name="parent">The parent container.</param>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(Xtensive.IoC.Configuration.ConfigurationSection,System.String)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="section">IoC configuration section.</param>
            <param name="name">The name of container configuration to create container for.</param>
            <returns>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(Xtensive.IoC.Configuration.ConfigurationSection,System.String,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="section">IoC configuration section.</param>
            <param name="name">The name of container configuration to create container for.</param>
            <param name="parent">The parent container.</param>
            <returns>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor(System.Collections.Generic.IEnumerable{Xtensive.IoC.ServiceRegistration})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor(System.Collections.Generic.IEnumerable{Xtensive.IoC.ServiceRegistration},Xtensive.IoC.IServiceContainer)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="parent">The parent container.</param>
        </member>
        <member name="T:Xtensive.IoC.ServiceRegistration">
            <summary>
            Describes single service mapping entry for <see cref="T:Xtensive.IoC.ServiceContainer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.CreateAll(System.Type)">
            <summary>
            Creates an array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects
            for the specified <paramref name="type"/>
            by scanning it <see cref="T:Xtensive.IoC.ServiceAttribute"/>s.
            </summary>
            <param name="type">The type to provide <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects for.</param>
            <returns>
            An array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.CreateAll(System.Type,System.Boolean)">
            <summary>
            Creates an array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects
            for the specified <paramref name="type"/>
            by scanning it <see cref="T:Xtensive.IoC.ServiceAttribute"/>s.
            </summary>
            <param name="type">The type to provide <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects for.</param>
            <param name="defaultOnly">Return just registrations for which 
            <see cref="P:Xtensive.IoC.ServiceAttribute.Default"/>==<see langword="true"/>.</param>
            <returns>
            An array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="mappedInstance">The instance it is mapped to.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.String,System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
            <param name="mappedInstance">The instance it is mapped to.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="mappedType">The type it is mapped to.</param>
            <param name="singleton">A value indicating whether this service is singleton.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
            <param name="mappedType">The type it is mapped to.</param>
            <param name="singleton">A value indicating whether this service is singleton.</param>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Type">
            <summary>
            Gets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.MappedType">
            <summary>
            Gets the type it is mapped to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.MappedInstance">
            <summary>
            Gets the instance it is mapped to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Singleton">
            <summary>
            Gets a value indicating whether this service is singleton.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ConstantExtractor">
            <summary>
            An <see cref="T:Xtensive.Linq.ExpressionVisitor"/> specialized for extracting constants from specified <see cref="T:System.Linq.Expressions.Expression"/>.
            This class can be used to produce "normalized" expression with all constants extracted to additional parameter.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionVisitor">
            <summary>
            An abstract base implementation of <see cref="T:Xtensive.Linq.ExpressionVisitor`1"/>
            returning <see cref="T:System.Linq.Expressions.Expression"/> as its visit result.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionVisitor`1">
            <summary>
            Abstract <see cref="T:System.Linq.Expressions.Expression"/> visitor class.
            </summary>
            <typeparam name="TResult">Type of the visit result.</typeparam>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="e">The expression to visit.</param>
            <returns>Visit result.</returns>
            <remarks>
            <see cref="P:Xtensive.Linq.ExpressionVisitor`1.IsCaching"/> policy is enforced by this method.
            </remarks>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="expressions">The expression list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitUnknown(System.Linq.Expressions.Expression)">
            <summary>
            Visits the unknown expression.
            </summary>
            <param name="e">The unknown expression.</param>
            <returns>Visit result.</returns>
            <exception cref="T:System.NotSupportedException">Thrown by the base implementation of this method, 
            if unknown expression isn't recognized by its overrides.</exception>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary expression.
            </summary>
            <param name="u">The unary expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary expression.
            </summary>
            <param name="b">The binary expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the "type is" expression.
            </summary>
            <param name="tb">The "type is" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant expression.
            </summary>
            <param name="c">The constant expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional expression.
            </summary>
            <param name="c">The conditional expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter expression.
            </summary>
            <param name="p">The parameter expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access expression.
            </summary>
            <param name="m">The member access expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call expression.
            </summary>
            <param name="mc">The method call expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda expression.
            </summary>
            <param name="l">The lambda expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the "new" expression.
            </summary>
            <param name="n">The "new" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member initialization expression.
            </summary>
            <param name="mi">The member initialization expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list initialization expression.
            </summary>
            <param name="li">The list initialization expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the "new array" expression.
            </summary>
            <param name="na">The "new array" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation expression.
            </summary>
            <param name="i">The invocation expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.#ctor(System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="isCaching">Indicates whether visit result 
            should be cached and resolved by cache when possible.</param>
        </member>
        <member name="P:Xtensive.Linq.ExpressionVisitor`1.IsCaching">
            <summary>
            Gets a value indicating whether this visitor is caching.
            When visitor is caching, visit result 
            is cached and resolved by internal cache.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer expression.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original element initializer list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment expression.
            </summary>
            <param name="ma">The member assignment expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the member binding.
            </summary>
            <param name="binding">The member binding.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The member member binding.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original binding list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.#ctor(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.GetConstants">
            <summary>
            Gets an array of extracted constants.
            </summary>
            <value></value>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.Process">
            <summary>
            Extracts constants from <see cref="T:System.Linq.Expressions.LambdaExpression"/> specified in constructor.
            Result is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> with one additional parameter (array of objects).
            Extra parameter is added to first position.
            </summary>
            <returns><see cref="T:System.Linq.Expressions.LambdaExpression"/> with all constants extracted to additional parameter.</returns>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="lambda">An expression to process.</param>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.#ctor(System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.ConstantExpression,System.Boolean})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="lambda">An expression to process.</param>
            <param name="constantFilter">The constant filter.
            This delegate invoked on each occurrence of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            If it returns <see langword="true"/>, constant is extracted, otherwise left untouched.
            </param>
        </member>
        <member name="T:Xtensive.Linq.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.MakeTupleAccess(System.Linq.Expressions.Expression,System.Type,System.Int32)">
            <summary>
             Makes <see cref="M:Xtensive.Tuples.Tuple.GetValueOrDefault``1(System.Int32)"/> method call.
            </summary>
            <param name="target">Target expression.</param>
            <param name="accessorType">Type of accessor.</param>
            <param name="index">Tuple field index.</param>
            <returns><see cref="T:System.Linq.Expressions.MethodCallExpression"/></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.MakeIsNullCondition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Makes <c>IsNull</c> condition expression.
            </summary>
            <param name="target">Target expression</param>
            <param name="ifNull">Result expression if <paramref name="target"/> is <see langword="null"/>.</param>
            <param name="ifNotNull">Result expression if <paramref name="target"/> is not <see langword="null"/>.</param>
            <returns><see cref="T:System.Linq.Expressions.ConditionalExpression"/></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.LiftToNullable(System.Linq.Expressions.Expression)">
            <summary>
            Converts expression type to nullable type (for value types).
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.ToExpressionTree(System.Linq.Expressions.Expression)">
            <summary>
            Converts specified <see cref="T:System.Linq.Expressions.Expression"/> to <see cref="T:Xtensive.Linq.ExpressionTree"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>Expression tree that wraps <paramref name="expression"/>.</returns>
        </member>
        <member name="T:Xtensive.Linq.ExpressionReplacer">
            <summary>
            Replaces references to one specific instance of an expression node with another node
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.ReplaceAll(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            Replaces all specified expressions.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">Expressions search for.</param>
            <param name="replaceWith">Expressions replace with.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Linq.ExpressionTree">
            <summary>
            A wrapper for <see cref="T:System.Linq.Expressions.Expression"/>.
            that can be used for comparing expression trees and calculating their hash codes.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.ToExpression">
            <summary>
            Gets the underlying <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(Xtensive.Linq.ExpressionTree)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.op_Equality(Xtensive.Linq.ExpressionTree,Xtensive.Linq.ExpressionTree)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.op_Inequality(Xtensive.Linq.ExpressionTree,Xtensive.Linq.ExpressionTree)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Compares specified <see cref="T:System.Linq.Expressions.Expression"/>s by value.
            </summary>
            <param name="left">First expression to compare.</param>
            <param name="right">Second expression to compare.</param>
            <returns>true, if <paramref name="left"/> and <paramref name="right"/>
            are equal by value, otherwise false.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
            Calculates hash code by value for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">Expression to calculate hash code for.</param>
            <returns>Hash code for <paramref name="expression"/>.</returns>
        </member>
        <member name="T:Xtensive.Linq.ExpressionWriter">
            <summary>
            Writes out an expression tree in a C#-ish syntax.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            Writes the expression to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="expression">The expression to write.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.Linq.Expressions.Expression)">
            <summary>
            Writes the expression to string.
            </summary>
            <param name="expression">The expression to write.</param>
            <returns>The string containing written expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.WriteLine(Xtensive.Linq.ExpressionWriter.IndentType)">
            <summary>
            Writes the line break.
            </summary>
            <param name="indentType">Type of the indent to use for the further lines.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.WriteArguments(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.String)">
            <summary>
            Writes the list of arguments.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="arguments">The arguments.</param>
            <param name="suffix">The suffix.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.ChangeIndent(Xtensive.Linq.ExpressionWriter.IndentType)">
            <summary>
            Changes the indent.
            </summary>
            <param name="indentType">New type of the indent.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the C# operator for the specified expression type.
            </summary>
            <param name="type">The type of expression to get the operator for.</param>
            <returns>The C# operator.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type.
            </summary>
            <param name="type">The type to get the name for.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="indentSize">Size of the indent to use.</param>
        </member>
        <member name="P:Xtensive.Linq.ExpressionWriter.Writer">
            <summary>
            Gets the writer used by the instance.
            </summary>
        </member>
        <member name="P:Xtensive.Linq.ExpressionWriter.IndentSize">
            <summary>
            Gets the size of the indent.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionWriter.IndentType">
            <summary>
            Enumerates possible indent types.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Same">
            <summary>
            The same indent must be used.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Inner">
            <summary>
            Indent must be 1-unit smaller then before.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Outer">
            <summary>
            Indent must be 1-unit larger then before.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.FastExpression">
            <summary>
            Factory methods for various descendants of <see cref="T:System.Linq.Expressions.Expression"/> that are faster 
            than original ones.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="delegateType">A type that represents a delegate type.</param>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>.
            </summary>
            <param name="delegateType">A type that represents a delegate type.</param>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionComparer.VisitMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member init.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Linq.QueryableMethodKind">
            <summary>
            Enumerates supported <see cref="T:System.Linq.IQueryable`1"/> methods.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.QueryableVisitor">
            <summary>
            Abstract base visitor that handles methods of <see cref="T:System.Linq.IQueryable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> by calling <see cref="M:Xtensive.Linq.QueryableVisitor.VisitQueryableMethod(System.Linq.Expressions.MethodCallExpression,Xtensive.Linq.QueryableMethodKind)"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.VisitQueryableMethod(System.Linq.Expressions.MethodCallExpression,Xtensive.Linq.QueryableMethodKind)">
            <summary>
            Visits method of <see cref="T:System.Linq.IQueryable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="mc">The method call expression.</param>
            <param name="methodKind">Kind of the method.</param>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.GetQueryableMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Parses <see cref="T:Xtensive.Linq.QueryableMethodKind"/> for the specified expression.
            </summary>
            <param name="call">A call to process.</param>
            <returns><see cref="T:Xtensive.Linq.QueryableMethodKind"/> for the specified expression,
            or null if method is not a LINQ method.</returns>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableExpression.NodeType">
            <summary>
            <see cref="P:System.Linq.Expressions.Expression.NodeType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableExpression.Type">
            <summary>
            <see cref="P:System.Linq.Expressions.Expression.Type"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.IsLiftedToNull">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Left">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Right">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.Test">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.IfTrue">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.IfFalse">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableConstantExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConstantExpression.Value">
            <summary>
            <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableElementInit">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableElementInit.AddMethod">
            <summary>
            <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableElementInit.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.ElementInit.Arguments"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression.Body">
            <summary>
            <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression.Parameters">
            <summary>
            <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression.NewExpression">
            <summary>
            <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression.Initializers">
            <summary>
            <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberAssignment">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberAssignment"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberBinding"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding.BindingType">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding.Member">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberBinding.Member"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberAssignment.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression.Member">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberExpression.Member"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression.NewExpression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression.Bindings">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberListBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberListBinding.Initializers">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberMemberBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberMemberBinding.Bindings">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Object">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableNewArrayExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewArrayExpression.Expressions">
            <summary>
            <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableNewExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Arguments"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Constructor">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Constructor"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Members">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Members"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableParameterExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableParameterExpression.Name">
            <summary>
            <see cref="P:System.Linq.Expressions.ParameterExpression.Name"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression.TypeOperand">
            <summary>
            <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression.Operand">
            <summary>
            <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionHandler">
            <summary>
            An abstract base class for any <see cref="T:Xtensive.Modelling.Actions.IActionHandler"/> implementor.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.IActionHandler">
            <summary>
            Action handler contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandler.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandler.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionHandlerScope">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/> activation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandlerScope.#ctor(Xtensive.Modelling.Actions.ActionHandler)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandlerScope.CurrentHandler">
            <summary>
            Gets the current <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandlerScope.Handler">
            <summary>
            Gets the associated <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionScope">
            <summary>
            Defines the scope for the single action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.Commit">
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Actions.ActionScope.Action"/> is not initialized.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.IsCommitted">
            <summary>
            Gets or sets a value indicating whether this instance is committed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.IsCommittable">
            <summary>
            Gets a value indicating whether this scope is committable (i.e. its 
            <see cref="P:Xtensive.Modelling.Actions.ActionScope.Action"/> will be added to <see cref="P:Xtensive.Modelling.Actions.ActionScope.Sequence"/> after
            <see cref="M:Xtensive.Modelling.Actions.ActionScope.Commit"/> and <see cref="M:Xtensive.Modelling.Actions.ActionScope.Dispose"/> calls).
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.Sequence">
            <summary>
            Gets the sequence this instance is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.Action">
            <summary>
            Gets or sets the action this instance commits.
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="M:Xtensive.Modelling.Actions.ActionScope.Commit"/> method is already called.</exception>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionSequence">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> sequence implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.IActionSequence">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> sequence contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.LogAction">
            <summary>
            Appends a new action to this sequence.
            </summary>
            <returns>An <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to append it.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Add(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Adds the specified action to the sequence.
            </summary>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Add(System.Collections.Generic.IEnumerable{Xtensive.Modelling.Actions.NodeAction})">
            <summary>
            Adds the specified action sequence to the sequence.
            </summary>
            <param name="actions">The sequence of actions to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Apply(Xtensive.Modelling.IModel)">
            <summary>
            Applies all the actions from the sequence to specified model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Flatten">
            <summary>
            Flattens all the <see cref="T:Xtensive.Modelling.Actions.GroupingNodeAction"/>s from this instance.
            </summary>
            <returns>Flattened action sequence.</returns>
        </member>
        <member name="P:Xtensive.Modelling.Actions.IActionSequence.CurrentScope">
            <summary>
            Gets the current action scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.LogAction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Add(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Add(System.Collections.Generic.IEnumerable{Xtensive.Modelling.Actions.NodeAction})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Apply(Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Flatten">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionSequence.CurrentScope">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Actions.CreateNodeAction">
            <summary>
            Describes node creation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.NodeAction">
            <summary>
            Abstract base class for any node action.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.INodeAction">
            <summary>
            Node action contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.INodeAction.Execute(Xtensive.Modelling.IModel)">
            <summary>
            Applies the action to the specified model.
            </summary>
            <param name="model">The model to apply the action to.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.INodeAction.Path">
            <summary>
            Gets or sets the path of the node this action is applied to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.INodeAction.Difference">
            <summary>
            Gets or sets the difference this action is created for.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.Execute(Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <summary>
            Actually executed <see cref="M:Xtensive.Modelling.Actions.NodeAction.Execute(Xtensive.Modelling.IModel)"/> method call.
            </summary>
            <param name="model">The model.</param>
            <param name="item"><see cref="P:Xtensive.Modelling.Actions.NodeAction.Path"/> resolution result.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.EscapeName(System.String)">
            <summary>
            Escapes the name in path.
            </summary>
            <param name="name">The name to escape.</param>
            <returns>Escaped name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetActionName">
            <summary>
            Gets the name of the action for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting.
            </summary>
            <returns>The name of the action.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <summary>
            Gets the parameters for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting.
            </summary>
            <returns>The sequence of parameters.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetNestedActions">
            <summary>
            Gets the sequence of nested actions for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting, if any.
            </summary>
            <returns>The sequence of nested actions.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NodeAction.Path">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NodeAction.Difference">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.TryConstructor(Xtensive.Modelling.IModel,System.Object[])">
            <summary>
            Tries to invoke node constructor with the specified set of arguments.
            </summary>
            <param name="model">The model to pass as the first argument.</param>
            <param name="arguments">The other arguments.</param>
            <returns>Created node, if the constructor was successfully bound;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Type">
            <summary>
            Gets or sets the node type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Name">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Index">
            <summary>
            Gets or sets the node index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.DataAction">
            <summary>
            Change data action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.DataAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.DataAction.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.DataAction.DataHint">
            <summary>
            Gets or sets the data hint described data operation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.GroupingNodeAction">
            <summary>
            A grouping node action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Add(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Adds the specified action to the <see cref="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions"/> sequence.
            </summary>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Flatten">
            <summary>
            Flattens all the <see cref="T:Xtensive.Modelling.Actions.GroupingNodeAction"/>s from <see cref="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions"/> sequence.
            </summary>
            <returns>Flattened sequence of nested actions.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.GetNestedActions">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.GroupingNodeAction.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions">
            <summary>
            Gets the list of nested actions.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.MoveNodeAction">
            <summary>
            Any kinds of node movement (parent changed, name changed or index changed).
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.MoveNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.MoveNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Parent">
            <summary>
            Gets or sets the node parent path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Name">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Index">
            <summary>
            Gets or sets the node index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.NewPath">
            <summary>
            Gets or sets the new node path.
            </summary>
            <value>The new path.</value>
        </member>
        <member name="T:Xtensive.Modelling.Actions.NullActionHandler">
            <summary>
            An <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/> that does nothing.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NullActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NullActionHandler.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.PathNodeReference">
            <summary>
            Path node reference.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Get(System.Object)">
            <summary>
            Gets the <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> to the specified source,
            if the source is <see cref="T:Xtensive.Modelling.IPathNode"/>;
            otherwise, returns <paramref name="source"/>.
            </summary>
            <param name="source">The source.</param>
            <returns><see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> to the specified source,
            if the source is <see cref="T:Xtensive.Modelling.IPathNode"/>;
            otherwise, returns <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Resolve(Xtensive.Modelling.IModel,System.Object)">
            <summary>
            Resolves the specified object (possibly <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/>).
            Reverts the effect of <see cref="M:Xtensive.Modelling.Actions.PathNodeReference.Get(System.Object)"/> method.
            </summary>
            <param name="model">The model.</param>
            <param name="source">The object to resolve.</param>
            <returns>Either original object, or
            resolved <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> (<see cref="T:Xtensive.Modelling.IPathNode"/>)</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Equals(Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.op_Equality(Xtensive.Modelling.Actions.PathNodeReference,Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.op_Inequality(Xtensive.Modelling.Actions.PathNodeReference,Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="path">The <see cref="P:Xtensive.Modelling.Actions.PathNodeReference.Path"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.PathNodeReference.Path">
            <summary>
            Gets the path to the node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.PropertyChangeAction">
            <summary>
            Property change action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.PropertyChangeAction.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.RemoveNodeAction">
            <summary>
            Describes node removal.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.RemoveNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.DataDependentAttribute">
            <summary>
            Data dependent node marker.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.PropertyAttribute">
            <summary>
            Node property marker.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.Priority">
            <summary>
            Gets or sets the comparison \ modification priority.
            The lower priority the less dependent property is.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IgnoreInComparison">
            <summary>
            Gets or sets a value indicating whether underlying property must be ignored in comparison.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.CaseInsensitiveComparison">
            <summary>
            Gets or sets a value indicating whether property values are compared case insensitively.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IsImmutable">
            <summary>
            Gets or sets a value indicating whether underlying property value must be re-created
            rather than created &amp; processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IsVolatile">
            <summary>
            Gets or sets a value indicating whether underlying property must be 
            ignored during recreation of parent atomic property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.RecreateParent">
            <summary>
            Gets or sets a value indicating whether property owner should be recreated on property value change.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.DependencyRootType">
            <summary>
            Gets or sets the dependency root type.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.SystemPropertyAttribute">
            <summary>
            System property marker.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Attributes.SystemPropertyAttribute.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.CloningContext">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> cloning context.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.AddFixup(System.Action)">
            <summary>
            Adds the new fixup to fixups sequence.
            </summary>
            <param name="fixup">The fixup to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.ClearFixups">
            <summary>
            Clears all the fixups.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.ApplyFixups">
            <summary>
            Applies all the fixups.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.Fixups">
            <summary>
            Gets all the added fixups.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.Current">
            <summary>
            Gets the current validation context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.CloningScope">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> cloning scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.Open">
            <summary>
            Opens a cloning context and scope.
            </summary>
            <returns>A new <see cref="T:Xtensive.Modelling.CloningScope"/>, if there is no 
            <see cref="P:Xtensive.Modelling.CloningContext.Current"/> cloning context;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.#ctor(Xtensive.Modelling.CloningContext)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.CloningScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningScope.Context">
            <summary>
            Gets the associated cloning context.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Comparer">
            <summary>
            Implementation of <see cref="T:Xtensive.Modelling.Comparison.IComparer"/> for <see cref="T:Xtensive.Modelling.Node"/> comparison.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IComparer">
            <summary>
            Compares two models.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IComparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <summary>
            Gets the difference between <paramref name="source"/> 
            and <paramref name="target"/> models.
            </summary>
            <param name="source">The source model.</param>
            <param name="target">The target model.</param>
            <param name="hints">The comparison hints.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> models;
            <see langword="null" />, if none.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IComparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <summary>
            Gets the difference between <paramref name="source"/> 
            and <paramref name="target"/> models.
            </summary>
            <param name="source">The source model.</param>
            <param name="target">The target model.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> models;
            <see langword="null" />, if none.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Visit(System.Object,System.Object)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Visit(System.Type,System.Object,System.Object)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitNode(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            Visits specified <see cref="T:Xtensive.Modelling.Node"/> objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            Difference between <paramref name="source"/>
            and <paramref name="target"/> objects.
            <see langword="null"/>, if they're equal.
            </returns>
            <exception cref="T:System.InvalidOperationException">Both source and target are <see langword="null"/>.</exception>
            <exception cref="T:System.NullReferenceException">Current difference is not <see cref="T:Xtensive.Modelling.Comparison.NodeDifference"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.BuildMovementInfo(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            Builds the <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> by specific source and target nodes.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Movement info.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.CompareProperties(Xtensive.Modelling.Node,Xtensive.Modelling.Node,Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Compares source and target node properties.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetReferencedPropertyDifference(System.Object,System.Object,Xtensive.Modelling.Node,System.String)">
            <summary>
            Gets the referenced property difference.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetValue">The target value.</param>
            <param name="target">The target.</param>
            <param name="property">The property.</param>
            <returns>Difference.</returns>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetPropertyDifferences(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Gets the property differences for each property of type <see cref="T:Xtensive.Modelling.Node"/> or <see cref="T:Xtensive.Modelling.NodeCollection"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>Property differences set.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitNodeCollection(Xtensive.Modelling.NodeCollection,Xtensive.Modelling.NodeCollection)">
            <summary>
            Visits specified <see cref="T:Xtensive.Modelling.NodeCollection"/> objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null"/>, if they're equal.</returns>
            <exception cref="T:System.InvalidOperationException">Both source and target are <see langword="null"/>.</exception>
            <exception cref="T:System.NullReferenceException">Current difference is not <see cref="T:Xtensive.Modelling.Comparison.NodeCollectionDifference"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitObject(System.Object,System.Object)">
            <summary>
            Visits specified objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsReference(System.Object,System.Object)">
            <summary>
            Determines whether the specified source is reference.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            <see langword="true"/> if the specified source is reference; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsRelocated(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Determines whether the specified difference is relocated.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
             <see langword="true"/> if the specified difference is relocated; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasChangedNodeProperties(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Determines whether difference contains node property 
            with <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> equals to <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if difference contains changed node properties; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasChanges(Xtensive.Modelling.Comparison.Difference,System.Boolean,System.Boolean)">
            <summary>
            Determines whether difference contains node property 
            with <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> equals to <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
            <param name="difference">The difference.</param>
            <param name="isDataDependent"></param>
            <param name="propertyOwnerIsImmutable"></param>
            <returns>
            <see langword="true"/> if difference contains changed node properties; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsDependOnData(Xtensive.Modelling.Node)">
            <summary>
            Determines whether specified node is depend on data changing.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <see langword="true"/> if node is depend on data changing; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsImmutable(Xtensive.Modelling.Node)">
            <summary>
            Determines whether specified node is immutable.
            </summary>
            <returns><see langword="true"/> if the specified node is immutable; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetNodeComparisonKey(Xtensive.Modelling.Node)">
            <summary>
            Extracts the comparison key, that used to find associations 
            between old and new <see cref="T:Xtensive.Modelling.NodeCollection"/> items.
            </summary>
            <param name="node">The node to get the comparison key for.</param>
            <returns>Comparison key for the specified node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasDependencies(Xtensive.Modelling.Node)">
            <summary>
            Determines whether the specified node has dependencies 
            and must be removed on <see cref="F:Xtensive.Modelling.Comparison.UpgradeStage.Cleanup"/>.
            </summary>
            <param name="source">The source node.</param>
            <returns>
            <see langword="true"/> if the specified source has dependencies; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasDataChangeHint(Xtensive.Modelling.Node)">
            <summary>
            Determines whether <see cref="P:Xtensive.Modelling.Comparison.Comparer.Hints"/> contains data change hints.
            </summary>
            <param name="source">The source node.</param>
            <returns>
            <see langword="true"/> if data change hints exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsIgnored(System.Object)">
            <summary>
            Determines whether the specified value must be ignored in comparison.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if the specified value must be ignored; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.TryActivate``1(``0,``0,System.Func{``0,``0,Xtensive.Modelling.Comparison.Difference})">
            <summary>
            Tries to create the new <see cref="T:Xtensive.Modelling.Comparison.ComparisonContext"/> 
            for the specified <paramref name="source"/>
            and <paramref name="target"/> objects and activate it.
            </summary>
            <typeparam name="T">The type of <paramref name="source"/> and <paramref name="target"/> objects.</typeparam>
            <param name="source">The source object to compare.</param>
            <param name="target">The target object to compare.</param>
            <param name="differenceGenerator">The difference generator.</param>
            <returns>A disposable object deactivating the context, if it was activated;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.CreateContext">
            <summary>
            Creates new comparison context.
            </summary>
            <returns>Newly created <see cref="T:Xtensive.Modelling.Comparison.ComparisonContext"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetTargetPath(Xtensive.Modelling.Node)">
            <summary>
            Gets the path of the target node.
            </summary>
            <param name="source">The source node.</param>
            <returns>The path of the target node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetTargetName(Xtensive.Modelling.Node)">
            <summary>
            Gets the name of the target node.
            </summary>
            <param name="source">The source node.</param>
            <returns>The name of the target node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetCommonBase(System.Object,System.Object)">
            <summary>
            Gets the highest common base type.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The highest common base type.</returns>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Current">
            <summary>
            Gets the current comparer.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Context">
            <summary>
            Gets the current comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Source">
            <summary>
            Gets the source model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Target">
            <summary>
            Gets the target model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Hints">
            <summary>
            Gets the comparison hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Results">
            <summary>
            Gets the dictionary of all already found differences of objects
            from <see cref="P:Xtensive.Modelling.Comparison.Comparer.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.Comparer.Target"/> models.
            Maps objects from both <see cref="P:Xtensive.Modelling.Comparison.Comparer.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.Comparer.Target"/>
            to their <see cref="T:Xtensive.Modelling.Comparison.Difference"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Stage">
            <summary>
            Gets the current comparison stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ComparisonContext">
            <summary>
            Holds current state of the <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Comparer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.GetParentDifferenceContext``1">
            <summary>
            Gets the nearest <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.ParentDifferenceContext"/> where
            <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference"/> is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference"/> to search for.</typeparam>
            <returns>
            The nearest <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent"/> of type <typeparamref name="T"/>, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.Activate">
            <summary>
            Activates this instance.
            </summary>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.Activate(System.Boolean)">
            <summary>
            Activates this instance.
            </summary>
            <param name="safely">If <see langword="true"/>,
            a check that <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent"/> is active must be performed.</param>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
            <exception cref="T:System.InvalidOperationException">No current Comparer.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Comparer">
            <summary>
            Gets the comparer this context is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent">
            <summary>
            Gets the parent comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.ParentDifferenceContext">
            <summary>
            Gets the parent difference comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference">
            <summary>
            Gets or sets the currently processed difference.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.PropertyAccessor">
            <summary>
            Gets or sets the currently processed property accessor.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ComparisonStage">
            <summary>
            Enumeration of possible comparison stages.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ComparisonStage.BaseComparison">
            <summary>
            Base properties comparison stage.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ComparisonStage.ReferenceComparison">
            <summary>
            reference properties comparison stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Difference">
            <summary>
            Base comparison result.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference">
            <summary>
            Difference contract.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Source">
            <summary>
            Gets the source object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Parent">
            <summary>
            Gets the parent difference.
            <see langword="null" />, if none.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.HasChanges">
            <summary>
            Gets a value indicating whether this difference has changes.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Difference.ToString_IndentSize">
            <summary>
            Indent size in <see cref="M:Xtensive.Modelling.Comparison.Difference.ToString"/> method.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.ParametersToString">
            <summary>
            Converts parameters to string.
            </summary>
            <returns>String representation of difference parameters.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.#ctor(System.Object,System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.Difference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.Difference.Target"/> value.</param>
            <exception cref="T:System.InvalidOperationException">Both <paramref name="source"/> and 
            <paramref name="target"/> are <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.CopyDataHint">
            <summary>
            Hint for copy data operation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.DataHint">
            <summary>
            An abstract base class for all data hints.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.Hint">
            <summary>
            An abstract base for comparison hint implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IHint">
            <summary>
            Comparison hint contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHint.GetTargets">
            <summary>
            Gets the targets of this hint - paths to the nodes affected by it directly.
            </summary>
            <returns>A sequence of hint targets.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.Hint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DataHint.SourceTablePath">
            <summary>
            Gets the source table path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DataHint.Identities">
            <summary>
            Gets the identities for data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Collections.Generic.IList{Xtensive.Core.Pair{System.String}})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.CopyDataHint.CopiedColumns">
            <summary>
            Gets copied columns. The first value is source column path, 
            the second value is destination column path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.DeleteDataHint">
            <summary>
            Hint for delete data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="postCopy"><see cref="P:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.PostCopy"/> property value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.PostCopy">
            <summary>
            Gets or sets a value indicating whether deletion must be performed after completion of copy data hint processing.
            Normally this flag is used to remove records related to types moved to other hierarchies -
            these records are still necessary during upgrade to be copied, but must be removed on its
            completion.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.HintSet">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.Hints.Hint"/> set.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IHintSet">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.Hints.Hint"/> collection contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.Add(Xtensive.Modelling.Comparison.Hints.Hint)">
            <summary>
            Adds the specified hint to the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.GetHint``1(Xtensive.Modelling.Node)">
            <summary>
            Gets the hint of type <typeparamref name="THint"/> for the specified node.
            </summary>
            <typeparam name="THint">The type of the hint.</typeparam>
            <param name="node">The node hint is applicable to.</param>
            <returns>
            Found hint, if any;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.GetHints``1(Xtensive.Modelling.Node)">
            <summary>
            Gets hints of type <typeparamref name="THint"/> for the specified node.
            </summary>
            <typeparam name="THint">The type of the hint.</typeparam>
            <param name="node">The node hints are applicable to.</param>
            <returns>
            Found hints, if any;
            otherwise, an empty array.
            </returns>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.Count">
            <summary>
            Gets the count of contained hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.SourceModel">
            <summary>
            Gets or sets the source model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.TargetModel">
            <summary>
            Gets or sets the target model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Add(Xtensive.Modelling.Comparison.Hints.Hint)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">One of paths returned by
            <see cref="M:Xtensive.Modelling.Comparison.Hints.Hint.GetTargets"/> method isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetHint``1(Xtensive.Modelling.Node)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Multiple hints found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetHints``1(Xtensive.Modelling.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.HasHints(Xtensive.Modelling.Node)">
            <summary>
            Determines whether there are any hints associated with the specified.
            </summary>
            <param name="node">The node to check.</param>
            <returns>
            <see langword="true"/> if the specified node has associated hints; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.#ctor(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="sourceModel">The source model.</param>
            <param name="targetModel">The target model.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.Empty">
            <summary>
            Gets the empty <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.SourceModel">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.TargetModel">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.HintTarget">
            <summary>
            Hint target reference.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.Equals(Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.op_Equality(Xtensive.Modelling.Comparison.Hints.HintTarget,Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.op_Inequality(Xtensive.Modelling.Comparison.Hints.HintTarget,Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.#ctor(Xtensive.Modelling.Comparison.ModelType,System.String)">
            <summary>
              Initializes new instance of this type.
            </summary>
            <param name="model">The model.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintTarget.Model">
            <summary>
            Gets the model this hint target points to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintTarget.Path">
            <summary>
            Gets the node path this hint target points to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IdentityPair">
            <summary>
            Pair of node paths or node path and constant.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IdentityPair.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IdentityPair.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source node path.</param>
            <param name="target">The target node path.</param>
            <param name="isIdentifiedByConstant">if set to <see langword="true"/> the target value is constant.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Source">
            <summary>
            Gets the source node path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Target">
            <summary>
            Gets the target node path or constant.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.IsIdentifiedByConstant">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Target"/> value is constant.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IgnoreHint">
            <summary>
            Ignore node hint. 
            Add possibilities to ignore specified node in comparison.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="path">The ignored node path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IgnoreHint.Path">
            <summary>
            Gets ignored node path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.RenameHint">
            <summary>
            Rename hint.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.RenameHint.SourcePath">
            <summary>
            Gets the source node path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.RenameHint.TargetPath">
            <summary>
            Gets the target node path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.UpdateDataHint">
            <summary>
            Hint for update data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Collections.Generic.IList{Xtensive.Core.Pair{System.String,System.Object}})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.UpdateParameter">
            <summary>
            Gets the update parameter. The first is updated column path, 
            the second is new value or null (default value).
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference`2">
            <summary>
            <see cref="P:Xtensive.Modelling.Comparison.IDifference`2.Parent"/>-typed <see cref="T:Xtensive.Modelling.Comparison.IDifference`1"/> contract.
            </summary>
            <typeparam name="T">The type of source and target objects.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference`1">
            <summary>
            Typed <see cref="T:Xtensive.Modelling.Comparison.IDifference"/> contract.
            </summary>
            <typeparam name="T">The type of <see cref="P:Xtensive.Modelling.Comparison.IDifference`1.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.IDifference`1.Target"/> objects.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`1.Source">
            <summary>
            Gets the source object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`1.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`2.Parent">
            <summary>
            Gets the parent difference.
            <see langword="null" />, if none.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IHasPropertyChanges">
            <summary>
            A contract of describing property change set.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IHasPropertyChanges.PropertyChanges">
            <summary>
            Gets list of property changes.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IUpgrader">
            <summary>
            Produces upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IUpgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.IComparer)">
            <summary>
            Gets the upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            If <paramref name="comparer"/> is provided, it is used to validate
            the result of upgrade script.
            </summary>
            <param name="difference">The difference.</param>
            <param name="hints">The upgrade hints.</param>
            <param name="comparer">The comparer to use to validate
            the result of upgrade script.</param>
            <returns>
            Sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s describing the upgrade.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IUpgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <summary>
            Gets the upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
            <param name="difference">The difference.</param>
            <param name="hints">The upgrade hints.</param>
            <returns>
            Sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s describing the upgrade.
            </returns>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ModelType">
            <summary>
            Model type.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ModelType.Source">
            <summary>
            Source model.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ModelType.Target">
            <summary>
            Target model.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.MovementInfo">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> movement information.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Unknown">
            <summary>
            The source node is not changed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Changed">
            <summary>
            The source node is changed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Relocated">
            <summary>
            The source node is relocated.
            Implies any action leading to update references to it.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Created">
            <summary>
            The target node is newly created.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Removed">
            <summary>
            The source node is removed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Copied">
            <summary>
            The source node is copied.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.NameChanged">
            <summary>
            Source node <see cref="P:Xtensive.Modelling.Node.Name"/> is changed.
            Always <see langword="false"/> for <see cref="T:Xtensive.Modelling.IUnnamedNode"/>s.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.IndexChanged">
            <summary>
            Source node <see cref="P:Xtensive.Modelling.Node.Index"/> is changed.
            Always <see langword="false"/> for nodes nested into
            <see cref="T:Xtensive.Modelling.IUnorderedNodeCollection"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.ParentChanged">
            <summary>
            Direct source node <see cref="P:Xtensive.Modelling.Node.Parent"/> is changed,
            i.e. the node was moved to a different parent node.
            Parent's renaming isn't considered as parent change.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.ParentRelocated">
            <summary>
            Direct or indirect source node <see cref="P:Xtensive.Modelling.Node.Parent"/> is <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Relocated"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.NodeCollectionDifference">
            <summary>
            <see cref="T:Xtensive.Modelling.NodeCollection"/> comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeCollectionDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeCollectionDifference.#ctor(Xtensive.Modelling.NodeCollection,Xtensive.Modelling.NodeCollection)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Target"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.ItemChanges">
            <summary>
            Gets the item changes.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.NodeDifference">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeDifference.#ctor(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.Target"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo">
            <summary>
            Gets or sets the movement info.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsRemoveOnCleanup">
            <summary>
            Gets or set a value indicating whether source node 
            must be removed on cleanup stage.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsDependentOnParent">
            <summary>
            Gets or sets a value indicating whether source node 
            must be removed before his parent.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsDataChanged">
            <summary>
            Gets or sets a value indicating whether data is changed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsRemoved">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Removed"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsCreated">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Created"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsChanged">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsNameChanged">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.NameChanged"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.PropertyChanges">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeActionType">
            <summary>
            Enumerates possible upgrade action types.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.PreCondition">
            <summary>
            The action is precondition, so it should be added to appropriate preconditions chain.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.Regular">
            <summary>
            Regular action.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.Rename">
            <summary>
            The action is a rename of temporarily named node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.PostCondition">
            <summary>
            The action is postcondition, so it should be added to appropriate postconditions chain.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeContext">
            <summary>
            Holds current state of the <see cref="T:Xtensive.Modelling.Comparison.Upgrader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.Activate">
            <summary>
            Activates this instance.
            </summary>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.GetMergeActions">
            <summary>
            Merges the sequence of 
            <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.PreConditions"/>, <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.Actions"/> and <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.PostConditions"/>
            and returns the result.
            Sets all these properties to <see langword="null"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.Activate(System.Boolean)">
            <summary>
            Activates this instance.
            </summary>
            <param name="safely">If <see langword="true"/>,
            a check that <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.Parent"/> is active must be performed.</param>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
            <exception cref="T:System.InvalidOperationException">No current Comparer.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Upgrader">
            <summary>
            Gets the upgrader this context is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Parent">
            <summary>
            Gets the parent upgrade context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Difference">
            <summary>
            Gets or sets the currently processed difference.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.PreConditions">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.PreCondition"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Actions">
            <summary>
            Gets or sets the current action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Renames">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.Rename"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.PostConditions">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.PostCondition"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Property">
            <summary>
            Gets or sets the currently processed property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.IsImmutable">
            <summary>
            Indicates whether node must be copied rather than processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.IsRemoved">
            <summary>
            Indicates whether node must be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.DependencyRootType">
            <summary>
            Gets or sets the type of the dependency root.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Upgrader">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.IUpgrader"/> implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.NodeGroupComment">
            <summary>
            Node group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.NodeCollectionGroupComment">
            <summary>
            Node collection group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.PreConditionsGroupComment">
            <summary>
            Preconditions group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.RenamesGroupComment">
            <summary>
            Renames group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.PostConditionsGroupComment">
            <summary>
            Postconditions group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.TemporaryNameFormat">
            <summary>
            Temporary name format string.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.IComparer)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">Upgrade sequence validation has failed.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessStage(Xtensive.Modelling.Comparison.UpgradeStage,Xtensive.Modelling.Actions.GroupingNodeAction)">
            <summary>
            Generate actions for specific <see cref="T:Xtensive.Modelling.Comparison.UpgradeStage"/>.
            </summary>
            <param name="stage">The stage.</param>
            <param name="action">The parent action.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.Visit(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="difference">The difference to visit.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitNodeDifference(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Visits the node difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessMovement(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Generates <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> according to <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/>.
            </summary>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.RegisterTemporaryRename(Xtensive.Modelling.Node)">
            <summary>
            Registers the temporary rename.
            </summary>
            <param name="source">The renamed node.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessProperties(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Process <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.PropertyChanges"/> for specific <see cref="T:Xtensive.Modelling.Comparison.NodeDifference"/>.
            </summary>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitNodeCollectionDifference(Xtensive.Modelling.Comparison.NodeCollectionDifference)">
            <summary>
            Visits the node collection difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitValueDifference(Xtensive.Modelling.Comparison.ValueDifference)">
            <summary>
            Visits the value difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitUnknownDifference(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Visits the unknown difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsAllowedForCurrentStage(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Determines whether the specified difference allowed for current <see cref="P:Xtensive.Modelling.Comparison.Upgrader.Stage"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if the specified difference allowed
            for current <see cref="P:Xtensive.Modelling.Comparison.Upgrader.Stage"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsCyclicRename(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Determines whether is cycle rename detected.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if is cycle rename exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsImmutable(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Determines whether specified property is immutable.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns><see langword="true"/> if th specified property is immutable; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.IsImmutable"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsVolatile(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Determines whether specified property is mutable.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns><see langword="true"/> if th specified property is mutable; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.IsVolatile"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetDependencyRootType(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Gets the type of the dependency root object for the specified property.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns>The type of the dependency root object for the specified property;
            <see langword="null"/>, if none.</returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.DependencyRootType"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetTemporaryName(Xtensive.Modelling.Node)">
            <summary>
            Gets the name of the temporary for the renaming node in case of conflict
            (mutual rename).
            </summary>
            <returns>Temporary node name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetPathWithoutName(Xtensive.Modelling.Node)">
            <summary>
            Gets the node path without node name.
            </summary>
            <param name="node">The node.</param>
            <returns>Path.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.CreateContext">
            <summary>
            Creates new upgrade context.
            </summary>
            <returns>Newly created <see cref="T:Xtensive.Modelling.Comparison.UpgradeContext"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.OpenActionGroup(System.String)">
            <summary>
            Creates the new action group.
            </summary>
            <param name="comment">The action group comment.</param>
            <returns>A disposable deactivating the group.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.AddAction(Xtensive.Modelling.Comparison.UpgradeActionType,Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Appends the specified action to the action sequence that is building now.
            </summary>
            <param name="actionType">Type of the action.</param>
            <param name="action">The action to append.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>actionType</c> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid <c>Context.DependencyRootType</c>.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Current">
            <summary>
            Gets the current comparer.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Context">
            <summary>
            Gets the current upgrade context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Difference">
            <summary>
            Gets the difference that is currently processed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Hints">
            <summary>
            Gets the comparison and upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Stage">
            <summary>
            Gets the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.TemporaryRenames">
            <summary>
            Gets the temporary renames.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.SourceModel">
            <summary>
            Gets the source model to compare.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.TargetModel">
            <summary>
            Gets the target model to compare.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.CurrentModel">
            <summary>
            Gets the current model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Comparer">
            <summary>
            Gets the comparer.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeStage">
            <summary>
            Enumeration of possible upgrade stages.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.CleanupData">
            <summary>
            Record-level cleanup.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Prepare">
            <summary>
            Remove unnecesery structures.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.TemporaryRename">
            <summary>
            Rename cycle participants.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Upgrade">
            <summary>
            Create and rename structures, change property values.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.CopyData">
            <summary>
            Copy data.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.PostCopyData">
            <summary>
            Post copy data.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Cleanup">
            <summary>
            Remove structures thats have not been 
            removed on <see cref="F:Xtensive.Modelling.Comparison.UpgradeStage.Prepare"/> stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ValueDifference">
            <summary>
            Simple value comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ValueDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ValueDifference.#ctor(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ValueDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.IModel">
            <summary>
            Tagging interface for root model types.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INode">
            <summary>
            Node interface.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode">
            <summary>
            Base class for any model node or node collection (path node).
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Validation.IValidatable">
            <summary>
            "Validatable object" contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.IValidatable.Validate">
            <summary>
            Validates the instance state.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.IPathNode.Resolve(System.String)">
            <summary>
            Gets the child node by its path.
            </summary>
            <param name="path">Path to the node to get.</param>
            <returns>Path node, if found;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.IPathNode.Dump">
            <summary>
            Dumps this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Name">
            <summary>
            Gets or sets the name of this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.EscapedName">
            <summary>
            Gets escaped <see cref="P:Xtensive.Modelling.IPathNode.Name"/> of this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Parent">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Path">
            <summary>
            Gets the path to this node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetProperty(System.String)">
            <summary>
            Gets the value of the property with specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of the property with specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetNestedProperty(System.String)">
            <summary>
            Tries the get nested property value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Nested property value;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetPathNodes(System.Boolean)">
            <summary>
            Gets all non-<see langword="null"/> property values of <see cref="T:Xtensive.Modelling.IPathNode"/> type.
            </summary>
            <param name="nestedOnly">If set to <see langword="true"/>, only nested nodes will be returned;
            otherwise, <see langword="false"/>.</param>
            <returns>Non-<see langword="null"/> property values of <see cref="T:Xtensive.Modelling.IPathNode"/> type.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.Move(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Moves the node.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Xtensive.Modelling.INode.Remove">
            <summary>
            Removes the node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode.Clone(Xtensive.Modelling.Node,System.String)">
            <summary>
            Copies the whole node to the specified location.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <returns>Created copy of the node.</returns>
        </member>
        <member name="P:Xtensive.Modelling.INode.State">
            <summary>
            Gets the state of the node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.Index">
            <summary>
            Gets or sets the index of the node in the parent collection, if applicable;
            otherwise, <see langword="0" />.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.Nesting">
            <summary>
            Gets the node nesting information.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.PropertyAccessors">
            <summary>
            Gets the property accessors for this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IModel.Actions">
            <summary>
            Gets or sets the sequence of actions to log.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INesting">
            <summary>
            Node nesting information.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.Node">
            <summary>
            Gets the node this object belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyName">
            <summary>
            Gets the name of the parent property, to which the node can be nested.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.EscapedPropertyName">
            <summary>
            Gets the escaped <see cref="P:Xtensive.Modelling.INesting.PropertyName"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.IsNestedToCollection">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property is a collection property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyInfo">
            <summary>
            Gets the property info for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyGetter">
            <summary>
            Gets the property getter for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyValue">
            <summary>
            Gets the property value for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeCollection">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <summary>
            Gets the item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to get.</param>
            <param name="value">Item, if it is found; otherwise <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if item is found by specified <paramref name="name"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.Contains(System.String)">
            <summary>
            Determines whether collection contains
            an item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to find.</param>
            <returns>
            <see langword="true"/> if this collection contains
            an item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.GetTemporaryName">
            <summary>
            Gets the temporary name (it isn't used in this collection).
            </summary>
            <returns>Temporary name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeCollection`1">
            <summary>
            Typed <see cref="T:Xtensive.Modelling.Node"/> collection.
            </summary>
            <typeparam name="TNode">The type of the collection item.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection`1.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <summary>
            Gets the item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to get.</param>
            <param name="value">Item, if it is found; otherwise <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if item is found by specified <paramref name="name"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection`1.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection`1.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeReference">
            <summary>
            Node reference contract.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeReference.Value">
            <summary>
            Gets or sets the target node this reference points to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INode`1">
            <summary>
            Node with specified <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> type.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode`1">
            <summary>
            Path node with specified <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> type.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode`1.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode`1.Move(`0,System.String,System.Int32)">
            <summary>
            Moves the node.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="P:Xtensive.Modelling.INode`1.Parent">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode`2">
            <summary>
            Path node with specified <see cref="P:Xtensive.Modelling.IPathNode.Model"/> 
            and <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> types.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode`2.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IUnnamedNode">
            <summary>
            A tagging interface for any unnamed node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IUnorderedNodeCollection">
            <summary>
            A tagging interface for any unordered node collection.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Nesting">
            <summary>
            Abstract base <see cref="T:Xtensive.Modelling.INesting"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Nesting.Initialize">
            <exception cref="T:System.InvalidOperationException">Invalid property type.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.EscapedPropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.Node">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.IsNestedToCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyGetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertySetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyValue">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Nesting`3">
            <summary>
            <see cref="T:Xtensive.Modelling.INesting"/> implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.Initialize">
            <exception cref="T:System.InvalidOperationException">Invalid property type.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.#ctor(`0,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="node"><see cref="T:Xtensive.Modelling.Node"/> property value.</param>
            <param name="propertyName"><see cref="P:Xtensive.Modelling.Nesting.PropertyName"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="node"><see cref="T:Xtensive.Modelling.Node"/> property value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.IsNestedToCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertyGetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertySetter">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Node">
            <summary>
            An abstract base class for model node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Node.PathDelimiter">
            <summary>
            Path delimiter character.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Node.PathEscape">
            <summary>
            Path escape character.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.SetProperty(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetNestedProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetPathNodes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid node state.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Remove">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid node state.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Resolve(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Clone(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.CopyPropertyValue(Xtensive.Modelling.Node,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Copies the property value.
            </summary>
            <param name="target">The target node.</param>
            <param name="accessor">The accessor of the property to copy value of.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateMove(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Validates the <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> method arguments.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentException">Item already exists.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is out of range, 
            or <paramref name="newParent"/> belongs to a different <see cref="P:Xtensive.Modelling.Node.Model"/>.</exception>
            <exception cref="T:System.InvalidOperationException">newName!=newIndex for <see cref="T:Xtensive.Modelling.IUnnamedNode"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateRemove">
            <summary>
            Validates the <see cref="M:Xtensive.Modelling.Node.Remove"/> method call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Model object cannot be removed.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateState">
            <summary>
            Validates the state (i.e. checks everything except nested properties).
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformCreate">
            <summary>
            Actually performs construction operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Target object already exists.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformMove(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Actually performs <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> operation.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.InvalidOperationException">Target object already exists.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformShift(System.Int32)">
            <summary>
            Performs "shift" operation 
            (induced by <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> operation of another node).
            </summary>
            <param name="offset">Shift offset.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformRemove(Xtensive.Modelling.Node)">
            <summary>
            Actually performs <see cref="M:Xtensive.Modelling.Node.Remove"/> operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogPropertyChange(System.String,System.Object)">
            <summary>
            Logs the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogAction(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Begins registration of a new action.
            </summary>
            <param name="action">The action to register.</param>
            <returns>
            <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to describe it.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogAction">
            <summary>
            Begins registration of a new action.
            </summary>
            <returns>
            <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to describe it.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.EnsureIsLive">
            <summary>
            Ensures the node <see cref="P:Xtensive.Modelling.Node.State"/> is <see cref="F:Xtensive.Modelling.NodeState.Live"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Node.State"/> is invalid.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.EnsureIsEditable">
            <summary>
            Ensures the node <see cref="P:Xtensive.Modelling.Node.State"/> is <see cref="F:Xtensive.Modelling.NodeState.Live"/> and
            node isn't <see cref="M:Xtensive.Modelling.Node.Lock(System.Boolean)"/>ed.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Node.State"/> is invalid.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:Xtensive.Modelling.Node.PropertyChanged"/> event.
            </summary>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.ChangeProperty``1(System.String,``0,System.Action{Xtensive.Modelling.Node,``0})">
            <summary>
            Does all the dirty job to change the property of this node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <param name="setter">Property setter delegate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> belongs to a different <see cref="P:Xtensive.Modelling.Node.Model"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.CreateNesting">
            <summary>
            Creates <see cref="P:Xtensive.Modelling.Node.Nesting"/> object describing how this node is nested.
            </summary>
            <returns>New <see cref="P:Xtensive.Modelling.Node.Nesting"/> object.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xtensive.Modelling.Node.CreateNesting"/> has returned <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Dump">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.#ctor(Xtensive.Modelling.Node,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Modelling.Node"/> class.
            </summary>
            <param name="parent"><see cref="P:Xtensive.Modelling.Node.Parent"/> property value.</param>
            <param name="name">Initial <see cref="P:Xtensive.Modelling.Node.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.EscapedName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.State">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Index">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Nesting">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.PropertyAccessors">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Path">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Modelling.Node.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeCollection">
            <summary>
            An abstract base class for collection of nodes in model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.GetTemporaryName">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Resolve(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Xtensive.Modelling.NodeCollection.CollectionChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Add(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Remove(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.RemoveName(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.AddName(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.CheckIntegrity">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Dump">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.NodeCollection.Name"/> is not initialized yet.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.#ctor(Xtensive.Modelling.Node,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="parent"><see cref="P:Xtensive.Modelling.NodeCollection.Parent"/> property value.</param>
            <param name="name"><see cref="P:Xtensive.Modelling.NodeCollection.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Name">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.EscapedName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Parent">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Path">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Item(System.String)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Item is not found.</exception>
        </member>
        <member name="E:Xtensive.Modelling.NodeCollection.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeCollection`3">
            <summary>
            Typed node collection implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection`3.#ctor(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeState">
            <summary>
            Enumerates possible states of the node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Default">
            <summary>
            Default node state: <see cref="F:Xtensive.Modelling.NodeState.Initializing"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Initializing">
            <summary>
            Node isn't fully initialized yet.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Live">
            <summary>
            Node is "live".
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Removed">
            <summary>
            Node is removed.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Node`2">
            <summary>
            Abstract base class for node with specified <see cref="P:Xtensive.Modelling.Node.Model"/> 
            and <see cref="P:Xtensive.Modelling.Node.Parent"/> types.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.Node`2.Move(`0,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node`2.#ctor(`0,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node`2.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Node`2.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.PathNodeExtensions">
            <summary>
            Extension methods to <see cref="T:Xtensive.Modelling.IPathNode"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PathNodeExtensions.Resolve(Xtensive.Modelling.IPathNode,System.String,System.Boolean)">
            <summary>
            Gets the child node by its path.
            </summary>
            <param name="path">Path to the node to get.</param>
            <param name="throwIfNone">Indicates whether an exception 
            must be thrown if there is no node with the specified path, or not.</param>
            <returns>
            Path node, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Modelling.PropertyAccessor">
            <summary>
            Property accessor.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessor.GetDependencyRoot(Xtensive.Modelling.IPathNode)">
            <summary>
            Gets the dependency root object.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="propertyInfo">The property info this accessor is bound to.</param>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.PropertyInfo">
            <summary>
            Gets <see cref="T:System.Reflection.PropertyInfo"/> of property 
            this accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsSystem">
            <summary>
            Gets a value indicating whether underlying property is system.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Priority">
            <summary>
            Gets the <see cref="P:Xtensive.Modelling.Attributes.PropertyAttribute.Priority"/> of the property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IgnoreInComparison">
            <summary>
            Gets a value indicating whether underlying property must be ignored in comparison.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.CaseInsensitiveComparison">
            <summary>
            Gets a value indicating whether property values are compared case insensitively.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsImmutable">
            <summary>
            Gets a value indicating whether underlying property value must be re-created
            rather than created &amp; processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsVolatile">
            <summary>
            Gets a value indicating whether underlying property must be 
            ignored during recreation of parent atomic property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.RecreateParent">
            <summary>
            Gets or sets a value indicating whether property owner should be recreated on property value change.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.DependencyRootType">
            <summary>
            Gets the dependency root type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Getter">
            <summary>
            Gets the property getter delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.HasGetter">
            <summary>
            Gets a value indicating whether this instance has getter.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Setter">
            <summary>
            Gets the property setter delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Default">
            <summary>
            Gets or sets the default property value.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.HasSetter">
            <summary>
            Gets a value indicating whether this instance has setter.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.PropertyAccessorDictionary">
            <summary>
            Read-only <see cref="T:Xtensive.Modelling.PropertyAccessor"/> dictionary.
            Items returned by its enumerator are ordered by item <see cref="P:Xtensive.Modelling.PropertyAccessor.Priority"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.System#Collections#Generic#IEnumerable{Xtensive#Modelling#PropertyAccessor}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,Xtensive.Modelling.PropertyAccessor})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,Xtensive.Modelling.PropertyAccessor},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Validation.ValidationContext">
            <summary>
            Model validation context.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.IsValidated(System.Object)">
            <summary>
            Determines whether the specified target is validated.
            </summary>
            <param name="target">The target to check.</param>
            <returns>
            <see langword="true"/> if the specified target is validated; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.IsValidated(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified target is validated.
            </summary>
            <param name="target">The target to check.</param>
            <param name="markAsValidated">If set to <see langword="true"/>, target will be marked as validated.</param>
            <returns>
            <see langword="true"/> if the specified target is validated; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationContext.Current">
            <summary>
            Gets the current validation context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Validation.ValidationScope">
            <summary>
            Model validation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationScope.Open">
            <summary>
            Opens a validation context and scope.
            </summary>
            <returns>A new <see cref="T:Xtensive.Modelling.Validation.ValidationScope"/>, if there is no 
            <see cref="P:Xtensive.Modelling.Validation.ValidationContext.Current"/> validation context;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationScope.#ctor(Xtensive.Modelling.Validation.ValidationContext)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationScope.Context">
            <summary>
            Gets the associated validation context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.CompilerAttribute">
            <summary>
            Attribute for specifying method which acts as compiler
            for desired <see cref="P:Xtensive.Orm.CompilerAttribute.TargetMember"/> of type with specified <see cref="P:Xtensive.Orm.CompilerAttribute.TargetTypeAssemblyQualifiedName"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetMember">The target method.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetTypeAssemblyQualifiedName">Assembly qualified name of target type.</param>
            <param name="targetMember">The target method.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.Type,System.String,Xtensive.Orm.TargetKind)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetMember">The target member.</param>
            <param name="targetKind">Kind of the target.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.String,System.String,Xtensive.Orm.TargetKind)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetTypeAssemblyQualifiedName">Assembly qualified name of target type.</param>
            <param name="targetMember">The target member.</param>
            <param name="targetKind">Kind of the target.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetMember">The target member.</param>
            <param name="numberOfGenericArguments">The generic params count.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetTypeAssemblyQualifiedName">Assembly qualified name of target type.</param>
            <param name="targetMember">The target member.</param>
            <param name="numberOfGenericArguments">The generic params count.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.Type,System.String,Xtensive.Orm.TargetKind,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetMember">The target member.</param>
            <param name="targetKind">Kind of the target.</param>
            <param name="numberOfGenericArguments">The generic params count.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerAttribute.#ctor(System.String,System.String,Xtensive.Orm.TargetKind,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="targetTypeAssemblyQualifiedName">Assembly qualified name of target type.</param>
            <param name="targetMember">The target member.</param>
            <param name="targetKind">Kind of the target.</param>
            <param name="numberOfGenericArguments">The generic params count.</param>
        </member>
        <member name="P:Xtensive.Orm.CompilerAttribute.TargetTypeAssemblyQualifiedName">
            <summary>
            Gets or sets the type full name of the target.
            The type should be either non-generic type or open generic type.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Xtensive.Orm.CompilerAttribute.TargetMember">
            <summary>
            Gets or sets the target member.
            </summary>
            <value>The target member.</value>
        </member>
        <member name="P:Xtensive.Orm.CompilerAttribute.TargetKind">
            <summary>
            Gets or sets the kind of the target.
            </summary>
            <value>The kind of the target.</value>
        </member>
        <member name="P:Xtensive.Orm.CompilerAttribute.NumberOfGenericArguments">
            <summary>
            Gets or sets the generic params count.
            This affects only generic methods not generic types.
            </summary>
            <value>The generic params count.</value>
        </member>
        <member name="T:Xtensive.Orm.CompilerContainerAttribute">
            <summary>
            Attribute for specifying user defined extension type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.CompilerContainerAttribute.#ctor(System.Type,Xtensive.Orm.ConflictHandlingMethod)">
            <summary>
              Initializes new instance of this type.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="conflictHandlingMethod">The conflict handling method.</param>
        </member>
        <member name="M:Xtensive.Orm.CompilerContainerAttribute.#ctor(System.Type)">
            <summary>
              Initializes new instance of this type.
            </summary>
            <param name="targetType">Target type.</param>
        </member>
        <member name="P:Xtensive.Orm.CompilerContainerAttribute.ExtensionType">
            <summary>
            Gets the target type (i.e. type this compiler translates to).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.CompilerContainerAttribute.TargetType">
            <summary>
            Gets the target type (i.e. type this compiler translates to).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.CompilerContainerAttribute.ConflictHandlingMethod">
            <summary>
            Gets the conflict handling method value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.EntityErrorInfo">
            <summary>
            Entity validation error info.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.EntityErrorInfo.#ctor(Xtensive.Orm.Entity,System.Collections.Generic.IList{Xtensive.Orm.Validation.ValidationResult})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="target">Validated entity.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.EntityErrorInfo.Target">
            <summary>
            Gets validated entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.EntityErrorInfo.Errors">
            <summary>
            Gets or sets validation errors.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.EntitySetFieldValidator">
            <summary>
            Validator that invokes <see cref="M:Xtensive.Orm.EntitySetBase.OnValidate"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.PropertyValidator">
            <summary>
            Standard base type for <see cref="T:Xtensive.Orm.Validation.IPropertyValidator"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.IPropertyValidator">
            <summary>
            Field validator contract.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.IValidator">
            <summary>
            Base contract for any persistent validators.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.IPropertyValidator.Configure(Xtensive.Orm.Domain,Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Configures this instance.
            </summary>
            <param name="domain">A domain this validator is bound to.</param>
            <param name="type">A type this validator is bound to.</param>
            <param name="field">A persitent field this validator is bound to.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.IPropertyValidator.Validate(Xtensive.Orm.Entity,System.Object)">
            <summary>
            Validates specified object considering new value of a persistent field.
            </summary>
            <param name="target">An object to validate.</param>
            <param name="fieldValue">Persistent field value.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.IPropertyValidator.CreateNew">
            <summary>
            Creates new unconfigured <see cref="T:Xtensive.Orm.Validation.IPropertyValidator"/> instance
            with the same parameters.
            </summary>
            <returns>Newly created validator.</returns>
        </member>
        <member name="P:Xtensive.Orm.Validation.IPropertyValidator.IsImmediate">
            <summary>
            Gets value indicating if current validator is immediate.
            Immediate validators execute just before field value changes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.Configure(Xtensive.Orm.Domain,Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Configures this instance.
            </summary>
            <param name="domain">A domain this validator is bound to.</param>
            <param name="type">A type this validator is bound to.</param>
            <param name="field">A persitent field this validator is bound to.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.Validate(Xtensive.Orm.Entity,System.Object)">
            <summary>
            Validates specified object considering new value of a persistent field.
            </summary>
            <param name="target">An object to validate.</param>
            <param name="fieldValue">Persistent field value.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.CreateNew">
            <summary>
            Creates new unconfigured <see cref="T:Xtensive.Orm.Validation.IPropertyValidator"/> instance
            with the same parameters.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.Success">
            <summary>
            Constructs successful validation result.
            </summary>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.Error(System.String,System.Object)">
            <summary>
            Constructs validation failure result.
            </summary>
            <param name="errorMessage">Validation error message.</param>
            <param name="value">Validated value.</param>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.Error(System.Exception,System.Object)">
            <summary>
            Constructs validation failure result.
            </summary>
            <param name="exception">Validation exception.</param>
            <param name="value">Validated value.</param>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.PropertyValidator.ThrowConfigurationError(System.String,System.Exception)">
            <summary>
            Throws configuration error with specified message.
            </summary>
            <param name="message">Configuration error message.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.PropertyValidator.IsImmediate">
            <summary>
            Gets or sets value indicating if current validator is immediate.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.PropertyValidator.Domain">
            <summary>
            Gets domain this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.PropertyValidator.Type">
            <summary>
            Gets type this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.PropertyValidator.Field">
            <summary>
            Gets field this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.PropertyValidator.Mode">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.Validation.ConstrainMode"/> to be used on setting property value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.EntityValidator">
            <summary>
            Validator that invokes <see cref="M:Xtensive.Orm.Persistent.OnValidate"/>
            for <see cref="T:Xtensive.Orm.Entity"/> derived types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.ObjectValidator">
            <summary>
            Standard base type for <see cref="T:Xtensive.Orm.Validation.IObjectValidator"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.IObjectValidator">
            <summary>
            Persistent object validator contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.IObjectValidator.Configure(Xtensive.Orm.Domain,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Configures this instance.
            </summary>
            <param name="domain">A domain this validator is bound to.</param>
            <param name="type">A type this validator is bound to.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.IObjectValidator.Validate(Xtensive.Orm.Entity)">
            <summary>
            Validates specified object.
            </summary>
            <param name="target">An object to validate.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.IObjectValidator.CreateNew">
            <summary>
            Creates new unconfigured <see cref="T:Xtensive.Orm.Validation.IObjectValidator"/> instance
            with the same parameters.
            </summary>
            <returns>Newly created validator.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.Configure(Xtensive.Orm.Domain,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Configures this instance.
            </summary>
            <param name="domain">A domain this validator is bound to.</param>
            <param name="type">A type this validator is bound to.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.Validate(Xtensive.Orm.Entity)">
            <summary>
            Validates specified object.
            </summary>
            <param name="target">An object to validate.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.CreateNew">
            <summary>
            Creates new unconfigured <see cref="T:Xtensive.Orm.Validation.IObjectValidator"/> instance
            with the same parameters.
            </summary>
            <returns>Newly created validator.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.Success">
            <summary>
            Constructs successful validation result.
            </summary>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.Error(System.String)">
            <summary>
            Constructs validation failure result.
            </summary>
            <param name="errorMessage">Validation error message.</param>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.Error(System.Exception)">
            <summary>
            Constructs validation failure result.
            </summary>
            <param name="exception">Validation error message.</param>
            <returns>Constructed result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Validation.ObjectValidator.ThrowConfigurationError(System.String,System.Exception)">
            <summary>
            Throws configuration error with specified message.
            </summary>
            <param name="message">Configuration error message.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.ObjectValidator.Domain">
            <summary>
            Gets domain this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ObjectValidator.Type">
            <summary>
            Gets type this instance is bound to.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.ValidationFailedException">
            <summary>
            Validation failure error.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StorageException">
            <summary>
            Base class for any storage-level exception.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.StorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.StorageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.StorageException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Xtensive.Orm.StorageException.Info">
            <summary>
            Context information about occurred error.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.ValidationFailedException.#ctor(System.String)">
            <summary>
            Initailizes new instance of this type.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.ValidationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.ValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Performs deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationFailedException.ValidationErrors">
            <summary>
            Gets validation errors associated with this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.StructureFieldValidator">
            <summary>
            Validator and invokes <see cref="M:Xtensive.Orm.Persistent.OnValidate"/>
            for <see cref="T:Xtensive.Orm.Structure"/> derived types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.ValidationResult">
            <summary>
            Validation result.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.ValidationResult.#ctor(Xtensive.Orm.Validation.IValidator,System.String,Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">Validator that produced this object.</param>
            <param name="errorMessage">Validation error message.</param>
            <param name="field">Validated field.</param>
            <param name="value">Validated value.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.Success">
            <summary>
            Gets successful validation result.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.Source">
            <summary>
            Gets validator that produced validation error.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.IsError">
            <summary>
            Gets value indicating validation status.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.ErrorMessage">
            <summary>
            Gets error message.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.Field">
            <summary>
            Gets field validated field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.ValidationResult.Value">
            <summary>
            Gets validated value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.OverrideFieldNameAttribute">
            <summary>
            Overrides field name for persistence purposes.
            You should not use this attribute directly.
            It is automatically applied to your types when needed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Weaving.OverrideFieldNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Weaving.OverrideFieldNameAttribute"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Weaving.OverrideFieldNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.PersistenceImplementation">
            <summary>
            Helpers routines for persistence weaver.
            You should not use this type manually.
            All required invocations are injected automatically.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Weaving.PersistenceImplementation.HandleKeySet(System.String,System.String)">
            <summary>
            Processes an attempt to call key setter by throwing <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="typeName">Persistent type name.</param>
            <param name="propertyName">Persistent property name.</param>
        </member>
        <member name="T:Xtensive.Orm.Weaving.EntityInterfaceAttribute">
            <summary>
            Identifies persistent interface.
            You should not use this attribute directly.
            It is automatically applied to your types when needed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.EntitySetTypeAttribute">
            <summary>
            Identifies persistent <see cref="T:Xtensive.Orm.EntitySet`1"/> type.
            You should not use this attribute directly.
            It is automatically applied to your types when needed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.EntityTypeAttribute">
            <summary>
            Identifies persistent <see cref="T:Xtensive.Orm.Entity"/> type.
            You should not use this attribute directly.
            It is automatically applied to your types when needed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.KeyGeneratorKind">
            <summary>
            Specifies key generator type to use for a particular hierarchy.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.KeyGeneratorKind.None">
            <summary>
            No key generator is provided for hierarchy.
            Each <see cref="T:Xtensive.Orm.Entity"/> should supply unique key values
            by calling corresponding constructor.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.KeyGeneratorKind.Default">
            <summary>
            Standard key generator is provided for hierarchy.
            <see cref="P:Xtensive.Orm.KeyGeneratorAttribute.Name"/> optionally specifies
            generator name. If name is not specified key type name is used.
            For example if key has <see cref="T:System.Int32"/> type,
            then generator will be named "Int32".
            Standard key generators handle only single column keys.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.KeyGeneratorKind.Custom">
            <summary>
            Custom key generator is used.
            You should provide <see cref="P:Xtensive.Orm.KeyGeneratorAttribute.Name"/>
            as well.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.ProcessedByWeaverAttribute">
            <summary>
            Identifies assembly processed by DataObjects.Net weaver.
            You should not use this attribute directly.
            It is automatically applied to your assembly when needed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Weaving.StructureTypeAttribute">
            <summary>
            Identifies persistent <see cref="T:Xtensive.Orm.Structure"/> type.
            You should not use this attribute directly.
            It is automatically applied to your types when needed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TypeAttribute">
            <summary>
            Attribute for specifying parameter types of compiled method.
            See <see cref="T:Xtensive.Orm.CompilerAttribute"/> for details.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Xtensive.Orm.TypeAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TypeDiscriminatorAttribute">
            <summary>
            Marks persistent property as type discriminator.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StorageAttribute">
            <summary>
            Base class for all storage-related attributes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.MaterializedViewAttribute">
            <summary>
            <b>Not yet supported.</b>
            Indicates that materialized view should be created for
            the interface type it is applied on.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.HierarchyRootAttribute">
            <summary>
            Defines root type of hierarchy of persistent types.
            </summary>
            <remarks>
            <para>
            All entities in your model can be divided into one or more persistent hierarchies. 
            Persistent hierarchy is a set of entities, that are inherited from one entity class(hierarchy root) 
            and have the same key structure. Hierarchy root entity should be marked by this attribute.
            </para>
            <para>
            Persistent hierarchies can use different inheritance schemes, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class. Inheritance schema
            can be specified in <see cref="P:Xtensive.Orm.HierarchyRootAttribute.InheritanceSchema"/> property.
            </para>
            </remarks>
            <example>In following example two persistent type hierarchies are declared.
            Inheritance schema is specified for documents hierarchy.
            <code>
            [HerarchyRoot]
            public class Product : Entity  { ... }
            
            [HerarchyRoot(InheritanceSchema = InheritaceSchema.ClassTable)
            public class Document : Entity  { ... }
            
            public class Invoice : Document { ... }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Orm.HierarchyRootAttribute.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.HierarchyRootAttribute.#ctor(Xtensive.Orm.Model.InheritanceSchema)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="schema">The inheritance schema for the hierarchy.</param>
        </member>
        <member name="P:Xtensive.Orm.HierarchyRootAttribute.InheritanceSchema">
            <summary>
            Gets the inheritance schema for this hierarchy.
            </summary>
            <remarks>
            Persistent hierarchies can use diffirent inheritance schemas, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.HierarchyRootAttribute.IncludeTypeId">
            <summary>
            Gets or sets a value indicating whether key should include TypeId field.
            </summary>
            <remarks>
            TypeId can be included into entity Key for some specific optimization purposes.
            Default value is <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.HierarchyRootAttribute.Clustered">
            <summary>
            Gets or sets a value indicating whether primary key for this hierarchy should be clustered.
            If underlying RDBMS does not support clustered indexes, this value is ignored.
            Default value is <see langword="true" />.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TypeDiscriminatorValueAttribute">
            <summary>
            Specifies value of type discriminator for the entity type it is applied to.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TypeDiscriminatorValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Xtensive.Orm.TypeDiscriminatorValueAttribute.Value">
            <summary>
            Gets or sets the value of type discriminator.
            </summary>
            <value>Custom type discriminator value.</value>
        </member>
        <member name="P:Xtensive.Orm.TypeDiscriminatorValueAttribute.Default">
            <summary>
            Gets or sets a value indicating whether underlying type is default type in given hierarchy.
            </summary>
            <value>
            <see langword="true"/> if underlying type is default in given hierarchy; otherwise, <see langword="false"/>.
            </value>
            <remarks>Only one type at a time can be default in single hierarchy.</remarks>
        </member>
        <member name="T:Xtensive.Orm.VersionAttribute">
            <summary>
            Marks persistent property as a part of version.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionAttribute.#ctor">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <remarks><see cref="P:Xtensive.Orm.VersionAttribute.Mode"/> is set to <see cref="F:Xtensive.Orm.VersionMode.Auto"/>.</remarks>
        </member>
        <member name="M:Xtensive.Orm.VersionAttribute.#ctor(Xtensive.Orm.VersionMode)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="mode">The version check mode.</param>
        </member>
        <member name="P:Xtensive.Orm.VersionAttribute.Mode">
            <summary>
            Gets the version check mode for the persistent property.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.VersionMode">
            <summary>
            Specifies version check mode for particular persistent property. Applied via <see cref="T:Xtensive.Orm.VersionAttribute"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.VersionMode.Default">
            <summary>
            Default value.
            The same as <see cref="F:Xtensive.Orm.VersionMode.Manual"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.VersionMode.Manual">
            <summary>
            The field is included into entity version; its value must be updated manually.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.VersionMode.Skip">
            <summary>
            The field must not be included into entity version.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.VersionMode.Auto">
            <summary>
            The field is included into entity version; its value is updated automatically.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Builders.ProviderDescriptor">
            <summary>
            Provider descriptor.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Builders.ProviderDescriptor.Get(System.String)">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Building.Builders.ProviderDescriptor"/> for the specified <paramref name="providerName"/>.
            </summary>
            <param name="providerName">Name of the storage provider.</param>
            <returns>Provider factory for <paramref name="providerName"/>.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.Builders.ProviderDescriptor.HandlerFactory">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Building.Builders.ProviderDescriptor.HandlerFactory"/> type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Builders.ProviderDescriptor.DriverFactory">
            <summary>
            Gets <see cref="T:Xtensive.Sql.SqlDriverFactory"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Builders.IndexBuilder.BuildIndex(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Building.Definitions.IndexDef,System.Boolean)">
            <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.FullTextFieldDef">
            <summary>
            Defines a single field inside full-text index.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Node">
             <summary>
            An abstract base class for model node.
             </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Node.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.Node.UpdateState">
            <summary>
            Updates the internal state of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Node.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.Node"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.Node"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Node.Name">
            <summary>
            Gets the name of this instance.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Model.Node.Changing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Orm.Model.Node.Changed">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.FullTextFieldDef.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.Configuration">
            <summary>
            Gets or sets the configuration for word-breaker and stemmer.
            </summary>
            <value>The configuration name.</value>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.TypeFieldName">
            <summary>
            Gets or sets the name of the type field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.IsAnalyzed">
            <summary>
            Gets or sets a value indicating whether this field is analyzed by stemmer.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef">
            <summary>
            Defines full-text index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDef.#ctor(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef"/> items.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.TryGetValue(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.TryGetValue(System.Type)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.Item(System.Type)">
            <summary>
            An indexer that provides access to collection items.
            </summary>
            <exception cref="T:System.ArgumentException"> when item was not found.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Node`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Building.Module">
            <summary>
            Standard implementation of domain builder module.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IModule2">
            <summary>
            Extended version of <see cref="T:Xtensive.Orm.IModule"/>.
            Consider inheriting from <see cref="T:Xtensive.Orm.Building.Module"/> instead.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IModule">
            <summary>
            <see cref="T:Xtensive.Orm.Domain"/>-level extension module contract.
            Consider inheriting from <see cref="T:Xtensive.Orm.Building.Module"/> instead.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IModule.OnBuilt(Xtensive.Orm.Domain)">
            <summary>
            Called when 'complex' build process is completed.
            </summary>
            <param name="domain">The built domain.</param>
        </member>
        <member name="M:Xtensive.Orm.IModule.OnDefinitionsBuilt(Xtensive.Orm.Building.BuildingContext,Xtensive.Orm.Building.Definitions.DomainModelDef)">
            <summary>
            Called when the build of <see cref="T:Xtensive.Orm.Building.Definitions.DomainModelDef"/> is completed.
            </summary>
            <param name="context">The domain building context.</param>
            <param name="model">The domain model definition.</param>
        </member>
        <member name="M:Xtensive.Orm.IModule2.OnAutoGenericsBuilt(Xtensive.Orm.Building.BuildingContext,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Called when automatic generic instances are generated.
            </summary>
            <param name="context">Current <see cref="T:Xtensive.Orm.Building.BuildingContext"/> instance.</param>
            <param name="autoGenerics">Automatic generic instances.</param>
        </member>
        <member name="M:Xtensive.Orm.Building.Module.OnDefinitionsBuilt(Xtensive.Orm.Building.BuildingContext,Xtensive.Orm.Building.Definitions.DomainModelDef)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Building.Module.OnAutoGenericsBuilt(Xtensive.Orm.Building.BuildingContext,System.Collections.Generic.ICollection{System.Type})">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Building.Module.OnBuilt(Xtensive.Orm.Domain)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Building.FixupActions.CopyKeyFieldsAction.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.FullTextAttribute">
            <summary>
            Indicates that persistent property must be included into full-text index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.FullTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FullTextAttribute.Analyzed">
            <summary>
            Gets or sets a value indicating whether content of the field marked by this
            attribute must be analyzed or not. 
            "Analyzed" implies the content must be splat into a sequence of words; 
            otherwise it will be represented as a single word in index.
            Default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FullTextAttribute.Configuration">
            <summary>
            Gets the configuration name for word-breaker and stemmer. 
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FullTextAttribute.DataTypeField">
            <summary>
            Gets or sets the field name that contains type of full text field.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.ConfigurationBase">
            <summary>
            Base class for configuration.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.ConfigurationBase.Validate">
            <summary>
            Validates the configuration.
            Should always be invoked by <see cref="M:Xtensive.Core.ILockable.Lock(System.Boolean)"/> method 
            before actually locking the configuration.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.ConfigurationBase.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.ConfigurationBase.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.ConfigurationBase.CreateClone">
            <summary>
            Creates a new instance of this class.
            Used by <see cref="M:Xtensive.Orm.Configuration.ConfigurationBase.Clone"/> method implementation.
            </summary>
            <returns>New instance of this class.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.ConfigurationBase.CopyFrom(Xtensive.Orm.Configuration.ConfigurationBase)">
            <summary>
            Copies the properties from the <paramref name="source"/>
            configuration to this one.
            Used by <see cref="M:Xtensive.Orm.Configuration.ConfigurationBase.Clone"/> method implementation.
            </summary>
            <param name="source">The configuration to copy properties from.</param>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement">
            <summary>
            Database ignore element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/>.
            </summary>
            <returns>Result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.Identifier">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.Database">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Database" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.Schema">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Schema" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.Table">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Table" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.IgnoreRuleElement.Column">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Column"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.IgnoreRule">
            <summary>
            Ignore rules for presistent types
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRule.ToString">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRule.Clone">
            <summary>
            Create clone of this instance
            </summary>
            <returns>Cloned instance</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRule.#ctor">
            <summary>
            Create new instance of this class
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRule.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create new instance of this class
            </summary>
            <param name="database">Value for <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Database"/></param>
            <param name="schema">Value for <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Schema"/></param>
            <param name="table">Value for <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Table"/></param>
            <param name="column">Value for <see cref="P:Xtensive.Orm.Configuration.IgnoreRule.Column"/></param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.IgnoreRule.Database">
            <summary>
            Gets database that is assigned to ignored type when this rule is applied
            If this property is set to null or empty value <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultDatabase"/>
            is used instead.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.IgnoreRule.Schema">
            <summary>
            Get schema that is assigned to ignored type when this rule is applied
            If this property is set to null or empty value <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema"/>
            is used instead.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.IgnoreRule.Table">
            <summary>
            Gets table condition.
            When type is declared in the specified table, this rule is applied.
            If this property is set to null value, any table matches this rule.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.IgnoreRule.Column">
            <summary>
            Gets column condition
            When type is declared in the specified column, this rule is applied.
            If this property is set to null value, any culumn matches this rule.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.IgnoreRuleCollection">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/> collection
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleCollection.IgnoreTable(System.String)">
            <summary>
            Adds to collectionn <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/> for targeted specified <paramref name="tableName"/>.
            </summary>
            <param name="tableName">Table to ignore</param>
            <returns><see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/> construction flow</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleCollection.IgnoreColumn(System.String)">
            <summary>
            Adds to collection <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/> for targeted specified <paramref name="columnName"/>. 
            </summary>
            <param name="columnName">Column to ignore</param>
            <returns><see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/> construction flow</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleCollection.Clone">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleCollection.Lock(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.IIgnoreRuleConstructionFlow.WhenDatabase(System.String)">
            <summary>
            Adds tasgeted specified <paramref name="databaseName"/> to <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/>
            </summary>
            <param name="databaseName">Value to add</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IIgnoreRuleConstructionFlow.WhenSchema(System.String)">
            <summary>
            Adds tasgeted specified <paramref name="schemaName"/> to <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/>
            </summary>
            <param name="schemaName">Value to add</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IIgnoreRuleConstructionFlow.WhenTable(System.String)">
            <summary>
            Adds tasgeted specified <paramref name="tableName"/> to <see cref="T:Xtensive.Orm.Configuration.IgnoreRule"/>
            </summary>
            <param name="tableName">Value to add</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleConstructionFlow.WhenDatabase(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleConstructionFlow.WhenSchema(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleConstructionFlow.WhenTable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IgnoreRuleConstructionFlow.#ctor(Xtensive.Orm.Configuration.IgnoreRule)">
            <summary>
            Create instance of <see cref="T:Xtensive.Orm.Configuration.IgnoreRuleConstructionFlow"/>
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Xtensive.Orm.ConflictHandlingMethod">
            <summary>
            Possible ways of handling conflicts (i.e. multiple compilers for same method)
            for <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/> 
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ConflictHandlingMethod.ReportError">
            <summary>
            <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/> should throw exception if conflict is found.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ConflictHandlingMethod.KeepOld">
            <summary>
            <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/> should keep existing compiler for specified method.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ConflictHandlingMethod.Overwrite">
            <summary>
            <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/> should overwrite existing compiler with newly found compiler.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ConflictHandlingMethod.Default">
            <summary>
            Default action for <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/> if conflict is found.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IQueryPreprocessor2">
            <summary>
            Extended version of <see cref="T:Xtensive.Orm.IQueryPreprocessor"/>.
            Consider inheriting from <see cref="T:Xtensive.Orm.Linq.QueryPreprocessor"/> instead.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IQueryPreprocessor">
            <summary>
            LINQ query preprocessor contract.
            Consider inheriting from <see cref="T:Xtensive.Orm.Linq.QueryPreprocessor"/> instead.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IDomainService">
            <summary>
            A tagging interface marking any <see cref="T:Xtensive.Orm.Domain"/>-level service.
            Domain-level services are accessible via <see cref="P:Xtensive.Orm.Domain.Services"/> property.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IQueryPreprocessor.Apply(System.Linq.Expressions.Expression)">
            <summary>
            Applies the preprocessor to the specified query.
            </summary>
            <param name="query">The query to apply the preprocessor to.</param>
            <returns>Application (preprocessing) result.</returns>
        </member>
        <member name="M:Xtensive.Orm.IQueryPreprocessor.IsDependentOn(Xtensive.Orm.IQueryPreprocessor)">
            <summary>
            Determines whether this query preprocessor is dependent on the <paramref name="other"/> one.
            </summary>
            <param name="other">The other query preprocessor.</param>
            <returns>
            <see langword="true"/> if this query preprocessor 
            is dependent on <paramref name="other"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.IQueryPreprocessor2.Apply(Xtensive.Orm.Session,System.Linq.Expressions.Expression)">
            <summary>
             Applies the preprocessor to the specified query.
             </summary>
            <param name="session">Current session.</param>
            <param name="query">The query to apply the preprocessor to.</param>
            <returns>Application (preprocessing) result.</returns>
        </member>
        <member name="T:Xtensive.Orm.Linq.QueryPreprocessor">
            <summary>
            Standard implementation of LINQ query preprocessor.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryPreprocessor.Apply(Xtensive.Orm.Session,System.Linq.Expressions.Expression)">
            <summary>
             Applies the preprocessor to the specified query.
             </summary>
            <param name="session">Current session.</param>
            <param name="query">The query to apply the preprocessor to.</param>
            <returns>Application (preprocessing) result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryPreprocessor.Apply(System.Linq.Expressions.Expression)">
            <summary>
            Applies the preprocessor to the specified query.
            This method is not called by DataObjects.Net
            and expected to throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="query">The query to apply the preprocessor to.</param>
            <returns>This method does not return.</returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryPreprocessor.IsDependentOn(Xtensive.Orm.IQueryPreprocessor)">
            <summary>
            Determines whether this query preprocessor is dependent on the <paramref name="other"/> one.
            </summary>
            <param name="other">The other query preprocessor.</param>
            <returns>
            <see langword="true"/> if this query preprocessor 
            is dependent on <paramref name="other"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Orm.Internals.CompletableScope`1">
            <summary>
            A <see cref="T:Xtensive.Orm.ICompletableScope"/> implementation allowing to use delegates
            to define its logic.
            </summary>
            <typeparam name="T">The type of data passed between calls.</typeparam>
        </member>
        <member name="T:Xtensive.Orm.ICompletableScope">
            <summary>
            Contract for <see cref="T:System.IDisposable"/> implementation providing <see cref="M:Xtensive.Orm.ICompletableScope.Complete"/> method.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ICompletableScope.Complete">
            <summary>
            Completes this scope. 
            This method can be called multiple times; if so, only the first call makes sense.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ICompletableScope.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is <see cref="M:Xtensive.Orm.ICompletableScope.Complete"/>d.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.CompletableScope`1.Complete">
            <summary>
            Completes this scope by invoking "on Complete" action, if it was provided on construction.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.CompletableScope`1.#ctor(`0,System.Action{`0,System.Boolean})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="data">The data.</param>
            <param name="onDispose">"On <see cref="M:Xtensive.Orm.Internals.CompletableScope`1.Dispose"/>" handler. 
            Boolean argument there is value of <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.CompletableScope`1.#ctor(`0,System.Action{`0},System.Action{`0,System.Boolean})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="data">The data.</param>
            <param name="onComplete">"On <see cref="M:Xtensive.Orm.Internals.CompletableScope`1.Complete"/>" handler.</param>
            <param name="onDispose">"On <see cref="M:Xtensive.Orm.Internals.CompletableScope`1.Dispose"/>" handler.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.CompletableScope`1.Dispose">
            <summary>
            Disposes this scope by invoking "on Dispose" action, if it was provided on construction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.CompletableScope`1.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is <see cref="M:Xtensive.Orm.Internals.CompletableScope`1.Complete"/>d.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.IDatabaseConfigurationFlow">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/> construction flow.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IDatabaseConfigurationFlow.WithRealName(System.String)">
            <summary>
            Sets <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.RealName"/> for current <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/>.
            </summary>
            <param name="realName">Real name.</param>
            <returns>Configuration flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IDatabaseConfigurationFlow.WithTypeIdRange(System.Int32,System.Int32)">
            <summary>
            Sets <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.MinTypeId"/> for current <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/>.
            </summary>
            <param name="minValue">Minimal type ID value.</param>
            <param name="maxValue">Maximal type ID value.</param>
            <returns>Configuration flow.</returns>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat">
            <summary>
            Format of schema difference in <see cref="T:Xtensive.Orm.SchemaSynchronizationException"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Detailed">
            <summary>
            Detailed format, all relevant information is shown.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Brief">
            <summary>
            Brief format, full schema difference is omitted.
            This mode emulates old exception format from DataObjects.Net prior to 4.5
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Default">
            <summary>
            Default format is <see cref="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Detailed"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DatabaseConfiguration">
            <summary>
            Database configuration entry.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfiguration.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="name">Database name.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DatabaseConfiguration.Name">
            <summary>
            Gets or sets logical database name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DatabaseConfiguration.RealName">
            <summary>
            Gets or sets physical database name.
            If this value is not set <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.Name"/>
            is used as physical database name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DatabaseConfiguration.MinTypeId">
            <summary>
            Gets or sets type ID minimal value
            for types mapped to this database.
            Default value is 100.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DatabaseConfiguration.MaxTypeId">
            <summary>
            Gets or sets type ID maximal value
            for types mapped to this database.
            Default value is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DatabaseConfigurationCollection">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfigurationCollection.Add(System.String)">
            <summary>
            Adds database configuration with the specified <paramref name="name"/>
            and starts <see cref="T:Xtensive.Orm.Configuration.IDatabaseConfigurationFlow"/>.
            </summary>
            <param name="name">Database name.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfigurationCollection.Clone">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.DatabaseConfigurationCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement">
            <summary>
            Key generator element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/>.
            </summary>
            <returns>Result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.Name">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.Database">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Database" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.Seed">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Seed" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.KeyGeneratorConfigurationElement.CacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.CacheSize" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/> construction flow.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow.WithSeed(System.Int64)">
            <summary>
            Sets <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Seed"/>
            for current <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/>.
            </summary>
            <param name="seed">Key generator seed.</param>
            <returns>Configuration flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow.WithCacheSize(System.Int64)">
            <summary>
            Sets <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.CacheSize"/>
            for current <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/>.
            </summary>
            <param name="cacheSize">Key generator cache size.</param>
            <returns>Configuration flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow.ForDatabase(System.String)">
            <summary>
            Sets <see cref="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Database"/>
            for current <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/>.
            </summary>
            <param name="database">Key generator database.</param>
            <returns>Configuration flow.</returns>
        </member>
        <member name="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration">
            <summary>
            Key generator definition.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.#ctor(System.String)">
            <summary>
            Creates new instance of this class
            </summary>
            <param name="name">Name of the key generator.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Name">
            <summary>
            Gets or sets key generator name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Database">
            <summary>
            Gets database for key generator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.Seed">
            <summary>
            Gets or sets seed (initial value) for key generator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.KeyGeneratorConfiguration.CacheSize">
            <summary>
            Gets cache size (increment) for key generator.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.KeyGeneratorConfigurationCollection">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfigurationCollection.Add(System.String)">
            <summary>
            Adds new <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/> to this collection
            and starts <see cref="T:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow"/>.
            </summary>
            <param name="name">Name of the key generator.</param>
            <returns>Key generator configuration flow</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfigurationCollection.Add``1">
            <summary>
            Adds new <see cref="T:Xtensive.Orm.Configuration.KeyGeneratorConfiguration"/> to this collection
            and starts <see cref="T:Xtensive.Orm.Configuration.IKeyGeneratorConfigurationFlow"/>.
            </summary>
            <typeparam name="TKeyType">Key value type (like <see cref="T:System.Int32"/> or <see cref="T:System.Int64"/>).</typeparam>
            <returns>Key generator configuration flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfigurationCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.KeyGeneratorConfigurationCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Configuration.MappingRule">
            <summary>
            Mapping rule for persistent types.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRule.ToString">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRule.Clone">
            <summary>
            Creates a clone of this instance.
            </summary>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRule.#ctor">
            <summary>
            Creates new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRule.#ctor(System.Reflection.Assembly,System.String,System.String,System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="assembly">Value for <see cref="P:Xtensive.Orm.Configuration.MappingRule.Assembly"/>.</param>
            <param name="namespace">Value for <see cref="P:Xtensive.Orm.Configuration.MappingRule.Namespace"/>.</param>
            <param name="database">Value for <see cref="P:Xtensive.Orm.Configuration.MappingRule.Database"/>.</param>
            <param name="schema">Value for <see cref="P:Xtensive.Orm.Configuration.MappingRule.Schema"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.MappingRule.Assembly">
            <summary>
            Gets assembly condition.
            When type is declared in the specified assembly, this rule is applied.
            If this property is set to null value, any assembly matches this rule.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.MappingRule.Namespace">
            <summary>
            Gets namespace condition.
            When type has specified namespace or any subnamespace, this rule is applied.
            If this property is set to null value, any namespace matches this rule.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.MappingRule.Database">
            <summary>
            Gets database that is assigned to mapped type when this rule is applied.
            If this property is set to null or empty value <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultDatabase"/>
            is used instead.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.MappingRule.Schema">
            <summary>
            Gets schema that is assigned to mapped type when this rule is applied.
            If this property is set to null or empty value <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema"/>
            is used instead.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.MappingRuleCollection">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.MappingRule"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRuleCollection.Map(System.Reflection.Assembly)">
            <summary>
            Starts construction of <see cref="T:Xtensive.Orm.Configuration.MappingRule"/>
            for the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">Assembly to map from.</param>
            <returns><see cref="T:Xtensive.Orm.Configuration.MappingRule"/> construction flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRuleCollection.Map(System.String)">
            <summary>
            Starts construction if <see cref="T:Xtensive.Orm.Configuration.MappingRule"/>
            for the specified <paramref name="namespace"/>.
            </summary>
            <param name="namespace"></param>
            <returns><see cref="T:Xtensive.Orm.Configuration.MappingRule"/> construction flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRuleCollection.Map(System.Reflection.Assembly,System.String)">
            <summary>
            Starts construction of <see cref="T:Xtensive.Orm.Configuration.MappingRule"/>
            for the specified <paramref name="namespace"/>
            in the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">Assembly to map from.</param>
            <param name="namespace">Namespace to map from.</param>
            <returns><see cref="T:Xtensive.Orm.Configuration.MappingRule"/> construction flow.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRuleCollection.Clone">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.MappingRuleCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Configuration.IMappingRuleConstructionFlow">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.MappingRule"/> construction flow.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IMappingRuleConstructionFlow.ToDatabase(System.String)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Configuration.MappingRule"/> targeting specified <paramref name="database"/>.
            </summary>
            <param name="database">Database to map to.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IMappingRuleConstructionFlow.ToSchema(System.String)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Configuration.MappingRule"/> targeting specified <paramref name="schema"/>.
            </summary>
            <param name="schema">Schema to map to.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.IMappingRuleConstructionFlow.To(System.String,System.String)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Configuration.MappingRule"/> targeting specified <paramref name="schema"/>
            in the specified <paramref name="database"/>.
            </summary>
            <param name="database">Database to map to.</param>
            <param name="schema">Schema to map to.</param>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement">
            <summary>
            Database alias element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/>.
            </summary>
            <returns>Result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.Name">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.RealName">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.RealName" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.MinTypeId">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.MinTypeId" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DatabaseConfigurationElement.MaxTypeId">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DatabaseConfiguration.MaxTypeId" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.MappingRuleElement">
            <summary>
            Database mapping element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.MappingRuleElement.ToNative">
            <summary>
            Converts this instance to corresponding <see cref="T:Xtensive.Orm.Configuration.MappingRule"/>.
            </summary>
            <returns>Result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.MappingRuleElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.MappingRuleElement.Assembly">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.MappingRule.Assembly" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.MappingRuleElement.Namespace">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.MappingRule.Namespace" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.MappingRuleElement.Database">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.MappingRule.Database" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.MappingRuleElement.Schema">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.MappingRule.Schema" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ConnectionInfo">
            <summary>
            A wrapper representing connection information.
            Connection can be specified by either <see cref="P:Xtensive.Orm.ConnectionInfo.ConnectionString"/> or <see cref="P:Xtensive.Orm.ConnectionInfo.ConnectionUrl"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.Equals(Xtensive.Orm.ConnectionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.op_Equality(Xtensive.Orm.ConnectionInfo,Xtensive.Orm.ConnectionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.op_Inequality(Xtensive.Orm.ConnectionInfo,Xtensive.Orm.ConnectionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="provider">A value for <see cref="P:Xtensive.Orm.ConnectionInfo.Provider"/>.</param>
            <param name="connectionString">A value for <see cref="P:Xtensive.Orm.ConnectionInfo.ConnectionString"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.#ctor(Xtensive.Orm.UrlInfo)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="connectionUrl">A value for <see cref="P:Xtensive.Orm.ConnectionInfo.ConnectionUrl"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.ConnectionInfo.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="connectionUrl">The connection URL.</param>
        </member>
        <member name="P:Xtensive.Orm.ConnectionInfo.Provider">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ConnectionInfo.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ConnectionInfo.ConnectionUrl">
            <summary>
            Gets the connection URL.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.DbCommandEventArgs">
            <summary>
            Events args for <see cref="E:Xtensive.Orm.SessionEventAccessor.DbCommandExecuting"/>
            and <see cref="E:Xtensive.Orm.SessionEventAccessor.DbCommandExecuted"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DbCommandEventArgs.#ctor(System.Data.Common.DbCommand)">
            <summary>
            Initializes a new instance of this class.
            <param name="command">Executed command.</param>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.DbCommandEventArgs.Command">
            <summary>
            Gets executed command.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.StorageExceptionInfo">
            <summary>
            Extended information about <see cref="T:Xtensive.Orm.StorageException"/>.
            All fields are optional.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.StorageExceptionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.StorageExceptionInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Orm.StorageExceptionInfo.Type"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.StorageExceptionInfo.Field"/>.</param>
            <param name="value">Value for <see cref="P:Xtensive.Orm.StorageExceptionInfo.Value"/>.</param>
            <param name="constraint">Value for <see cref="P:Xtensive.Orm.StorageExceptionInfo.Constraint"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.StorageExceptionInfo.Type">
            <summary>
            Type in which error occured (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageExceptionInfo.Field">
            <summary>
            Field in which error occured (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageExceptionInfo.Value">
            <summary>
            Value that caused error (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.StorageExceptionInfo.Constraint">
            <summary>
            Constraint that was violated (if any).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.LinqExtensionRegistration">
            <summary>
            Registration entry for LINQ extension.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistration.#ctor(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="member">Value for <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Member"/>.</param>
            <param name="substitution">Value for <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Substitution"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistration.#ctor(System.Reflection.MemberInfo,System.Func{System.Reflection.MemberInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="member">Value for <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Member"/>.</param>
            <param name="compiler">Value for <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Compiler"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Member">
            <summary>
            Gets member this extension is intended for.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Substitution">
            <summary>
            Gets substitution that is performed when LINQ translator encouters <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Member"/> access.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Compiler">
            <summary>
            Gets action that is performed when LINQ translator encouters <see cref="P:Xtensive.Orm.Configuration.LinqExtensionRegistration.Member"/> access.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.LinqExtensionRegistry">
            <summary>
            Registry of custom compilers used by LINQ translator.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.Register(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Registers <paramref name="substitution"/> as a substitution for <paramref name="member"/>.
            </summary>
            <param name="member">Member to register substitution for.</param>
            <param name="substitution">Substitution</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.Register(System.Reflection.MemberInfo,System.Func{System.Reflection.MemberInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression})">
            <summary>
            Registers <paramref name="compiler"/> as a compiler for <paramref name="member"/>.
            </summary>
            <param name="member">Member to register compiler for.</param>
            <param name="compiler">Compiler.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.LinqExtensionRegistry.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LinqExtensionRegistry.Substitutions">
            <summary>
            Gets all registered substitutions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.LinqExtensionRegistry.Compilers">
            <summary>
            Gets all registered compilers.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.KeyGenerator">
            <summary>
            Key generator contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyGenerator.Initialize(Xtensive.Orm.Domain,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Initializes key generator instance in the specified <paramref name="ownerDomain" />.
            Only keys that have specified <paramref name="keyTupleDescriptor" /> will be requested.
            </summary>
            <param name="ownerDomain">Domain to use.</param>
            <param name="keyTupleDescriptor">Tuple descriptor of requested keys.</param>
        </member>
        <member name="M:Xtensive.Orm.KeyGenerator.GenerateKey(Xtensive.Orm.Model.KeyInfo,Xtensive.Orm.Session)">
            <summary>
            Generates new key for the specified <paramref name="keyInfo"/>.
            </summary><param name="keyInfo"><see cref="T:Xtensive.Orm.Model.KeyInfo"/> that defines key to generate.
            </param><param name="session">Current session.</param>
            <returns>Generated key value.</returns>
        </member>
        <member name="T:Xtensive.Orm.TemporaryKeyGenerator">
            <summary>
            Temporary key generator generates local keys when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.LazyKeyGeneration"/> is enabled.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TemporaryKeyGenerator.IsTemporaryKey(Xtensive.Tuples.Tuple)">
            <summary>
            Checks if the specified key is local.
            </summary>
            <param name="keyTuple">Key tuple to check</param>
            <returns>true, if the specified <paramref name="keyTuple" /> represents local key;
            otherwise, false.</returns>
        </member>
        <member name="T:Xtensive.Orm.IQueryRootBuilder">
            <summary>
            A builder of LINQ query roots.
            This interface allows to override values returned by <see cref="M:Xtensive.Orm.QueryEndpoint.All``1"/>
            and <see cref="M:Xtensive.Orm.QueryEndpoint.All(System.Type)"/> methods.
            Use <see cref="M:Xtensive.Orm.Session.OverrideQueryRoot(Xtensive.Orm.IQueryRootBuilder)"/> to attach <see cref="T:Xtensive.Orm.IQueryRootBuilder"/>
            to session. Insead of directly implementing this interface you may consider
            inheriting <see cref="T:Xtensive.Orm.QueryRootBuilder"/> instead.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IQueryRootBuilder.BuildRootExpression(System.Type)">
            <summary>
            Builds root expression for querying specified entity of the specified type.
            </summary>
            <param name="entityType">Type of entity to query.</param>
            <returns>Expression containing query for entity of the specified type.</returns>
        </member>
        <member name="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider">
            <summary>
            Base interface for compiler providers.
            See <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider.GetUntypedCompiler(System.Reflection.MemberInfo)">
            <summary>
            Gets untyped compiler for <see paramref="target"/>.
            </summary>
            <param name="target">Member to get compiler for.</param>
            <returns>Compiler for <see paramref="target"/></returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider.RegisterCompilers(System.Type)">
            <summary>
            Registers compilers found in specified type.
            Conflicts are resolved as <see cref="F:Xtensive.Orm.ConflictHandlingMethod.ReportError"/> were specified.
            </summary>
            <param name="compilerContainer">Type to search for compiler methods.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider.RegisterCompilers(System.Type,Xtensive.Orm.ConflictHandlingMethod)">
            <summary>
            Registers compilers found in specified type.
            In case of multiple compilers exist for the same <see cref="T:System.Reflection.MethodInfo"/>
            implementor should use specified <see cref="T:Xtensive.Orm.ConflictHandlingMethod"/>.
            </summary>
            <param name="compilerContainer">Type to search for compiler methods.</param>
            <param name="conflictHandlingMethod">Determines how provider would resolve conflicts.</param>
        </member>
        <member name="P:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider.ExpressionType">
            <summary>
            Gets the type of expression.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1">
            <summary>
            Interface for compiler providers.
            </summary>
            <typeparam name="T">Type which compiler should produce.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1.RegisterCompilers(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.MemberInfo,System.Func{System.Reflection.MemberInfo,`0,`0[],`0}}})">
            <summary>
            Registers compilers for the corresponding members.
            Conflicts are resolved as <see cref="F:Xtensive.Orm.ConflictHandlingMethod.ReportError"/> were specified.
            </summary>
            <param name="compilerDefinitions">Compiler definitions,
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a target member,
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is a corresponding compiler.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1.RegisterCompilers(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.MemberInfo,System.Func{System.Reflection.MemberInfo,`0,`0[],`0}}},Xtensive.Orm.ConflictHandlingMethod)">
            <summary>
            Registers compilers for the corresponding members.
            In case of multiple compilers exist for the same <see cref="T:System.Reflection.MethodInfo"/>
            implementor should use specified <see cref="T:Xtensive.Orm.ConflictHandlingMethod"/>.
            </summary>
            <param name="compilerDefinitions">Compiler definitions,
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a target member,
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is a corresponding compiler.</param>
            <param name="conflictHandlingMethod">Conflict handling method.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1.GetCompiler(System.Reflection.MemberInfo)">
            <summary>
            Finds compiler for specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MemberInfo"/> to search compiler for.</param>
            <returns>compiler associated with <see cref="T:System.Reflection.MethodInfo"/>
            or <see langword="null"/> if compiler is not found.</returns>
        </member>
        <member name="T:Xtensive.Orm.Linq.MemberCompilation.MemberCompilerProviderFactory">
            <summary>
            Factory for <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.MemberCompilerProviderFactory.Create(System.Type)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider"/>.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.MemberCompilation.MemberCompilerProviderFactory.Create``1">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Orm.Linq.MemberCompilation.IMemberCompilerProvider`1"/>.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Building.SystemModule.OnBuilt(Xtensive.Orm.Domain)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.SystemModule.OnDefinitionsBuilt(Xtensive.Orm.Building.BuildingContext,Xtensive.Orm.Building.Definitions.DomainModelDef)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.DatabaseInfo">
            <summary>
            Database info.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.DatabaseInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.DatabaseInfo.ReferencedDatabases">
            <summary>
            Gets references databases
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DatabaseInfo.Configuration">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Configuration.DatabaseConfiguration"/> for this database.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistParameterBindingType">
            <summary>
            Possible types of <see cref="T:Xtensive.Orm.Providers.PersistParameterBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.PersistParameterBindingType.Regular">
            <summary>
            Regular parameter. Parameter value is obtained thru difference tuple.
            No special handling of null is performed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.PersistParameterBindingType.VersionFilter">
            <summary>
            Version parameter. Parameter value is obtained thru original tuple.
            Null values are treated specially similar to <see cref="F:Xtensive.Orm.Providers.QueryParameterBindingType.SmartNull"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SessionHandler">
            <summary>
            Base <see cref="P:Xtensive.Orm.Providers.SessionHandler.Session"/> handler class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.Prefetch(Xtensive.Orm.Key,Xtensive.Orm.Model.TypeInfo,System.Collections.Generic.IList{Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor})">
            <summary>
            Register the task prefetching fields' values of the <see cref="T:Xtensive.Orm.Entity"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type of the <see cref="T:Xtensive.Orm.Entity"/>.</param>
            <param name="descriptors">The descriptors of fields which values will be loaded.</param>
            <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer"/> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ExecutePrefetchTasks(System.Boolean)">
            <summary>
            Executes registered prefetch tasks.
            </summary>
            <param name="skipPersist">if set to <see langword="true"/> persist is not performed.</param>
            <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer"/> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ExecutePrefetchTasks">
            <summary>
            Executes registered prefetch tasks.
            </summary>
            <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer"/> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.FetchEntityState(Xtensive.Orm.Key)">
            <summary>
            Fetches an <see cref="T:Xtensive.Orm.EntityState"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The key of fetched <see cref="T:Xtensive.Orm.EntityState"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.FetchField(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Fetches the field of an <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field to fetch.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.FetchEntitySet(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
            <summary>
            Fetches the entity set.
            </summary>
            <param name="ownerKey">The owner key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.GetRealHandler">
            <summary>
            Gets the real session handler (the final handler in chain of all <see cref="T:Xtensive.Orm.Providers.ChainingSessionHandler"/>s).
            </summary>
            <returns>The real session handler.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
            <summary>
            Executes the specified query tasks.
            </summary>
            <param name="queryTasks">The query tasks to execute.</param>
            <param name="allowPartialExecution">if set to <see langword="true"/> partial execution is allowed.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},Xtensive.Orm.ExecutionBehavior)">
            <summary>
            Executes the specified query tasks.
            </summary>
            <param name="queryTasks">The query tasks to execute.</param>
            <param name="behavior">Defines behavior of tasks' execution.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ExecuteQueryTasksAsync(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},Xtensive.Orm.ExecutionBehavior,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query tasks asynchronously.
            </summary>
            <param name="queryTasks">The query tasks to execute.</param>
            <param name="behavior">Defines behavior of queries' execution.</param>
            <param name="token"><see cref="T:System.Threading.CancellationToken">Cancellation token</see> to cancel task.</param>
            <returns>Started task.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.SetCommandTimeout(System.Nullable{System.Int32})">
            <summary>
            Sets command timeout for all <see cref="T:System.Data.IDbCommand"/> created within current instance.
            </summary>
            <param name="commandTimeout">The command timeout.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
            <summary>
            Persists changed entities.
            </summary>
            <param name="registry">The registry.</param>
            <param name="allowPartialExecution">if set to <see langword="true"/> dirty flush is allowed.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,Xtensive.Orm.ExecutionBehavior)">
            <summary>
            Persists changed entities.
            </summary>
            <param name="registry"></param>
            <param name="executionBehavior"></param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.AddSystemServices(System.Collections.Generic.ICollection{Xtensive.IoC.ServiceRegistration})">
            <summary>
            Adds system session service registration entries.
            </summary>
            <param name="r">The list of service registrations.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.GetReferencesTo(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Gets the references to specified entity.
            </summary>
            <param name="target">The target.</param>
            <param name="association">The association.</param>
            <returns>References.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.GetReferencesFrom(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Gets the references from specified entity.
            </summary>
            <param name="owner">The owner.</param>
            <param name="association">The association.</param>
            <returns>References.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
            <summary>
            Opens the transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.CompletingTransaction(Xtensive.Orm.Transaction)">
            <summary>
            Clears transaction-related caches.
            This method is called for non-actual transactions as well.
            </summary>    
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
            <summary>
            Commits the transaction.
            This method is invoked for actual transactions only.
            </summary>    
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
            <summary>
            Rollbacks the transaction.
            This method is invoked for actual transactions only.
            </summary>    
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
            <summary>
            Creates the savepoint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
            <summary>
            Releases the savepoint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
            <summary>
            Rollbacks to savepoint.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SessionHandler.Handlers">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Providers.HandlerAccessor"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SessionHandler.Session">
            <summary>
            Gets the current <see cref="P:Xtensive.Orm.Providers.SessionHandler.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SessionHandler.TransactionIsStarted">
            <summary>
            Gets a value indicating whether transaction is actually started.
            This property indicates presence of outermost transaction only.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableBackEnd.CreateTemporaryTable(Xtensive.Sql.Model.Schema,System.String)">
            <summary>
            Creates the temporary table with the specified name.
            </summary>
            <param name="schema">The schema to create table in.</param>
            <param name="tableName">Name of the table.</param>
            <returns>Created table.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableBackEnd.InitializeTable(Xtensive.Orm.Providers.EnumerationContext,Xtensive.Orm.Providers.TemporaryTableDescriptor)">
            <summary>
            Initializes the table. This is called once per session on a first acquire request.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableBackEnd.AcquireTable(Xtensive.Orm.Providers.EnumerationContext,Xtensive.Orm.Providers.TemporaryTableDescriptor)">
            <summary>
            Gets the lock on a temporary table.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableBackEnd.ReleaseTable(Xtensive.Orm.Providers.EnumerationContext,Xtensive.Orm.Providers.TemporaryTableDescriptor)">
            <summary>
            Releases the lock on a temporary table.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TargetKind">
            <summary>
            Flags for specifying kind of compilable members.
            You should provide only one flag possibly OR'ed with <see cref="F:Xtensive.Orm.TargetKind.Static"/> flag.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.PropertyGet">
            <summary>
            Compilable member is a property getter.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.PropertySet">
            <summary>
            Compilable member is as property setter.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.Field">
            <summary>
            Compilable member is a field (compiler translates read access).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.Method">
            <summary>
            Compilable member is a regular method.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.Constructor">
            <summary>
            Compilable member is a constuctor.
            You should NOT specify <see cref="F:Xtensive.Orm.TargetKind.Static"/> flag with this flag.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.Static">
            <summary>
            Compilable member is <see langword="static"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TargetKind.Operator">
            <summary>
            Compilable member is an overloaded operator.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.SchemaMappedNode">
            <summary>
            A <see cref="T:Xtensive.Orm.Model.Node"/> that is mapped to existing database schema node.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.MappedNode">
            <summary>
            A <see cref="T:Xtensive.Orm.Model.Node"/> that can be mapped to existing named node.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.MappedNode.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.MappedNode.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.MappedNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The name of this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.MappedNode.MappingName">
            <summary>
            Gets or sets name of the database object this node maps to.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.SchemaMappedNode.#ctor">
            <summary>
            Creates new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.SchemaMappedNode.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="name">Node name</param>
        </member>
        <member name="P:Xtensive.Orm.Model.SchemaMappedNode.MappingDatabase">
            <summary>
            Gets or sets database this node is mapped to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.SchemaMappedNode.MappingSchema">
            <summary>
            Gets or sets schema this node is mapped to.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.DomainHandler">
            <summary>
            <see cref="T:Xtensive.Orm.Domain"/>-level handler.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.DomainBoundHandler">
            <summary>
            Abstract base class for any storage handler.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.Handler">
            <summary>
            Base class for any storage handler.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainBoundHandler.Handlers">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Providers.HandlerAccessor"/> providing other available handlers.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.DomainHandler.GetMemberCompilerProvider``1">
            <summary>
            Gets the member compiler provider by its type parameter.
            </summary>
            <typeparam name="T">The type of member compiler provider type parameter.</typeparam>
            <returns>
            Found member compiler provider;
            <see langword="null"/>, if it was not found.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.DomainHandler.CreateCompiler(Xtensive.Orm.Providers.CompilerConfiguration)">
            <summary>
            Creates the compiler.
            </summary>
            <param name="configuration">Compiler configuration to use.</param>
            <returns>A new compiler.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.DomainHandler.CreatePreCompiler(Xtensive.Orm.Providers.CompilerConfiguration)">
            <summary>
            Creates the <see cref="T:Xtensive.Orm.Rse.Compilation.IPreCompiler"/>.
            </summary>
            <param name="configuration">Compiler configuration to use.</param>
            <returns>A new pre-compiler.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.DomainHandler.CreatePostCompiler(Xtensive.Orm.Providers.CompilerConfiguration,Xtensive.Orm.Rse.Compilation.ICompiler)">
            <summary>
            Creates the <see cref="T:Xtensive.Orm.Rse.Compilation.IPostCompiler"/>.
            </summary>
            <param name="configuration">Compiler configuration to use.</param>
            <param name="compiler">Currently used compiler instance.</param>
            <returns>A new post-compiler.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.DomainHandler.GetProviderCompilerContainers">
            <summary>
            Gets compiler containers specific to current storage provider.
            </summary>
            <returns>Compiler containers for current provider.</returns>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainHandler.Domain">
            <summary>
            Gets the domain this handler is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainHandler.CompilationService">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Providers.CompilationService"/>
            associated with the domain.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainHandler.QueryPreprocessors">
            <summary>
            Gets the ordered sequence of query preprocessors to apply to any LINQ query.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainHandler.TemporaryTableManager">
            <summary>
            Gets the temporary table manager.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.DomainHandler.CommandProcessorFactory">
            <summary>
            Gets the command processor factory.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.EnumerationContext">
            <summary>
            An implementation of <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/> 
            suitable for storage.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.EnumerationContext">
            <summary>
            The single enumeration attempt context for the <see cref="T:Xtensive.Orm.Rse.Providers.ExecutableProvider"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.BeginEnumeration">
            <summary>
            Should be called before enumeration of your <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.SetValue``1(System.Object,System.String,``0)">
            <summary>
            Caches the value in the current <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="name">The cache name.</param>
            <param name="value">The value to cache.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.GetValue``1(System.Object,System.String)">
            <summary>
            Gets the cached value from the current <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="name">The cache name.</param>
            <returns>
            Cached value with the specified key;
            <see langword="null"/>, if no cached value is found, or it is already expired.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.CheckOptions(Xtensive.Orm.Rse.Providers.EnumerationContextOptions)">
            <summary>
            Checks whenever the specified option set is enable for this context.
            </summary>
            <param name="requiredOptions">The options to check.</param>
            <returns><see langword="true"/> if the speicifed options set is enable in this context;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.EnsureIsActive">
            <summary>
            Ensures the context is active.
            </summary>
            <exception cref="T:System.InvalidOperationException">Context is not active.</exception>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationContext.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.EnumerationContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.EnumerationContext.Options">
            <summary>
            Gets the options of this context.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.EnumerationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.EnumerationContext.BeginEnumeration">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.EnumerationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.EnumerationContext.Session">
            <summary>
            Gets the session handler.
            </summary>
            <value>The session handler.</value>
        </member>
        <member name="P:Xtensive.Orm.Providers.EnumerationContext.Options">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.EnumerationScope">
            <summary>
            An implementation of <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationScope"/> 
            suitable for storage.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.EnumerationScope">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/> activation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.EnumerationScope.#ctor(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.EnumerationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.EnumerationScope.Context">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.EnumerationScope.#ctor(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlTaskProcessor.ProcessTask(Xtensive.Orm.Providers.SqlLoadTask,System.Guid)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task to process.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlTaskProcessor.ProcessTask(Xtensive.Orm.Providers.SqlPersistTask,System.Guid)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task to process.</param>
        </member>
        <member name="T:Xtensive.Orm.Providers.HandlerAccessor">
            <summary>
            Storage handler accessor.
            Provided by protected members, such as <see cref="P:Xtensive.Orm.Providers.DomainBoundHandler.Handlers"/> 
            to provide access to other available handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.Domain">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain"/> 
            this handler accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.Factory">
            <summary>
            Gets the handler provider 
            creating handlers in the <see cref="P:Xtensive.Orm.Providers.HandlerAccessor.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.StorageDriver">
            <summary>
            Gets the storage driver.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.ProviderInfo">
            <summary>
            Gets storage provider info.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.NameBuilder">
            <summary>
            Gets the name builder.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.HandlerAccessor.DomainHandler">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Providers.HandlerAccessor.Domain"/> handler.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.HandlerFactory">
            <summary>
            An abstract base class for any storage factories.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.HandlerFactory.CreateHandler``1">
            <summary>
            Creates the handler of specified type <typeparamref name="TContract"/>.
            </summary>
            <typeparam name="TContract">Handler contract</typeparam>
            <returns>A newly created handler of requested type;</returns>
            <exception cref="T:System.NotSupportedException">
            Handler for type <typeparamref name="TContract"/> was not found.</exception>
        </member>
        <member name="T:Xtensive.Orm.Providers.IStorageSequenceAccessor">
            <summary>
            Accessor for native storage sequences.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.IStorageSequenceAccessor.NextBulk(Xtensive.Orm.Model.SequenceInfo,Xtensive.Orm.Session)">
            <summary>
            Gets next range of sequental values.
            </summary>
            <param name="sequenceInfo">Sequence that should be used.</param>
            <param name="session">Current session.</param>
            <returns>Next range of sequental value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.IStorageSequenceAccessor.CleanUp(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.SequenceInfo},Xtensive.Orm.Session)">
            <summary>
            Performs clean up on the specified <paramref name="sequences"/>.
            This method does nothing is storage does not use key generator tables.
            </summary>
            <param name="sequences">Sequences to clean up.</param>
            <param name="session">Session to use.</param>
        </member>
        <member name="T:Xtensive.Orm.Providers.IDirectSqlService">
            <summary>
            A handler used by <see cref="T:Xtensive.Orm.Services.DirectSqlAccessor"/>.
            If implemented by provider
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.IDirectSqlService.RegisterInitializationSql(System.String)">
            <summary>
            Registers SQL script to be executed just before <see cref="T:System.Data.Common.DbConnection"/>
            is used by <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Xtensive.Orm.Providers.IDirectSqlService.CreateCommand">
            <summary>
            Creates the <see cref="T:System.Data.Common.DbCommand"/> object associated with the
            current <see cref="P:Xtensive.Orm.Providers.IDirectSqlService.Connection"/> and <see cref="P:Xtensive.Orm.Providers.IDirectSqlService.Transaction"/>.
            </summary>
            <returns>Newly created <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">Connection is not open.</exception>
        </member>
        <member name="P:Xtensive.Orm.Providers.IDirectSqlService.ConnectionInfo">
            <summary>
            Gets or sets <see cref="P:Xtensive.Orm.Providers.IDirectSqlService.ConnectionInfo"/> to use.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.IDirectSqlService.Connection">
            <summary>
            Gets the underlying connection that is currently in use.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.IDirectSqlService.Transaction">
            <summary>
            Gets the underlying transaction that is currently running.
            <see langword="null" />, if transaction isn't running now.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.IsolationLevelConverter">
            <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.IsolationLevelConverter.Convert(System.Transactions.IsolationLevel)">
            <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">The specified <see cref="T:System.Transactions.IsolationLevel"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Orm.Providers.NameBuilder">
            <summary>
            Name builder for <see cref="T:Xtensive.Orm.Model.DomainModel"/> nodes 
            Provides names according to a set of naming rules contained in
            <see cref="T:Xtensive.Orm.Configuration.NamingConvention"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildTypeName(Xtensive.Orm.Building.BuildingContext,Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> object.
            </summary>
            <param name="type">The <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> object.</param>
            <returns>Type name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildTableName(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Build table name by index.
            </summary>
            <param name="indexInfo">Index to build table name for.</param>
            <returns>Table name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildTableColumnName(Xtensive.Orm.Model.ColumnInfo)">
            <summary>
            Build table column name by <see cref="T:Xtensive.Orm.Upgrade.Model.StorageColumnInfo"/>.
            </summary>
            <param name="columnInfo"><see cref="T:Xtensive.Orm.Upgrade.Model.StorageColumnInfo"/> to build column table name for.</param>
            <returns>Column name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildReferenceForeignKeyName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Builds foreign key name by association.
            </summary>
            <returns>Foreign key name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildHierarchyForeignKeyName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Builds foreign key name for in-hierarchy primary key references.
            </summary>
            <returns>Foreign key name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildFieldName(Xtensive.Orm.Building.Definitions.FieldDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.FieldDef"/> object.
            </summary>
            <param name="field">The <see cref="T:Xtensive.Orm.Building.Definitions.FieldDef"/> object.</param>
            <returns>Field name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildFieldName(System.Reflection.PropertyInfo)">
            <summary>
            Builds the name of the field.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildExplicitFieldName(Xtensive.Orm.Model.TypeInfo,System.String)">
            <summary>
            Builds the name of the explicitly implemented field.
            </summary>
            <param name="type">The type of interface explicit member implements.</param>
            <param name="name">The member name.</param>
            <returns>Explicitly implemented field name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildNestedFieldName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Builds the full name of the <paramref name="childField"/>.
            </summary>
            <param name="complexField">The complex field.</param>
            <param name="childField">The child field.</param>
            <returns>Nested field name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildMappingName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Builds the <see cref="P:Xtensive.Orm.Model.MappedNode.MappingName"/>.
            </summary>
            <param name="complexField">The complex field.</param>
            <param name="childField">The child field.</param>
            <returns>Field mapping name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildColumnName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.ColumnInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> object.
            </summary>
            <param name="field">The field info.</param>
            <param name="baseColumn">The <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> object.</param>
            <returns>Column name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildColumnName(Xtensive.Orm.Model.ColumnInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> object concatenating 
            <see cref="P:Xtensive.Orm.Model.Node.Name"/> of its declaring type with the original column name.
            </summary>
            <param name="column">The <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> object.</param>
            <returns>Column name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildIndexName(Xtensive.Orm.Building.Definitions.TypeDef,Xtensive.Orm.Building.Definitions.IndexDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef"/> object.
            </summary>
            <param name="type">The type def.</param>
            <param name="index">The <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef"/> object.</param>
            <returns>Index name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildIndexName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef"/> object.
            </summary>
            <param name="type">The type def.</param>
            <param name="index">The <see cref="T:Xtensive.Orm.Model.IndexInfo"/> object.</param>
            <returns>Index name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildFullTextIndexName(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Builds the name of the full-text index.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>Index name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildPartialIndexName(Xtensive.Orm.Building.Definitions.IndexDef,System.Type,System.String)">
            <summary>
            Builds name for partial index.
            </summary>
            <param name="index">Index to build name for.</param>
            <param name="filterType">Type that defines filter for partial index.</param>
            <param name="filterMember">Member that defines filter for partial index.</param>
            <returns>Name for <paramref name="index"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildAssociationName(Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Builds the name for the <see cref="T:Xtensive.Orm.Model.AssociationInfo"/>.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> instance to build name for.</param>
            <returns>Association name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildAssociationName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Builds the name for the <see cref="T:Xtensive.Orm.Model.AssociationInfo"/>.
            </summary>
            <param name="ownerType">Type of the owner.</param>
            <param name="ownerField">The owner field.</param>
            <param name="targetType">Type of the target.</param>
            <returns>Association name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildAuxiliaryTypeMappingName(Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Builds the mapping name for the auxiliary type
            associated with specified <see cref="T:Xtensive.Orm.Model.AssociationInfo"/>.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> instance to build name for.</param>
            <returns>Auxiliary type mapping name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildSequenceName(Xtensive.Orm.Model.KeyInfo)">
            <summary>
            Builds the key sequence name by <see cref="T:Xtensive.Orm.Model.KeyInfo"/> instance.
            </summary>
            <param name="keyInfo">The <see cref="T:Xtensive.Orm.Model.KeyInfo"/> instance to build sequence name for.</param>
            <returns>Sequence name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildKeyGeneratorName(Xtensive.Orm.Model.KeyInfo,Xtensive.Orm.Building.Definitions.HierarchyDef)">
            <summary>
            Builds name for key generator.
            </summary>
            <param name="key">Key to build key generator name for.</param>
            <param name="hierarchyDef">Hierarchy definition.</param>
            <returns>Key generator name</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildKeyGeneratorName(Xtensive.Orm.Configuration.KeyGeneratorConfiguration)">
            <summary>
            Builds name for key generator.
            </summary>
            <param name="configuration">Configuration.</param>
            <returns>Key generator name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.BuildKeyGeneratorBaseName(Xtensive.Orm.Model.KeyInfo,Xtensive.Orm.Building.Definitions.HierarchyDef)">
            <summary>
            Builds base name for key generator.
            </summary>
            <param name="key">Key to build base key generator name for.</param>
            <param name="hierarchyDef">Hierarchy definition.</param>
            <returns>Base key generator name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.ApplyNamingRules(System.String)">
            <summary>
            Applies current naming convention to the specified <paramref name="name"/>.
            </summary>
            <param name="name">Name to apply the convention to.</param>
            <returns>Processed name satisfying naming convention.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.NameBuilder.GetHash(System.String)">
            <summary>
            Computes the hash for the specified <paramref name="name"/>.
            The length of the resulting hash is 8 characters.
            </summary>
            <returns>Computed hash.</returns>
        </member>
        <member name="P:Xtensive.Orm.Providers.NameBuilder.TypeIdColumnName">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Entity.TypeId"/> column name.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ProviderAttribute">
            <summary>
            An attribute that must be applied to <see cref="T:Xtensive.Orm.Providers.HandlerFactory"/>
            to make it available for the storage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderAttribute.Name">
            <summary>
            Gets provider name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderAttribute.DriverFactory">
            <summary>
            Gets <see cref="T:Xtensive.Sql.SqlDriverFactory"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ProviderFeatures">
            <summary>
            Enumerates all the features supported by storage providers.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ProviderInfo">
            <summary>
            Provider's features provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.ProviderInfo.Supports(Xtensive.Orm.Providers.ProviderFeatures)">
            <summary>
            Determines whether the specified features are supported.
            </summary>
            <param name="required">The required feature set.</param>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.ProviderName">
            <summary>
            Gets provider name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.StorageVersion">
            <summary>
            Version of the underlying storage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.ProviderFeatures">
            <summary>
            Gets the features.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.MaxIdentifierLength">
            <summary>
            Gets maximal identifier length.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.ConstantPrimaryIndexName">
            <summary>
            Gets the constant name of the primary index.
            </summary>
            <value>The constant name of the primary index.</value>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.DefaultDatabase">
            <summary>
            Gets default database for current user.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.DefaultSchema">
            <summary>
            Gets default schema for current user.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.ProviderInfo.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SchemaUpgrader">
            <summary>
            Upgrades storage schema.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlSessionHandler">
            <summary>
            <see cref="T:Xtensive.Orm.Session"/>-level handler for SQL storages.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.IProviderExecutor">
            <summary>
            Provides query features for <see cref="T:Xtensive.Orm.Providers.SqlProvider"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.IProviderExecutor.ExecuteTupleReader(Xtensive.Orm.Providers.QueryRequest)">
            <summary>
            Executes the specified request.
            </summary>
            <param name="request">The request to execute.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> that contains result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.IProviderExecutor.Store(Xtensive.Orm.Providers.IPersistDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
            <summary>
            Stores the specified tuples in specified table.
            </summary>
            <param name="descriptor">Persist descriptor.</param>
            <param name="tuples">The tuples to store.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.IProviderExecutor.Clear(Xtensive.Orm.Providers.IPersistDescriptor)">
            <summary>
            Clears the specified table.
            </summary>
            <param name="descriptor">Persist descriptor.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.IProviderExecutor.Overwrite(Xtensive.Orm.Providers.IPersistDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
            <summary>
            Executes <see cref="M:Xtensive.Orm.Providers.IProviderExecutor.Store(Xtensive.Orm.Providers.IPersistDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})"/> and <see cref="M:Xtensive.Orm.Providers.IProviderExecutor.Clear(Xtensive.Orm.Providers.IPersistDescriptor)"/> via single batch.
            </summary>
            <param name="descriptor">Persist descriptor</param>
            <param name="tuples">Tuples to store</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.FetchEntityState(Xtensive.Orm.Key)">
            <summary>
            Fetches an <see cref="T:Xtensive.Orm.EntityState"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The key of fetched <see cref="T:Xtensive.Orm.EntityState"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.FetchField(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Fetches the field of an <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field to fetch.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.FetchEntitySet(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
            <summary>
            Fetches the entity set.
            </summary>
            <param name="ownerKey">The owner key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.SetCommandTimeout(System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},Xtensive.Orm.ExecutionBehavior)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.AddSystemServices(System.Collections.Generic.ICollection{Xtensive.IoC.ServiceRegistration})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IDirectSqlService#CreateCommand">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Connection is not open.</exception>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IProviderExecutor#ExecuteTupleReader(Xtensive.Orm.Providers.QueryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IProviderExecutor#ExecuteTupleReaderAsync(Xtensive.Orm.Providers.QueryRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IProviderExecutor#Store(Xtensive.Orm.Providers.IPersistDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IProviderExecutor#Clear(Xtensive.Orm.Providers.IPersistDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IProviderExecutor#Overwrite(Xtensive.Orm.Providers.IPersistDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlSessionHandler.TransactionIsStarted">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlSessionHandler.Connection">
            <summary>
            Gets <see cref="T:Xtensive.Sql.SqlConnection"/> associated with current instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlSessionHandler.CommandFactory">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Providers.SqlSessionHandler.CommandFactory"/> associated with current instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IDirectSqlService#Connection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlSessionHandler.Xtensive#Orm#Providers#IDirectSqlService#Transaction">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlServer.DomainHandler">
            <summary>
            A domain handler specific to Microsoft SQL Server RDBMS.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlServer.DomainHandler.CreateCompiler(Xtensive.Orm.Providers.CompilerConfiguration)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlServer.HandlerFactory">
            <summary>
            Storage provider for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Compilation.Compiler`1">
            <summary>
            Abstract base class for RSE <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> compilers that implements visitor pattern.
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/>s into <see cref="T:Xtensive.Orm.Rse.Providers.ExecutableProvider"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Compilation.ICompiler">
            <summary>
            Provider compiler contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.ICompiler.Compile(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Compiles the specified provider.
            </summary>
            <param name="provider">The provider to compile.</param>
            <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.Xtensive#Orm#Rse#Compilation#ICompiler#Compile(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.Compile(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Compiles the specified <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/>.
            </summary>
            <param name="cp">The provider to compile.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitTake(Xtensive.Orm.Rse.Providers.TakeProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.TakeProvider"/>.
            </summary>
            <param name="provider">Take provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitSkip(Xtensive.Orm.Rse.Providers.SkipProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.SkipProvider"/>.
            </summary>
            <param name="provider">Skip provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitPaging(Xtensive.Orm.Rse.Providers.PagingProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.PagingProvider"/>.
            </summary>
            <param name="provider">Paging provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitSelect(Xtensive.Orm.Rse.Providers.SelectProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.SelectProvider"/>.
            </summary>
            <param name="provider">Select provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitSeek(Xtensive.Orm.Rse.Providers.SeekProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.SeekProvider"/>.
            </summary>
            <param name="provider">Seek provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitRaw(Xtensive.Orm.Rse.Providers.RawProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.RawProvider"/>.
            </summary>
            <param name="provider">Raw provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitSort(Xtensive.Orm.Rse.Providers.SortProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.SortProvider"/>.
            </summary>
            <param name="provider">Sort provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitJoin(Xtensive.Orm.Rse.Providers.JoinProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.JoinProvider"/>.
            </summary>
            <param name="provider">Join provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitPredicateJoin(Xtensive.Orm.Rse.Providers.PredicateJoinProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.PredicateJoinProvider"/>.
            </summary>
            <param name="provider">Join provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitFilter(Xtensive.Orm.Rse.Providers.FilterProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.FilterProvider"/>.
            </summary>
            <param name="provider">Filter provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitDistinct(Xtensive.Orm.Rse.Providers.DistinctProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.DistinctProvider"/>.
            </summary>
            <param name="provider">Distinct provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitCalculate(Xtensive.Orm.Rse.Providers.CalculateProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.CalculateProvider"/>.
            </summary>
            <param name="provider">Calculate provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitAlias(Xtensive.Orm.Rse.Providers.AliasProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.AliasProvider"/>.
            </summary>
            <param name="provider">Alias provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitAggregate(Xtensive.Orm.Rse.Providers.AggregateProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.AggregateProvider"/>.
            </summary>
            <param name="provider">Aggregate provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitStore(Xtensive.Orm.Rse.Providers.StoreProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.StoreProvider"/>.
            </summary>
            <param name="provider">Store provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitIndex(Xtensive.Orm.Rse.Providers.IndexProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.IndexProvider"/>.
            </summary>
            <param name="provider">Index provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitApply(Xtensive.Orm.Rse.Providers.ApplyProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.ApplyProvider"/>.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitRowNumber(Xtensive.Orm.Rse.Providers.RowNumberProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.RowNumberProvider"/>.
            </summary>
            <param name="provider">Row number provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitExistence(Xtensive.Orm.Rse.Providers.ExistenceProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.ExistenceProvider"/>.
            </summary>
            <param name="provider">Existence provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitIntersect(Xtensive.Orm.Rse.Providers.IntersectProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.IntersectProvider"/>.
            </summary>
            <param name="provider">Intersect provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitExcept(Xtensive.Orm.Rse.Providers.ExceptProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.ExceptProvider"/>.
            </summary>
            <param name="provider">Except provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitConcat(Xtensive.Orm.Rse.Providers.ConcatProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.ConcatProvider"/>.
            </summary>
            <param name="provider">Concat provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitUnion(Xtensive.Orm.Rse.Providers.UnionProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.UnionProvider"/>.
            </summary>
            <param name="provider">Union provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitLock(Xtensive.Orm.Rse.Providers.LockProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.LockProvider"/>.
            </summary>
            <param name="provider">Lock provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitInclude(Xtensive.Orm.Rse.Providers.IncludeProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.IncludeProvider"/>.
            </summary>
            <param name="provider">Include provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.VisitFreeText(Xtensive.Orm.Rse.Providers.FreeTextProvider)">
            <summary>
            Compiles <see cref="T:Xtensive.Orm.Rse.Providers.FreeTextProvider"/>.
            </summary>
            <param name="provider">FreeText provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.Initialize">
            <summary>
            Initializes this instance just before first VisitXxx() is called.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.Compiler`1.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Compilation.Compiler`1.Owner">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/>
            that is just above <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> that is currently processed.
            For root provider returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Compilation.Compiler`1.RootProvider">
            <summary>
            Gets root of <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> tree.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitAggregate(Xtensive.Orm.Rse.Providers.AggregateProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.ProcessAggregate(Xtensive.Orm.Providers.SqlProvider,System.Collections.Generic.List{Xtensive.Sql.Dml.SqlExpression},Xtensive.Orm.Rse.AggregateColumn)">
            <summary>
            Translates <see cref="T:Xtensive.Orm.Rse.AggregateColumn"/> to corresponding <see cref="T:Xtensive.Sql.Dml.SqlExpression"/>.
            </summary>
            <param name="source">The source <see cref="T:Xtensive.Orm.Providers.SqlProvider"/>.</param>
            <param name="sourceColumns">The source columns.</param>
            <param name="aggregateColumn">The aggregate column.</param>
            <returns>Aggregate processing result (expression).</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitApply(Xtensive.Orm.Rse.Providers.ApplyProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitAlias(Xtensive.Orm.Rse.Providers.AliasProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitCalculate(Xtensive.Orm.Rse.Providers.CalculateProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitDistinct(Xtensive.Orm.Rse.Providers.DistinctProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitFilter(Xtensive.Orm.Rse.Providers.FilterProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitJoin(Xtensive.Orm.Rse.Providers.JoinProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitPredicateJoin(Xtensive.Orm.Rse.Providers.PredicateJoinProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitSeek(Xtensive.Orm.Rse.Providers.SeekProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitSelect(Xtensive.Orm.Rse.Providers.SelectProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitSort(Xtensive.Orm.Rse.Providers.SortProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitStore(Xtensive.Orm.Rse.Providers.StoreProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitExistence(Xtensive.Orm.Rse.Providers.ExistenceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitIntersect(Xtensive.Orm.Rse.Providers.IntersectProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitExcept(Xtensive.Orm.Rse.Providers.ExceptProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitConcat(Xtensive.Orm.Rse.Providers.ConcatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitUnion(Xtensive.Orm.Rse.Providers.UnionProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitLock(Xtensive.Orm.Rse.Providers.LockProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.#ctor(Xtensive.Orm.Providers.HandlerAccessor,Xtensive.Orm.Providers.CompilerConfiguration)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitInclude(Xtensive.Orm.Rse.Providers.IncludeProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitIndex(Xtensive.Orm.Rse.Providers.IndexProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitRaw(Xtensive.Orm.Rse.Providers.RawProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitTake(Xtensive.Orm.Rse.Providers.TakeProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitSkip(Xtensive.Orm.Rse.Providers.SkipProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlCompiler.VisitPaging(Xtensive.Orm.Rse.Providers.PagingProvider)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.Mapping">
            <summary>
            Gets model mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.TypeIdRegistry">
            <summary>
            Gets type identifier registry.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.DomainHandler">
            <summary>
            Gets the SQL domain handler.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.Driver">
            <summary>
            Gets the SQL driver.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.Handlers">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Providers.HandlerAccessor"/> object providing access to available storage handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlCompiler.OuterReferences">
            <summary>
            Gets collection of outer references.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.StorageSequenceAccessor">
            <summary>
            Standard <see cref="T:Xtensive.Orm.Providers.IStorageSequenceAccessor"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.StorageSequenceAccessor.NextBulk(Xtensive.Orm.Model.SequenceInfo,Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.StorageSequenceAccessor.CleanUp(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.SequenceInfo},Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.CommandProcessor">
            <summary>
            A command processor.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.RegisterTask(Xtensive.Orm.Providers.SqlTask)">
            <summary>
            Registers tasks for execution.
            </summary>
            <param name="task">Task to register.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ClearTasks">
            <summary>
            Clears all registered tasks
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasksWithReader(Xtensive.Orm.Providers.QueryRequest)">
            <summary>
            Executes all registred requests plus the specified one query,
            returning <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the last query.
            </summary>
            <param name="request">The request to execute.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the specified request.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasksWithReaderAsync(Xtensive.Orm.Providers.QueryRequest,System.Threading.CancellationToken)">
            <summary>
            Executes all registred requests plus the specified one query asynchronously,
            returning <see cref="T:System.Threading.Tasks.Task`1"/> for the last query.
            </summary>
            <param name="request">The request to execute.</param>
            <param name="token"><see cref="T:System.Threading.CancellationToken">Cancellation token</see> to cancel task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for the specified request.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasks(Xtensive.Orm.ExecutionBehavior)">
            <summary>
            Executes all registred requests,
            optionally skipping the last requests or all requests according to 
            <paramref name="executionBehavior"/> argument.
            </summary>
            <param name="executionBehavior">
            If set to <see cref="F:Xtensive.Orm.ExecutionBehavior.PartialExecutionIsAllowed"/> command processor is allowed to skip last request,
            if it decides to.
            If set to <see cref="F:Xtensive.Orm.ExecutionBehavior.PartialExecutionIsAllowed"/> command processor leaved excecution until next query.
            </param>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasksAsync(Xtensive.Orm.ExecutionBehavior,System.Threading.CancellationToken)">
            <summary>
            Executes all registred requests asynchronously,
            optionally skipping the last requests or all requests according to 
            <paramref name="executionBehavior"/> argument.
            </summary>
            <param name="executionBehavior">
            If set to <see cref="F:Xtensive.Orm.ExecutionBehavior.PartialExecutionIsAllowed"/> command processor is allowed to skip last request,
            if it decides to.
            If set to <see cref="F:Xtensive.Orm.ExecutionBehavior.PartialExecutionIsAllowed"/> command processor leaved excecution until next query.
            </param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasks">
            <summary>
            Executes the all registered requests.
            Calling this method is equivalent to calling <see cref="M:Xtensive.Orm.Providers.CommandProcessor.ExecuteTasks(Xtensive.Orm.ExecutionBehavior)"/> with <see cref="F:Xtensive.Orm.ExecutionBehavior.PartialExecutionIsNotAllowed"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessor.#ctor(Xtensive.Orm.Providers.CommandFactory)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:Xtensive.Orm.Providers.CommandProcessor.Factory">
            <summary>
            Factory of command parts.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.BatchingCommandProcessor.ExecuteTasksAsync(Xtensive.Orm.ExecutionBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Providers.BatchingCommandProcessor.ExecuteTasksWithReaderAsync(Xtensive.Orm.Providers.QueryRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Xtensive.Orm.Providers.Command">
            <summary>
            A command ready for execution.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.CommandPart">
            <summary>
            A part of a command.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.CommandFactory">
            <summary>
            A factory of <see cref="T:Xtensive.Orm.Providers.Command"/>s and <see cref="T:Xtensive.Orm.Providers.CommandPart"/>s.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.CommandProcessorFactory">
            <summary>
            A handlers that is capable of creating <see cref="T:Xtensive.Orm.Providers.CommandProcessor"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessorFactory.CreateCommandProcessor(Xtensive.Orm.Session,Xtensive.Sql.SqlConnection)">
            <summary>
            Creates the command processor.
            </summary>
            <param name="session">The session.</param>
            <param name="connection">The connection.</param>
            <returns>Created command processor.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.CommandProcessorFactory.Initialize">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.CursorCommandFactory">
            <summary>
            A command part factory that wraps queries into "open cursor" statements
            to return multiple query results from single batch.
            Currently this is very Oracle specific.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SimpleCommandProcessor.ExecuteTasks(Xtensive.Orm.ExecutionBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Providers.SimpleCommandProcessor.ExecuteTasksWithReaderAsync(Xtensive.Orm.Providers.QueryRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Orm.Providers.SimpleCommandProcessor.ExecuteTasksAsync(Xtensive.Orm.ExecutionBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlPersistTask">
            <summary>
            A persist task (i.e. INSERT, UPDATE, DELETE) for <see cref="T:Xtensive.Orm.Providers.CommandProcessor"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlTask">
            <summary>
            An abstract task for <see cref="T:Xtensive.Orm.Providers.CommandProcessor"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlTask.ProcessWith(Xtensive.Orm.Providers.ISqlTaskProcessor,System.Guid)">
            <summary>
            Processes this command with the specified <see cref="T:Xtensive.Orm.Providers.CommandProcessor"/>.
            </summary>
            <param name="processor">The processor to use.</param>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlPersistTask.EntityKey">
            <summary>
            A key of an entity to persist (optional).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlPersistTask.RequestSequence">
            <summary>
            Requests to execute.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlPersistTask.Tuple">
            <summary>
            A tuple that stores changed column values.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlPersistTask.OriginalTuple">
            <summary>
            A tuple that stored original column values.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlPersistTask.ValidateRowCount">
            <summary>
            A value indicating if number of affected rows should be checked.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlPersistTask.ProcessWith(Xtensive.Orm.Providers.ISqlTaskProcessor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlLoadTask">
            <summary>
            A query task (i.e. SELECT) for <see cref="T:Xtensive.Orm.Providers.CommandProcessor"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlLoadTask.Request">
            <summary>
            A request to execute.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlLoadTask.ParameterContext">
            <summary>
            A parameter context to activate during parameters binding.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.SqlLoadTask.Output">
            <summary>
            A list of tuples to store result in.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlLoadTask.ProcessWith(Xtensive.Orm.Providers.ISqlTaskProcessor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlLoadTask.#ctor(Xtensive.Orm.Providers.QueryRequest,System.Collections.Generic.List{Xtensive.Tuples.Tuple},Xtensive.Core.ParameterContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="request">A value for <see cref="F:Xtensive.Orm.Providers.SqlLoadTask.Request"/>.</param>
            <param name="output">A value for <see cref="F:Xtensive.Orm.Providers.SqlLoadTask.Output"/>.</param>
            <param name="parameterContext">A value for <see cref="F:Xtensive.Orm.Providers.SqlLoadTask.ParameterContext"/>.</param>
        </member>
        <member name="T:Xtensive.Orm.Providers.DbCommandExtensions">
            <summary>
            <see cref="T:System.Data.Common.DbCommand"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.DbCommandExtensions.ToHumanReadableString(System.Data.Common.DbCommand)">
            <summary>
            Converts the specified <see cref="T:System.Data.Common.DbCommand"/> to human readable string.
            </summary>
            <param name="command">The command to beautify.</param>
            <returns>Human readable representation of the specified command.</returns>
        </member>
        <member name="T:Xtensive.Orm.Providers.DbDataReaderAccessor">
            <summary>
            Provider-level <see cref="T:System.Data.Common.DbDataReader"/> accessor.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ISqlExecutor">
            <summary>
            Provides simple execution API for SQL queries.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteReader(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Executes the specified query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/>.
            </summary>
            <param name="statement">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteReader(System.String)">
            <summary>
            Executes the specified query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/>.
            </summary>
            <param name="commandText">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteScalar(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>.
            </summary>
            <param name="statement">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteScalar(System.String)">
            <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>.
            </summary>
            <param name="commandText">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteNonQuery(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>.
            </summary>
            <param name="statement">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>.
            </summary>
            <param name="commandText">The statement to execute.</param>
            <returns>Result of execution.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteMany(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Executes group of DDL statements via <see cref="M:Xtensive.Orm.Providers.ISqlExecutor.ExecuteNonQuery(System.String)"/>.
            </summary>
            <param name="statements">Statements to execute</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.ISqlExecutor.Extract(System.Collections.Generic.IEnumerable{Xtensive.Sql.SqlExtractionTask})">
            <summary>
            Executes specified extraction tasks.
            </summary>
            <param name="tasks">Tasks to execute.</param>
            <returns>Extration result.</returns>
        </member>
        <member name="T:Xtensive.Orm.Providers.StorageDriver">
            <summary>
            SQL storage driver.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.StorageDriver.MapSqlType(Xtensive.Sql.SqlType)">
            <summary>
            Converts the specified <see cref="T:Xtensive.Sql.SqlType"/> to corresponding .NET type.
            </summary>
            <param name="sqlType">The type to convert.</param>
            <returns>Converter type.</returns>
        </member>
        <member name="T:Xtensive.Orm.Providers.ModelMapping">
            <summary>
            Mapping between <see cref="T:Xtensive.Orm.Model.DomainModel"/>
            and <see cref="T:Xtensive.Sql.Model.Catalog"/>s, <see cref="T:Xtensive.Sql.Model.Schema"/>s and <see cref="T:Xtensive.Sql.Model.Table"/>s.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ParameterBinding">
            <summary>
            Describes SQL parameter binding.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistParameterBinding">
            <summary>
            A binding of a parameter for <see cref="T:Xtensive.Orm.Providers.PersistRequest"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ParameterTransmissionType">
            <summary>
            Possible way of delivering parameter to server
            for <see cref="T:Xtensive.Orm.Providers.QueryParameterBinding"/> and <see cref="T:Xtensive.Orm.Providers.PersistParameterBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.ParameterTransmissionType.Regular">
            <summary>
            Indicates that no special handling of parameter is performed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.ParameterTransmissionType.CharacterLob">
            <summary>
            Indicates that parameter is a large character object and should be persisted via <see cref="T:Xtensive.Sql.ICharacterLargeObject"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.ParameterTransmissionType.BinaryLob">
            <summary>
            Indicates that parameter is a large binary object and should be persisted via <see cref="T:Xtensive.Sql.IBinaryLargeObject"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistRequest">
            <summary>
            Modification (INSERT, UPDATE, DELETE) request.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistRequestBuilder">
            <summary>
            Builder of <see cref="T:Xtensive.Orm.Providers.PersistRequest"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.PersistRequestBuilder.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.PersistRequestBuilder.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistRequestBuilderContext">
            <summary>
            <see cref="T:Xtensive.Orm.Providers.PersistRequestBuilder"/> context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistRequestBuilderTask">
            <summary>
            A task for <see cref="T:Xtensive.Orm.Providers.PersistRequestBuilder"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.PersistRequestBuilderTask.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.PersistRequestBuilderTask.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Providers.PersistRequestBuilderTask.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.PersistRequestBuilderTask.ChangedFields">
            <summary>
            Gets the field map that describes updated fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.PersistRequestBuilderTask.AvailableFields">
            <summary>
            Gets the field map that describes available (fetched) fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.PersistRequestBuilderTask.Kind">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Providers.PersistRequestKind"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.PersistRequestBuilderTask.ValidateVersion">
            <summary>
            Gets flag indicating if validation should be performed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.PersistRequestKind">
            <summary>
            Kinds of <see cref="T:Xtensive.Orm.Providers.PersistRequest"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.PersistRequestKind.Insert">
            <summary>
            Insert request.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.PersistRequestKind.Remove">
            <summary>
            Remove request.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.PersistRequestKind.Update">
            <summary>
            Update request.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.QueryParameterBinding">
            <summary>
            A binding of a parameter for <see cref="T:Xtensive.Orm.Providers.QueryRequest"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.QueryParameterBindingType">
            <summary>
            Possible types of <see cref="T:Xtensive.Orm.Providers.QueryParameterBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.Regular">
            <summary>
            Indicates no special handling of parameter values.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.SmartNull">
            <summary>
            Indicates that special handling of null values is performed.
            If <see cref="P:Xtensive.Orm.Providers.QueryParameterBinding.ValueAccessor"/> returns <see langword="null"/>
            generated query with contain "something is null" check instead of "something = @p".
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.BooleanConstant">
            <summary>
            Indicates that <see cref="T:System.Boolean"/> parameters is automatically propagated to constants
            according to a value returned by <see cref="P:Xtensive.Orm.Providers.QueryParameterBinding.ValueAccessor"/>.
            <see cref="P:Xtensive.Orm.Providers.ParameterBinding.TypeMapping"/> is ignored in this case.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.LimitOffset">
            <summary>
            Indicates that parameter is an argument for paging operators
            and should be inlined in query as constant value.
            <see cref="P:Xtensive.Orm.Providers.ParameterBinding.TypeMapping"/> is ignored in this case.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.NonZeroLimitOffset">
            <summary>
            Same as <see cref="F:Xtensive.Orm.Providers.QueryParameterBindingType.LimitOffset"/> but 0 value handled differently.
            It's replaced with 1 and alternative query node branch is activated.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryParameterBindingType.RowFilter">
            <summary>
            Indicates that parameter is row filter argument (i.e. a number of parameter vectors).
            <see cref="P:Xtensive.Orm.Providers.QueryParameterBinding.ValueAccessor"/> returns a collection of <see cref="T:Xtensive.Tuples.Tuple"/>s.
            <see cref="P:Xtensive.Orm.Providers.ParameterBinding.TypeMapping"/> is ignored in this case.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.QueryRequest">
            <summary>
            Query (SELECT) request.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.QueryRowFilterParameterBinding">
            <summary>
            A special version of <see cref="T:Xtensive.Orm.Providers.QueryParameterBinding"/> used for complex filters.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.QueryRowFilterParameterBinding.RowTypeMapping">
            <summary>
            Gets the complex type mapping.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.QueryRequestOptions">
            <summary>
            Options for <see cref="T:Xtensive.Orm.Providers.QueryRequest"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryRequestOptions.Empty">
            <summary>
            Empty option set.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.QueryRequestOptions.AllowOptimization">
            <summary>
            Optimization of this request is allowed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SqlActionTranslator">
            <summary>
            Translates upgrade <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s to SQL.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlActionTranslator.Translate">
            <summary>
            Translates all registered actions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlActionTranslator.VisitCopyDataAction(Xtensive.Modelling.Actions.DataAction)">
            <exception cref="T:System.InvalidOperationException">Can not create copy command 
            with specific hint parameters.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlActionTranslator.ProcessUpdateDataAction(Xtensive.Modelling.Actions.DataAction,System.Boolean)">
            <exception cref="T:System.InvalidOperationException">Can not create update command 
            with specific hint parameters.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlActionTranslator.CreateConditionalExpression(Xtensive.Modelling.Comparison.Hints.DataHint,Xtensive.Sql.Dml.SqlTableRef)">
            <exception cref="T:System.InvalidOperationException">Can not create expression 
            with specific hint parameters.</exception>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlIncludeProvider">
            <summary>
            Default implementation for SQL <see cref="T:Xtensive.Orm.Rse.Providers.IncludeProvider"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlTemporaryDataProvider">
            <summary>
            Abstract base class for any SQL temporary data provider.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlProvider">
            <summary>
            Unified SQL provider implementation (<see cref="T:Xtensive.Orm.Rse.Providers.ExecutableProvider"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ExecutableProvider">
            <summary>
            Abstract base class for any query provider that can be directly executed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.Provider">
            <summary>
            Abstract base class for any query provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.Provider.BuildHeader">
            <summary>
            Builds the <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Header"/>.
            This method is invoked just once on each provider.
            </summary>
            <returns>Newly created <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> to assign to <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Header"/> property.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.Provider.Initialize">
            <summary>
            Performs initialization of the provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.Provider.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.Provider.ParametersToString">
            <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Orm.Rse.Providers.Provider.ToString"/> method.
            </summary>
            <returns>Provider parameters as a single line string.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.Provider.#ctor(Xtensive.Orm.Rse.Providers.ProviderType,Xtensive.Orm.Rse.Providers.Provider[])">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="type">The type of the provider.</param>
            <param name="sources"><see cref="P:Xtensive.Orm.Rse.Providers.Provider.Sources"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.Provider.Type">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Rse.Providers.ProviderType"/> of the current instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.Provider.Sources">
            <summary>
            Gets or sets the source providers 
            "consumed" by this provider to produce results of current provider.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.Provider.Header">
            <summary>
            Gets or sets the header of the record sequence this provide produces.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.OnBeforeEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <summary>
            Called when enumerator is created on this provider.
            </summary>
            <param name="context">The enumeration context.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.OnAfterEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <summary>
            Called when enumeration is finished.
            </summary>
            <param name="context">The enumeration context.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.BuildHeader">
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Rse.Providers.ExecutableProvider.Origin"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.ExecutableProvider[])">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="origin">The <see cref="P:Xtensive.Orm.Rse.Providers.ExecutableProvider.Origin"/> property value.</param>
            <param name="sources">The <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Sources"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ExecutableProvider.Origin">
            <summary>
            Gets the provider this provider is compiled from.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlProvider.OnEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlProvider.#ctor(Xtensive.Orm.Providers.HandlerAccessor,Xtensive.Orm.Providers.QueryRequest,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.ExecutableProvider[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="origin">The origin.</param>
            <param name="handlers">The handlers.</param>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlProvider.#ctor(Xtensive.Orm.Providers.SqlProvider,Xtensive.Sql.Dml.SqlTable)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="permanentReference">The permanent reference.</param>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlProvider.Request">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Providers.QueryRequest"/> associated with this provider.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlProvider.PermanentReference">
            <summary>
            Gets the permanent reference (<see cref="T:Xtensive.Sql.Dml.SqlQueryRef"/>) for <see cref="T:Xtensive.Sql.Dml.SqlSelect"/> associated with this provider.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.SqlProvider.DomainHandler">
            <summary>
            Gets the domain handler this provider is bound to.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlIncludeProvider.OnBeforeEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlIncludeProvider.OnAfterEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlIncludeProvider.#ctor(Xtensive.Orm.Providers.HandlerAccessor,Xtensive.Orm.Providers.QueryRequest,Xtensive.Orm.Providers.TemporaryTableDescriptor,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}},Xtensive.Orm.Rse.Providers.IncludeProvider,Xtensive.Orm.Rse.Providers.ExecutableProvider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="handlers">The handlers.</param>
            <param name="request">The request.</param>
            <param name="tableDescriptor">The table descriptor.</param>
            <param name="filterDataSource">The filter data source.</param>
            <param name="origin">The origin.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SqlModelConverter">
            <summary>
            Converts <see cref="T:Xtensive.Sql.SqlExtractionResult"/> to <see cref="F:Xtensive.Orm.Upgrade.SqlModelConverter.targetModel"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.SqlModelVisitor`1">
            <summary>
            An abstract base class for all database model visitors. 
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.Visit(Xtensive.Sql.Model.Node)">
            <summary>
            Visits a node.
            </summary>
            <param name="node">The node.</param>
            <returns>Visit result.</returns>
            <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
            <summary>
            Visits unique constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
            <summary>
            Visits table constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
            <summary>
            Visits primary key.
            </summary>
            <param name="key">The key.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
            <summary>
            Visits foreign key.
            </summary>
            <param name="key">The key.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
            <summary>
            Visits domain constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitConstraint(Xtensive.Sql.Model.Constraint)">
            <summary>
            Visits a constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
            <summary>
            Visits check constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
            <summary>
            Visits range partition.
            </summary>
            <param name="rangePartition">The range partition.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
            <summary>
            Visits partition schema.
            </summary>
            <param name="partitionSchema">The partition schema.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
            <summary>
            Visits partition function.
            </summary>
            <param name="partitionFunction">The partition function.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
            <summary>
            Visits partition descriptor.
            </summary>
            <param name="partitionDescriptor">The partition descriptor.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartition(Xtensive.Sql.Model.Partition)">
            <summary>
            Visits a partition.
            </summary>
            <param name="partition">The partition.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
            <summary>
            Visits list partition.
            </summary>
            <param name="listPartition">The list partition.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
            <summary>
            Visits hash partition.
            </summary>
            <param name="hashPartition">The hash partition.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCatalog(Xtensive.Sql.Model.Catalog)">
            <summary>
            Visits a catalog.
            </summary>
            <param name="catalog">The catalog.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
            <summary>
            Visits character set.
            </summary>
            <param name="characterSet">The character set.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCollation(Xtensive.Sql.Model.Collation)">
            <summary>
            Visits a collation.
            </summary>
            <param name="collation">The collation.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTable(Xtensive.Sql.Model.DataTable)">
            <summary>
            Visits data table.
            </summary>
            <param name="dataTable">The data table.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
            <summary>
            Visits data table column.
            </summary>
            <param name="dataTableColumn">The data table column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomain(Xtensive.Sql.Model.Domain)">
            <summary>
            Visits a domain.
            </summary>
            <param name="domain">The domain.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
            <summary>
            Visits the full-text index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndex(Xtensive.Sql.Model.Index)">
            <summary>
            Visits an index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
            <summary>
            Visits index column.
            </summary>
            <param name="indexColumn">The index column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Visits a schema.
            </summary>
            <param name="schema">The schema.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequence(Xtensive.Sql.Model.Sequence)">
            <summary>
            Visits a sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
            <summary>
            Visits sequence descriptor.
            </summary>
            <param name="sequenceDescriptor">The sequence descriptor.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTable(Xtensive.Sql.Model.Table)">
            <summary>
            Visits a table.
            </summary>
            <param name="table">The table.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
            <summary>
            Visits table column.
            </summary>
            <param name="tableColumn">The table column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
            <summary>
            Visits temporary table.
            </summary>
            <param name="temporaryTable">The temporary table.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTranslation(Xtensive.Sql.Model.Translation)">
            <summary>
            Visits a translation.
            </summary>
            <param name="translation">The translation.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitView(Xtensive.Sql.Model.View)">
            <summary>
            Visits a view.
            </summary>
            <param name="view">The view.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
            <summary>
            Visits view column.
            </summary>
            <param name="viewColumn">The view column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.Run">
            <summary>
            Get the result of conversion specified 
            <see cref="T:Xtensive.Sql.Model.Schema"/> to <see cref="F:Xtensive.Orm.Upgrade.SqlModelConverter.targetModel"/>.
            </summary>
            <returns>The storage model.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitSchema(Xtensive.Sql.Model.Schema)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.Visit(Xtensive.Sql.Model.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitTable(Xtensive.Sql.Model.Table)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitIndex(Xtensive.Sql.Model.Index)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitSequence(Xtensive.Sql.Model.Sequence)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitGeneratorTable(Xtensive.Sql.Model.Table)">
            <summary>
            Visits the generator table.
            </summary>
            <param name="generatorTable">The generator table.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.ExtractType(Xtensive.Sql.Model.TableColumn)">
            <summary>
            Extracts the <see cref="T:Xtensive.Orm.Upgrade.Model.StorageTypeInfo"/> from <see cref="T:Xtensive.Sql.Model.TableColumn"/>.
            </summary>
            <param name="column">The column.</param>
            <returns>Data type.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.ConvertReferentialAction(Xtensive.Sql.ReferentialAction)">
            <summary>
            Converts the <see cref="T:Xtensive.Sql.ReferentialAction"/> to 
            <see cref="T:Xtensive.Orm.Upgrade.Model.ReferentialAction"/>.
            </summary>
            <param name="toConvert">The action to convert.</param>
            <returns>Converted action.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.IsGeneratorTable(Xtensive.Sql.Model.Table)">
            <summary>
            Determines whether specific table used as sequence.
            </summary>
            <param name="table">The table.</param>
            <returns>
            <see langword="true"/> if table used as sequence; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitCollation(Xtensive.Sql.Model.Collation)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitDataTable(Xtensive.Sql.Model.DataTable)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitDomain(Xtensive.Sql.Model.Domain)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitPartition(Xtensive.Sql.Model.Partition)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitConstraint(Xtensive.Sql.Model.Constraint)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitTranslation(Xtensive.Sql.Model.Translation)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitView(Xtensive.Sql.Model.View)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SqlModelConverter.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="T:Xtensive.Orm.Rse.Compilation.IPostCompiler">
            <summary>
            Provider's tree post-compiler contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.IPostCompiler.Process(Xtensive.Orm.Rse.Providers.ExecutableProvider)">
            <summary>
            Processes the specified provider's tree.
            </summary>
            <param name="rootProvider">The root provider.</param>
        </member>
        <member name="T:Xtensive.Sql.ISqlVisitor">
            <summary>
            A contract for visitor of SQL DOM query model.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SqlStoreProvider">
            <summary>
            Default implementation of SQL temporary data provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlStoreProvider.OnBeforeEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.SqlStoreProvider.#ctor(Xtensive.Orm.Providers.HandlerAccessor,Xtensive.Orm.Providers.QueryRequest,Xtensive.Orm.Providers.TemporaryTableDescriptor,Xtensive.Orm.Rse.Providers.StoreProvider,Xtensive.Orm.Rse.Providers.ExecutableProvider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="handlers">The handlers.</param>
            <param name="request">The request.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="origin">The origin.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfoCollection">
            <summary>
            Serializable collection of partial index filter expressions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfoCollection.Deserialize(System.String)">
            <summary>
            Deserializes <see cref="T:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfoCollection"/> from string.
            </summary>
            <param name="serialized">Serialized instance.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfoCollection.Serialize">
            <summary>
            Serializes this instance to string.
            </summary>
            <returns>Serialized instance.</returns>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo">
            <summary>
            Serializable information about partial index.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo.Database">
            <summary>
            Gets or sets database name (if multi-database mode is enabled).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo.Schema">
            <summary>
            Gets or sets schema name (if multi-schema mode is enabled).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo.Table">
            <summary>
            Gets or sets table name.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo.Name">
            <summary>
            Gets or sets index name.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredPartialIndexFilterInfo.Filter">
            <summary>
            Gets or sets filter expression.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.RecycledFieldDefinition">
            <summary>
            Recycled field definition.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.RecycledDefinition">
            <summary>
            Definition of a recycled model item.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.RecycledFieldDefinition.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="ownerType">Owner type with recycled field.</param>
            <param name="fieldName">Name of recycled field.</param>
            <param name="fieldType">Type of recycled field.</param>
        </member>
        <member name="M:Xtensive.Orm.RecycledFieldDefinition.#ctor(System.Type,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="ownerType">Owner type with recycled field.</param>
            <param name="fieldName">Name of recycled field.</param>
            <param name="fieldType">Type of recycled field.</param>
            <param name="originalFieldName">Original field name.</param>
        </member>
        <member name="P:Xtensive.Orm.RecycledFieldDefinition.OwnerType">
            <summary>
            Owner type with recycled field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.RecycledFieldDefinition.FieldName">
            <summary>
            Name of recycled field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.RecycledFieldDefinition.FieldType">
            <summary>
            Type of recycled field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.RecycledFieldDefinition.OriginalFieldName">
            <summary>
            Original field name.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SqlUpgradeStage">
            <summary>
            Stage of <see cref="T:Xtensive.Orm.Upgrade.UpgradeActionSequence"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.NonTransactionalProlog">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.NonTransactionalPrologCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.NonTransactionalEpilog">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.NonTransactionalEpilogCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.PreCleanupData">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PreCleanupDataCommands"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.CleanupData">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CleanupDataCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.PreUpgrade">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PreUpgradeCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.Upgrade">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.UpgradeCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.CopyData">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CopyDataCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.PostCopyData">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PostCopyDataCommands"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SqlUpgradeStage.Cleanup">
            <summary>
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CleanupCommands"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.TemporaryTableDescriptor">
            <summary>
            A descriptor of temporary table.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">A value for <see cref="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.Name"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.Name">
            <summary>
            Gets the unique name of this temporary table.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.TupleDescriptor">
            <summary>
            Gets or sets the tuple descriptor associated with this table descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.CreateStatement">
            <summary>
            Gets or sets the table creation script.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.DropStatement">
            <summary>
            Gets or sets the table destruction script.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.StoreRequest">
            <summary>
            Gets or sets the persist request used to store data in temporary table.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.ClearRequest">
            <summary>
            Gets or sets the clear reqest used to delete all data from temporary table.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableDescriptor.QueryStatement">
            <summary>
            Gets or sets the query statement associated with this table descriptor.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.TemporaryTableManager">
            <summary>
            A manager of temporary tables.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableManager.BuildDescriptor(Xtensive.Orm.Providers.ModelMapping,System.String,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Builds the descriptor of a temporary table.
            </summary>
            <param name="modelMapping">Model mapping.</param>
            <param name="name">The name of the temporary table.</param>
            <param name="source">The source.</param>
            <returns>Built descriptor.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableManager.BuildDescriptor(Xtensive.Orm.Providers.ModelMapping,System.String,Xtensive.Tuples.TupleDescriptor,System.String[])">
            <summary>
            Builds the descriptor of a temporary table.
            </summary>
            <param name="modelMapping">Model mapping.</param>
            <param name="name">The name of the temporary table.</param>
            <param name="source">The source.</param>
            <param name="fieldNames">The names of field in temporary table.</param>
            <returns>Built descriptor.</returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableManager.Acquire(Xtensive.Orm.Providers.EnumerationContext,Xtensive.Orm.Providers.TemporaryTableDescriptor)">
            <summary>
            Acquires the lock on the specified temporary table.
            </summary>
            <param name="context">The <see cref="T:Xtensive.Orm.Providers.EnumerationContext"/>.</param>
            <param name="descriptor">The descriptor of temporary table.</param>
            <returns>
            A <see cref="T:System.IDisposable"/> implementor that should be used to free acquired lock.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Providers.TemporaryTableManager.Initialize">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Providers.TemporaryTableStateRegistry">
            <summary>
            A registry of temporary tables.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Providers.TemporaryTableStateRegistry.States">
            <summary>
            Gets or sets the states of temporary tables.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.QueryEventArgs">
            <summary>
            Event args for <see cref="E:Xtensive.Orm.SessionEventAccessor.QueryExecuting"/>
            and <see cref="E:Xtensive.Orm.SessionEventAccessor.QueryExecuted"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.QueryEventArgs.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of this class.
            <param name="expression">Executed expression.</param>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.QueryEventArgs.Expression">
            <summary>
            Gets executed expression.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.AssociationInfo">
            <summary>
            Describes single association.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfo.ExtractForeignKey(Xtensive.Orm.Model.TypeInfo,Xtensive.Tuples.Tuple)">
            <summary>
            Extracts the foreign key from the specified <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The tuple.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfo.#ctor(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.Multiplicity,System.Nullable{Xtensive.Orm.OnRemoveAction},System.Nullable{Xtensive.Orm.OnRemoveAction})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="ownerField">The referencing field.</param>
            <param name="targetType">The referenced type.</param>
            <param name="multiplicity">The association multiplicity.</param>
            <param name="onOwnerRemove">The <see cref="T:Xtensive.Orm.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerType"/> object removal.</param>
            <param name="onTargetRemove">The <see cref="T:Xtensive.Orm.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType"/> object removal.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.OwnerType">
            <summary>
            Gets the owner type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.OwnerField">
            <summary>
            Gets the owner field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.AuxiliaryType">
            <summary>
            Gets the auxiliary persistent type that represents this association.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.Ancestors">
            <summary>
            Gets or sets ancestor association.
            </summary>
            <value>The ancestor.</value>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.UnderlyingIndex">
            <summary>
            Gets the underlying index for this instance.
            </summary>
            <value>The underlying index.</value>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.IsMaster">
            <summary>
            Gets a value indicating whether this instance is master association.
            </summary>
            <value>
            <see langword="true"/> if this instance is master association; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.IsPaired">
            <summary>
            Gets a value indicating whether this instance is paired.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.IsLoop">
            <summary>
            Gets a value indicating whether this instance represents a loop.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.Master">
            <summary>
            Gets master association.
            </summary>
            <remarks>
            If association is master, returns it. Otherwise returns paired association.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Unable to find master association.</exception>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.Multiplicity">
            <summary>
            Gets the association multiplicity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.Reversed">
            <summary>
            Gets or sets the reversed paired <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.OnTargetRemove">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType"/> object removal.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.AssociationInfo.OnOwnerRemove">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerType"/> object removal.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.AssociationInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> objects.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.NodeCollection`1">
            <summary>
            A base class for collection of nodes in model.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
        </member>
        <member name="F:Xtensive.Orm.Model.NodeCollection`1.Empty">
            <summary>
            Gets empty collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.Add(`0)">
            <summary>
            Adds new element to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.InvalidOperationException">Item already exists.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.Contains(System.String)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value"><typeparamref name="TNode"/> if it was found; otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if value is found by specified <paramref name="key"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.NodeCollection`1.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.NodeCollection`1.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.NodeCollection`1.Name">
            <summary>
            Gets the name of this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.NodeCollection`1.FullName">
            <summary>
            Gets the full name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.NodeCollection`1.Item(System.String)">
            <summary>
            An indexer that provides access to collection items.
            Returns <see langword="default(TNode)"/> if there is no such item.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.Find(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
            <param name="type"><see cref="T:Xtensive.Orm.Model.TypeInfo"/> to find associations for.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.Find(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
            <param name="type"><see cref="T:Xtensive.Orm.Model.TypeInfo"/> to find outgoing associations for.</param>
            <param name="target">if set to <see langword="true"/> then only target associations will be returned; otherwise only owner associations.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnAttributes">
            <summary>
            Column attributes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnGroup">
            <summary>
            Describes a group of columns that belongs to the specified <see cref="P:Xtensive.Orm.Model.ColumnGroup.TypeInfoRef"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnGroup.#ctor(Xtensive.Orm.Model.TypeInfoRef,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The type.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnGroup.#ctor(Xtensive.Orm.Model.TypeInfoRef,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="type">The type.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnGroup.TypeInfoRef">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.TypeInfoRef"/> pointing to <see cref="T:Xtensive.Orm.Model.TypeInfo"/>
            this column group belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnGroup.Keys">
            <summary>
            Gets the indexes of key columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnGroup.Columns">
            <summary>
            Gets the indexes of all columns.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnIndexMap">
            <summary>
            A map of useful column indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnIndexMap.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="system">The system columns.</param>
            <param name="lazyLoad">The regular columns.</param>
            <param name="regular">The lazy load columns.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnIndexMap.System">
            <summary>
            Gets or sets positions of system columns within <see cref="T:Xtensive.Orm.Model.IndexInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnIndexMap.LazyLoad">
            <summary>
            Gets or sets positions of lazy load columns within <see cref="T:Xtensive.Orm.Model.IndexInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnIndexMap.Regular">
            <summary>
            Gets or sets positions of regular columns (not system and not lazy load) within <see cref="T:Xtensive.Orm.Model.IndexInfo"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnInfo">
            <summary>
            Describes a single column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.Equals(Xtensive.Orm.Model.ColumnInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.#ctor(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field">The <see cref="P:Xtensive.Orm.Model.ColumnInfo.Field"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfo.#ctor(Xtensive.Orm.Model.FieldInfo,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field"><see cref="P:Xtensive.Orm.Model.ColumnInfo.Field"/> property value.</param>
            <param name="valueType"><see cref="P:Xtensive.Orm.Model.ColumnInfo.ValueType"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsSystem">
            <summary>
            Gets or sets a value indicating whether this column is system.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsDeclared">
            <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsInherited">
            <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this column is contained by primary key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether column is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether  property will be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Field">
            <summary>
            Gets or sets corresponding field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.ValueType">
            <summary>
            Specifies the type that should be used to store the
            value of the field (available for properties that can be mapped
            to multiple data types).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Length">
            <summary>
            Gets or sets the length of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Scale">
            <summary>
            Gets or sets the scale of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Precision">
            <summary>
            Gets or sets the precision of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.DefaultValue">
            <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.CultureInfo">
            <summary>
            Gets or sets column <see cref="P:Xtensive.Orm.Model.ColumnInfo.CultureInfo"/> info.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfo.Indexes">
            <summary>
            Gets or the indexes this field is included to.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.ColumnInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Implicit(Xtensive.Orm.Model.ColumnInfo)~Xtensive.Orm.Model.ColumnInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Inequality(Xtensive.Orm.Model.ColumnInfoRef,Xtensive.Orm.Model.ColumnInfoRef)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Equality(Xtensive.Orm.Model.ColumnInfoRef,Xtensive.Orm.Model.ColumnInfoRef)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Equals(Xtensive.Orm.Model.ColumnInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.#ctor(Xtensive.Orm.Model.ColumnInfo)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="columnInfo">The <see cref="T:Xtensive.Orm.Model.ColumnInfo"/> instance.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.ColumnInfoRef.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="typeName">Column type name.</param>
            <param name="columnName">Column name.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfoRef.TypeName">
            <summary>
            Gets type name of reflecting <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfoRef.FieldName">
            <summary>
            Gets name of the <see cref="T:Xtensive.Orm.Model.FieldInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfoRef.ColumnName">
            <summary>
            Gets name of the <see cref="T:Xtensive.Orm.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.ColumnInfoRef.CultureInfo">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Model.ColumnInfoRef.CultureInfo"/> info of the <see cref="T:Xtensive.Orm.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.DomainModel">
            <summary>
            A mapping model of storage.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.DomainModel.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.DomainModel.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.DomainModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.DomainModel"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.Types">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instances contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.RealIndexes">
            <summary>
            Gets real indexes contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.FullTextIndexes">
            <summary>
            Gets full-text indexes contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.Hierarchies">
            <summary>
            Gets the hierarchies.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.Associations">
            <summary>
            Gets the collection providing information about associations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.DomainModel.Databases">
            <summary>
            Gets the collection providing information about databases.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.DomainModelExtensions">
            <summary>
            Extension methods related to <see cref="T:Xtensive.Orm.Model.DomainModel"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.DomainModelExtensions.ToStoredModel(Xtensive.Orm.Model.DomainModel,Xtensive.Orm.Model.TypeIdRegistry,System.Func{Xtensive.Orm.Model.TypeInfo,System.Boolean})">
            <summary>
            Converts speicified <see cref="T:Xtensive.Orm.Model.DomainModel"/> to corresponding <see cref="T:Xtensive.Orm.Model.Stored.StoredDomainModel"/>.
            </summary>
            <param name="model">The model to convert.</param>
            <param name="typeIdRegistry">Type identifier registry.</param>
            <param name="filter">Model filter.</param>
            <returns>A result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.DomainModelExtensions.Reorder(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.AssociationInfo})">
            <summary>
            Reorders the specified sequence of <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> using <see cref="T:Xtensive.Sorting.TopologicalSorter"/>.
            </summary>
            <param name="origin">The origin.</param>
            <returns>A reordered sequence.</returns>
        </member>
        <member name="T:Xtensive.Orm.Model.FieldAttributes">
            <summary>
            Field attributes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FieldInfo">
            <summary>
            Describes a single field.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.FieldInfo.NoFieldId">
            <summary>
            "No <see cref="F:Xtensive.Orm.Model.FieldInfo.NoFieldId"/>" value (<see cref="F:Xtensive.Orm.Model.FieldInfo.NoFieldId"/> is unknown or undefined).
            Value is <see langword="0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.FieldInfo.MinFieldId">
            <summary>
            Minimal possible <see cref="P:Xtensive.Orm.Model.FieldInfo.FieldId"/> value.
            Value is <see langword="100"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.GetAssociation(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Gets or sets the field association.
            </summary>
            <param name="targetType"></param>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.ExtractValue(Xtensive.Tuples.Tuple)">
            <summary>
            Extracts the field value from the specified <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The tuple to extract value from.</param>
            <returns><see cref="T:Xtensive.Tuples.Tuple"/> instance with the extracted value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.Equals(Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldAttributes)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The type.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.FieldId">
            <summary>
            Gets or sets the field identifier uniquely identifying the field
            in <see cref="P:Xtensive.Orm.Model.TypeInfo.Fields"/> collection of <see cref="P:Xtensive.Orm.Model.FieldInfo.ReflectedType"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsSystem">
            <summary>
            Gets a value indicating whether this property is system.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.SkipVersion">
            <summary>
            Gets a value indicating whether this property is not used within an entity version.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.ManualVersion">
            <summary>
            Gets a value indicating whether this property belongs to an entity version. Updated manually.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.AutoVersion">
            <summary>
            Gets a value indicating whether this property belongs to an entity version. Updated automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsTypeId">
            <summary>
            Gets a value indicating whether this property contains type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsTypeDiscriminator">
            <summary>
            Gets a value indicating whether this property is type discriminator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsDeclared">
            <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsEnum">
            <summary>
            Gets a value indicating whether this property is enum.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsInherited">
            <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this property is contained by primary key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsNested">
            <summary>
            Gets a value indicating whether this property is nested.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsExplicit">
            <summary>
            Gets a value indicating whether this property explicitly implemented.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsInterfaceImplementation">
            <summary>
            Gets a value indicating whether this property implements property of one or more interfaces.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsPrimitive">
            <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsEntity">
            <summary>
            Gets a value indicating whether this property is reference to Entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsStructure">
            <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsEntitySet">
            <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether property will be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.OriginalName">
            <summary>
            Gets or sets original name of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.ValueType">
            <summary>
            Gets or sets the type of the value of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.ItemType">
            <summary>
            Gets or sets the item type for field that describes the EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Length">
            <summary>
            Gets or sets the maximal length of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.DefaultValue">
            <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.DefaultSqlExpression">
            <summary>
            Gets or sets arbitrary SQL expression as default value for this field.
            This default value has higher priority than <see cref="P:Xtensive.Orm.Model.FieldInfo.DefaultValue"/>.
            <see langword="null"/> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.MappingInfo">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Model.FieldInfo.MappingInfo"/> for current field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.UnderlyingProperty">
            <summary>
            Gets the underlying system property.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.DeclaringField">
            <summary>
            Gets or sets the declaring field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Parent">
            <summary>
            Gets or sets the parent field for nested fields.
            </summary>
            <remarks>
            For not nested fields return value is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.ReflectedType">
            <summary>
            Gets the type that was used to obtain this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.DeclaringType">
            <summary>
            Gets the type where the field is declared.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Fields">
            <summary>
            Gets the nested fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Column">
            <summary>
            Gets or sets the column associated with this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.AdapterIndex">
            <summary>
            Gets or sets field's adapter index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Validators">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Validation.IPropertyValidator"/> instances
            associated with this field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.HasValidators">
            <summary>
            Gets value indicating if this field
            has associated validators.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.HasImmediateValidators">
            <summary>
            Gets value indicating if this field
            has associated immediate validators.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.Columns">
            <summary>
            Gets field columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfo.IsDynalicallyDefined">
            <summary>
            Gets a value indicating whether field is dynamically defined.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FieldInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FieldInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoCollection.Find(Xtensive.Orm.Model.FieldAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoCollection.Find(Xtensive.Orm.Model.FieldAttributes,Xtensive.Core.MatchType)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoCollection.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.FieldInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.FieldInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.FieldInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Implicit(Xtensive.Orm.Model.FieldInfo)~Xtensive.Orm.Model.FieldInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Inequality(Xtensive.Orm.Model.FieldInfoRef,Xtensive.Orm.Model.FieldInfoRef)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Equality(Xtensive.Orm.Model.FieldInfoRef,Xtensive.Orm.Model.FieldInfoRef)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.Equals(Xtensive.Orm.Model.FieldInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FieldInfoRef.#ctor(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="fieldInfo"><see cref="T:Xtensive.Orm.Model.FieldInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfoRef.TypeRef">
            <summary>
            Name of the type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FieldInfoRef.FieldName">
            <summary>
            Name of the field.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FieldMap">
            <summary>
            Maps type fields to interface fields and vice versa.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FullTextColumnInfo">
            <summary>
            Describes single column in full-text index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextColumnInfo.#ctor(Xtensive.Orm.Model.ColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FullTextColumnInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FullTextColumnInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.Insert(System.Int32,Xtensive.Orm.Model.FullTextColumnInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.RemoveAt(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.FullTextIndexInfo">
            <summary>
            Describes a single full-text index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfo.#ctor(Xtensive.Orm.Model.IndexInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FullTextIndexInfo.PrimaryIndex">
            <summary>
            Gets the primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.FullTextIndexInfo.Columns">
            <summary>
            Gets the full-text index columns.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.FullTextIndexInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.TryGetValue(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FullTextIndexInfo@)">
            <summary>
            Tries get <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo"/> by provided <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="fullTextIndexInfo">The full text index info.</param>
            <returns><see langword="true"/> when the full-text index is found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.Add(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FullTextIndexInfo)">
            <summary>
            Registers specified full-text index by type key.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="fullTextIndexInfo">The full text index info.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.FullTextIndexInfoCollection.Item(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo"/> by the specified type.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Index is not found.</exception>
        </member>
        <member name="T:Xtensive.Orm.Model.HierarchyInfo">
            <summary>
            Describes a single persistent type hierarchy.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.HierarchyInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.HierarchyInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.HierarchyInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.KeyInfo,Xtensive.Orm.Model.InheritanceSchema,Xtensive.Orm.Model.TypeDiscriminatorMap)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="root">The hierarchy root.</param>
            <param name="key">The key info.</param>
            <param name="inheritanceSchema">The inheritance schema.</param>
            <param name="typeDiscriminatorMap">The type discriminator map.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.HierarchyInfo.Root">
            <summary>
            Gets the root of the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.HierarchyInfo.InheritanceSchema">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.InheritanceSchema"/> for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.HierarchyInfo.Types">
            <summary>
            Gets the types of the current <see cref="T:Xtensive.Orm.Model.HierarchyInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.HierarchyInfo.Key">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Key"/> for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.HierarchyInfo.TypeDiscriminatorMap">
            <summary>
            Gets the type discriminator.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.HierarchyInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.HierarchyInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.HierarchyInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.IndexAttributes">
            <summary>
            Index attributes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.IndexInfo">
            <summary>
            Describes a single index in terms of storage.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="declaringType">The <see cref="T:Xtensive.Orm.Model.TypeInfo"/> that declares this instance.</param>
            <param name="indexAttributes"><see cref="T:Xtensive.Orm.Model.IndexAttributes"/> attributes for this instance.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes,Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="reflectedType">Reflected type.</param>
            <param name="ancestorIndex">The ancestors index.</param>
            <param name="indexAttributes"><see cref="T:Xtensive.Orm.Model.IndexAttributes"/> attributes for this instance.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes,Xtensive.Orm.Model.IndexInfo,Xtensive.Orm.Model.IndexInfo[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="reflectedType">Reflected type.</param>
            <param name="indexAttributes">The index attributes.</param>
            <param name="baseIndex">Base index.</param>
            <param name="baseIndexes">The base indexes.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.ColumnIndexMap">
            <summary>
            Gets or sets the column index map.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.Columns">
            <summary>
            Gets a collection of all the columns that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.KeyColumns">
            <summary>
            Gets a collection of columns that are included into the index as index key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.ValueColumns">
            <summary>
            Gets a collection of non key columns that are included into the index as index value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IncludedColumns">
            <summary>
            Gets a Collection of columns that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor containing all the <see cref="P:Xtensive.Orm.Model.IndexInfo.Columns"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.KeyTupleDescriptor">
            <summary>
            Gets the tuple descriptor containing just <see cref="P:Xtensive.Orm.Model.IndexInfo.KeyColumns"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.UnderlyingIndexes">
            <summary>
            Gets the underlying indexes for this instance. 
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.DeclaringType">
            <summary>
            Gets the type that declares this member.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.ReflectedType">
            <summary>
            Gets the type that was used to obtain this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.DeclaringIndex">
            <summary>
            Gets the declaring index for this index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.FilterByTypes">
            <summary>
            Gets the types for <see cref="F:Xtensive.Orm.Model.IndexAttributes.Filtered"/> index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.FilterExpression">
            <summary>
            Gets expression that defines range for partial index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.Filter">
            <summary>
            Gets filter that defines range for partial index.
            This is built upon <see cref="P:Xtensive.Orm.Model.IndexInfo.FilterExpression"/>
            on late stage of <see cref="T:Xtensive.Orm.Model.DomainModel"/> build.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.SelectColumns">
            <summary>
            Gets the column indexes for <see cref="F:Xtensive.Orm.Model.IndexAttributes.View"/> index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsTyped">
            <summary>
            Gets or sets a value indicating whether this instance is typed index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is unique index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this instance is abstract.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this instance is virtual index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsSecondary">
            <summary>
            Gets a value indicating whether this instance is secondary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsPartial">
            <summary>
            Gets a value indicating whether this instance is a partial index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfo.IsClustered">
            <summary>
            Gets a value indicating whether this instance is clustered index.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.IndexInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.IndexInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoCollection.Find(Xtensive.Orm.Model.IndexAttributes)">
            <summary>
            Finds <see cref="T:Xtensive.Orm.Model.IndexInfo"/> objects by the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>A sequence of found objects.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoCollection.Find(Xtensive.Orm.Model.IndexAttributes,Xtensive.Core.MatchType)">
            <summary>
            Finds <see cref="T:Xtensive.Orm.Model.IndexInfo"/> objects by the specified criteria and match type.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="matchType">Type of the match.</param>
            <returns>A sequence of found objects.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.IndexInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.IndexInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.IndexInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Implicit(Xtensive.Orm.Model.IndexInfo)~Xtensive.Orm.Model.IndexInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.IndexInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.Equals(Xtensive.Orm.Model.IndexInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Equality(Xtensive.Orm.Model.IndexInfoRef,Xtensive.Orm.Model.IndexInfoRef)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Inequality(Xtensive.Orm.Model.IndexInfoRef,Xtensive.Orm.Model.IndexInfoRef)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.IndexInfoRef.#ctor(Xtensive.Orm.Model.IndexInfo)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="indexInfo"><see cref="T:Xtensive.Orm.Model.IndexInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfoRef.IndexName">
            <summary>
            Name of the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.IndexInfoRef.TypeName">
            <summary>
            Name of the reflecting type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.InheritanceSchema">
            <summary>
            Enumerates all supported 'class to tables mapping' schemes.
            </summary>
            <remarks>See M.Fowler - "Patterns of Enterprise Application Architecture".</remarks>
        </member>
        <member name="F:Xtensive.Orm.Model.InheritanceSchema.Default">
            <summary>
            Is equal to <see cref="F:Xtensive.Orm.Model.InheritanceSchema.ClassTable"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.InheritanceSchema.ClassTable">
            <summary>
            One table per class in the inheritance structure. Inherited properties are stored in the parent class.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.InheritanceSchema.SingleTable">
            <summary>
            Maps all fields of all classes of an inheritance structure into a single table.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.InheritanceSchema.ConcreteTable">
            <summary>
            One table for each concrete class in the inheritance hierarchy. 
            Inherited properties are duplicated in the descendant tables.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.KeyField">
            <summary>
            Describes a field that is a part of a primary key.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyField.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyField.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyField.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyField.#ctor(System.String,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.KeyField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyField.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.KeyInfo">
            <summary>
            Describes key for a particular <see cref="F:Xtensive.Orm.Model.KeyInfo.hierarchy"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyInfo.Lock(System.Boolean)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Hierarchy must be set before locking this instance.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.KeyInfo.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Orm.Model.FieldInfo},System.Collections.Generic.IList{Xtensive.Orm.Model.ColumnInfo},Xtensive.Tuples.TupleDescriptor,System.Int32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="fields">The key fields.</param>
            <param name="columns">The key columns.</param>
            <param name="tupleDescriptor">Key tuple descriptor.</param>
            <param name="typeIdColumnIndex">Index of the type id column.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.SingleColumnType">
            <summary>
            Gets single column type if this <see cref="T:Xtensive.Orm.Model.KeyInfo"/>
            has single column (excluding possible TypeId column).
            If this <see cref="T:Xtensive.Orm.Model.KeyInfo"/> has multiple columns
            returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.Hierarchy">
            <summary>
            Gets the hierarchy this key belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.Fields">
            <summary>
            Gets the fields forming the key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.Columns">
            <summary>
            Gets the columns forming the key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.GeneratorName">
            <summary>
            Gets the key generator name.
            This name is used as service name in IoC.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.GeneratorBaseName">
            <summary>
            Gets generator base name.
            This name don't include database suffix
            and is used to build physical table/sequence name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.GeneratorKind">
            <summary>
            Gets <see cref="T:Xtensive.Orm.KeyGeneratorKind"/> for this <see cref="T:Xtensive.Orm.Model.KeyInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor of the key.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.TypeIdColumnIndex">
            <summary>
            Gets the index of the column related to field with <see cref="P:Xtensive.Orm.Model.FieldInfo.IsTypeId"/>==<see langword="true"/>.
            If there is no such field, returns <see langword="-1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.ContainsForeignKeys">
            <summary>
            Gets or sets a value indicating whether key contains foreign keys.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.Sequence">
            <summary>
            Gets the information on associated sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.IsFirstAmongSimilarKeys">
            <summary>
            Gets the value indicating this key is the first one built among similar keys.
            All similar keys share the same <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier"/> value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier">
            <summary>
            Gets the equality identifier for this key.
            <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier"/> is used as an additional value to compare
            when actual keys are compared for equality. 
            So two keys are equal when their fields are equal and 
            they share the same <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier"/> value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.ModelVisitor`1">
            <summary>
            An abstract base class for all <see cref="T:Xtensive.Orm.Model.DomainModel"/> visitors.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.Visit(Xtensive.Orm.Model.Node)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>Visit result.</returns>
            <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitKeyField(Xtensive.Orm.Model.KeyField)">
            <summary>
            Visits key field.
            </summary>
            <param name="keyField">The key field.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitColumnInfo(Xtensive.Orm.Model.ColumnInfo)">
            <summary>
            Visits a column.
            </summary>
            <param name="column">The column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitFieldInfo(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Visits a field.
            </summary>
            <param name="field">The field.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitKeyInfo(Xtensive.Orm.Model.KeyInfo)">
            <summary>
            Visits a <see cref="T:Xtensive.Orm.Model.KeyInfo"/> node.
            </summary>
            <param name="keyInfo">The key provider.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitSequenceInfo(Xtensive.Orm.Model.SequenceInfo)">
            <summary>
            Visits a <see cref="T:Xtensive.Orm.Model.SequenceInfo"/> node.
            </summary>
            <param name="sequenceInfo">The sequence info.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitIndexInfo(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Visits an index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitHierarchyInfo(Xtensive.Orm.Model.HierarchyInfo)">
            <summary>
            Visits a hierarchy.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitTypeInfo(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Visits a type.
            </summary>
            <param name="type">The type.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitAssociationInfo(Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Visits an association.
            </summary>
            <param name="association">The association.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitDomainModel(Xtensive.Orm.Model.DomainModel)">
            <summary>
            Visits domain model.
            </summary>
            <param name="domainModel">The domain model.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitFullTextIndexInfo(Xtensive.Orm.Model.FullTextIndexInfo)">
            <summary>
            Visits the full text index info.
            </summary>
            <param name="fullTextIndex">Full index of the text.</param>
        </member>
        <member name="T:Xtensive.Orm.Model.Multiplicity">
            <summary>
            Multiplicity of relationship.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.ZeroToOne">
            <summary>
            Zero to one. 
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany">
            <summary>
            Zero to many.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.OneToOne">
            <summary>
            One to one.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.OneToMany">
            <summary>
            One to many.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.ManyToOne">
            <summary>
            Many to one.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Multiplicity.ManyToMany">
            <summary>
            Many to many.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.OnRemoveAction">
            <summary>
            Defines actions that can be taken to preserve referential integrity.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OnRemoveAction.Default">
            <summary>
            The same as <see cref="F:Xtensive.Orm.OnRemoveAction.Deny"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OnRemoveAction.Deny">
            <summary>
            Indicates that exception will be thrown in case that removing object 
            is referenced by other object.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OnRemoveAction.Cascade">
            <summary>
            Indicates that delete cascading operation will be taken on objects 
            that are referenced by removing object.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OnRemoveAction.Clear">
            <summary>
            Indicates that <see langword="null"/> value will be assigned 
            to corresponding reference fields of referencing object
            or the whole item that is used in n-ry relations will be removed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OnRemoveAction.None">
            <summary>
            Indicates that no action will be executed to corresponding reference field 
            of referencing object.
            </summary>
            <remarks>This option is prohibited for fields of <c>EntitySet&lt;T&gt;</c> type.</remarks>
        </member>
        <member name="T:Xtensive.Orm.Model.PartialIndexFilterInfo">
            <summary>
            Partial index filter definition.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.PartialIndexFilterInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.PartialIndexFilterInfo.Expression">
            <summary>
            Expression that defines partial index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.PartialIndexFilterInfo.Fields">
            <summary>
            Fields used in <see cref="P:Xtensive.Orm.Model.PartialIndexFilterInfo.Expression"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.SequenceInfo">
            <summary>
            Provides information about sequence associated with <see cref="T:Xtensive.Orm.Model.KeyInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.SequenceInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The sequence name.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.SequenceInfo.Seed">
            <summary>
            Gets or sets the seed value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.SequenceInfo.Increment">
            <summary>
            Gets or sets the increment value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredAssociationInfo">
            <summary>
            An xml serializable representation of <see cref="T:Xtensive.Orm.Model.AssociationInfo"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredNode">
            <summary>
            A xml serializable representation of <see cref="F:Xtensive.Orm.Model.Stored.StoredNode.MappingName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredNode.Name">
            <summary>
            <see cref="P:Xtensive.Orm.Model.Node.Name"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredNode.MappingName">
            <summary>
            <see cref="P:Xtensive.Orm.Model.MappedNode.MappingName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingField">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerField"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingFieldName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingField"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedTypeName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Multiplicity">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.Multiplicity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.MultiplicityName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Multiplicity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Reversed">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.Reversed"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReversedName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Reversed"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.IsMaster">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.IsMaster"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.AssociationInfo.AuxiliaryType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorTypeName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorType"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredDomainModel">
            <summary>
            An xml serializable representation of <see cref="T:Xtensive.Orm.Model.DomainModel"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Types">
            <summary>
            <see cref="P:Xtensive.Orm.Model.DomainModel.Types"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Associations">
            <summary>
            <see cref="P:Xtensive.Orm.Model.DomainModel.Associations"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Hierarchies">
            <summary>
            <see cref="P:Xtensive.Orm.Model.DomainModel.Hierarchies"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredDomainModel.Deserialize(System.String)">
            <summary>
            Deserializes <see cref="T:Xtensive.Orm.Model.Stored.StoredDomainModel"/> from string.
            </summary>
            <param name="serialized">Serialized instance.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredDomainModel.Serialize">
            <summary>
            Serializes this instance to string.
            </summary>
            <returns>Serialized instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredDomainModel.UpdateReferences">
            <summary>
            Updates references between nodes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredFieldInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.FieldInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.DeclaringType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.DeclaringType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.PropertyName">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.UnderlyingProperty"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.OriginalName">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.OriginalName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.ValueType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.ValueType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Parent">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.Parent"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Fields">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.Fields"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Length">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.Length"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.ItemType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.ItemType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsSystem">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsSystem"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsTypeId">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsTypeId"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEnum">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEnum"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsPrimaryKey">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsPrimaryKey"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsExplicit">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsExplicit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsInterfaceImplementation">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsInterfaceImplementation"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsPrimitive">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsPrimitive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEntity">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEntity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsStructure">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsStructure"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEntitySet">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEntitySet"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsNullable">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsNullable"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsLazyLoad">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsLazyLoad"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredFieldInfo.PrimitiveFields">
            <summary>
            Gets the primitive fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsNested">
            <summary>
            <see cref="P:Xtensive.Orm.Model.FieldInfo.IsNested"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredHierarchyInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.HierarchyInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.Root">
            <summary>
            <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Root"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.InheritanceSchema">
            <summary>
            <see cref="P:Xtensive.Orm.Model.HierarchyInfo.InheritanceSchema"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.Types">
            <summary>
            <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Types"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.Stored.StoredTypeInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.UnderlyingType">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.UnderlyingType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.TypeId">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.HierarchyRoot">
            <summary>
            If not <see langword="null"/>, indicates this instance is a hierarchy root,
            and value of this property specifies its <see cref="T:Xtensive.Orm.Model.InheritanceSchema"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.MappingSchema">
            <summary>
            <see cref="P:Xtensive.Orm.Model.SchemaMappedNode.MappingDatabase"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.MappingDatabase">
            <summary>
            <see cref="P:Xtensive.Orm.Model.SchemaMappedNode.MappingDatabase"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Hierarchy">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.Hierarchy"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Fields">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.Fields"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllFields">
            <summary>
            Contains all fields inherited by this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>
            plus all fields in declared in this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Associations">
            <summary>
            Associations outgoing from this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Ancestor">
            <summary>
            Gets the ancestors of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AncestorName">
            <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Ancestor"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllAncestors">
            <summary>
            Gets both direct and indirect ancestors of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Descendants">
            <summary>
            Gets direct descendants of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllDescendants">
            <summary>
            Gets both direct and indirect descendants of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.GetField(System.String)">
            <summary>
            Gets the field info by field name (possibly, dotted).
            </summary>
            <param name="fieldName">The field name.</param>
            <returns>Specified field info, if found;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.GetField(System.String,System.Boolean)">
            <summary>
            Gets the field info by field name (possibly, dotted).
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="useAllFields">Search in <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllFields"/> rather then <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Fields"/>.</param>
            <returns>
            Specified field info, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsEntity">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.IsEntity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsAbstract">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.IsAbstract"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsInterface">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.IsInterface"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsStructure">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.IsStructure"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsSystem">
            <summary>
            <see cref="P:Xtensive.Orm.Model.TypeInfo.IsSystem"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.GenericTypeDefinition">
            <summary>
            Gets the name of the generic definition type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.GenericArguments">
            <summary>
            Gets the name of the generic argument type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsHierarchyRoot">
            <summary>
            Gets a value indicating whether this instance is hierarchy root.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsGeneric">
            <summary>
            Gets a value indicating whether underlying type is generic.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeAttributes">
            <summary>
            Type attributes.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Entity">
            <summary>
            Type is entity.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Structure">
            <summary>
            Type is structure.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Interface">
            <summary>
            Type is persistent interface.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Abstract">
            <summary>
            Type is abstract.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Materialized">
            <summary>
            Type is materialized interface.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.System">
            <summary>
            Type is system.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.Auxiliary">
            <summary>
            Type is auxilary (entity set item).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.GenericTypeDefinition">
            <summary>
            Type is generic type definition.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeAttributes.AutoGenericInstance">
            <summary>
            Type is automatically registered generic type instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeDiscriminatorMap">
            <summary>
            Type discriminator map.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeDiscriminatorMap.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeDiscriminatorMap.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeIndexInfoCollection">
            <summary>
            A collection of indexes that belongs to a particular <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.GetIndexesContainingAllData">
            <summary>
            Gets the minimal set of indexes containing all data for the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIndexInfoCollection.PrimaryIndex">
            <summary>
            Gets the primary index in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeIndexInfoCollection.RealPrimaryIndexes">
            <summary>
            Gets the list of real primary index in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeInfo">
            <summary>
            Represents an object describing any persistent type.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeInfo.NoTypeId">
            <summary>
            "No <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId"/>" value (<see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId"/> is unknown or undefined).
            Value is <see langword="0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Model.TypeInfo.MinTypeId">
            <summary>
            Minimal possible <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId"/> value.
            Value is <see langword="100"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.CreateEntityTuple(Xtensive.Tuples.Tuple,System.Int32)">
            <summary>
            Creates the tuple prototype with specified <paramref name="primaryKey"/>.
            </summary>
            <param name="primaryKey">The primary key to use.</param>
            <returns>
            The <see cref="P:Xtensive.Orm.Model.TypeInfo.TuplePrototype"/> with "injected" <paramref name="primaryKey"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.InjectPrimaryKey(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Injects the primary key into specified <paramref name="entityTuple"/>
            </summary>
            <param name="primaryKey">The primary key to inject.</param>
            <returns>
            The <paramref name="entityTuple"/> with "injected" <paramref name="primaryKey"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetDescendants">
            <summary>
            Gets the direct descendants of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetDescendants(System.Boolean)">
            <summary>
            Gets descendants of this instance.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested descendants will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetInterfaces">
            <summary>
            Gets the direct persistent interfaces this instance implements.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetInterfaces(System.Boolean)">
            <summary>
            Gets the persistent interfaces this instance implements.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implemented interfaces will be returned.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetImplementors">
            <summary>
            Gets the direct implementors of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetImplementors(System.Boolean)">
            <summary>
            Gets the direct implementors of this instance.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implementors will be returned.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetAncestor">
            <summary>
            Gets the ancestor.
            </summary>
            <returns>The ancestor</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetAncestors">
            <summary>
            Gets the ancestors recursively. Root-to-inheritor order.
            </summary>
            <returns>The ancestor</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetRoot">
            <summary>
            Gets the root of the hierarchy.
            </summary>
            <returns>The hierarchy root.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetTargetAssociations">
            <summary>
            Gets the associations this instance is participating in as target (it is referenced by other entities).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetOwnerAssociations">
            <summary>
            Gets the associations this instance is participating in as owner (it has references to other entities).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetRemovalAssociationSequence">
            <summary>
            Gets the association sequence for entity removal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetVersionFields">
            <summary>
            Gets the version field sequence.
            </summary>
            <returns>The version field sequence.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.GetVersionColumns">
            <summary>
            Gets the version columns.
            </summary>
            <returns>The version columns.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.UpdateState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfo.#ctor(Xtensive.Orm.Model.DomainModel,Xtensive.Orm.Model.TypeAttributes)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="model">The model.</param>
            <param name="typeAttributes">The type attributes.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsEntity">
            <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsAbstract">
            <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsInterface">
            <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsMaterialized">
            <summary>
            Gets a value indicating whether this instance is materialized interface.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsStructure">
            <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsSystem">
            <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is a leaf type,
            i.e. its <see cref="M:Xtensive.Orm.Model.TypeInfo.GetDescendants"/> method returns <see langword="0"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsOutboundOnly">
            <summary>
             Gets or sets a value indicating whether this instance is outbound only
             i.e. it's has only outgoing references
             </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsInboundOnly">
            <summary>
             Gets or sets a value indicating whether this instance is inbound only
             i.e. it's has only incoming references
             </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsAuxiliary">
            <summary>
            Gets or sets a value indicating whether this instance is auxiliary type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.IsAutoGenericInstance">
            <summary>
            Gets a value indicating whether this instance is automatically registered generic type instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.TypeId">
            <summary>
            Gets or sets the type identifier uniquely identifying the type in the domain model.
            </summary>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.UnderlyingType">
            <summary>
            Gets or sets the underlying system type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Columns">
            <summary>
            Gets the columns contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Indexes">
            <summary>
            Gets the indexes for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.FullTextIndex">
            <summary>
            Gets full-text index if any, otherwise gets <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Fields">
            <summary>
            Gets the fields contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.FieldMap">
            <summary>
            Gets the field map for implemented interfaces.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Model">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.DomainModel"/> this instance belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Hierarchy">
            <summary>
            Gets or sets the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Key">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Model.KeyInfo"/> for this type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.TypeDiscriminatorValue">
            <summary>
            Gets or sets the type discriminator value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.TuplePrototype">
            <summary>
            Gets the persistent type prototype.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.VersionExtractor">
            <summary>
            Gets the version tuple extractor.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.HasVersionFields">
            <summary>
            Gets a value indicating whether this instance has version fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.HasExplicitVersionFields">
            <summary>
            Gets a value indicating whether this instance has explicit version fields.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.HasVersionRoots">
            <summary>
            Gets or sets a value indicating whether this instance has version roots.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.StructureFieldMapping">
            <summary>
            Gets the structure field mapping.
            </summary>
            <value>The structure field mapping.</value>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.Validators">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Validation.IObjectValidator"/> instances
            associated with this type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfo.HasValidators">
            <summary>
            Gets value indicating if this type has validators (including field validators).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Contains(System.Type)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.TryGetValue(System.Type,Xtensive.Orm.Model.TypeInfo@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value"><see cref="T:Xtensive.Orm.Model.TypeInfo"/> if it was found; otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if value is found by specified <paramref name="key"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Remove(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Removes element from the the collection.
            </summary>
            <param name="value">Item to remove.</param>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Clear">
            <summary>
            Removes all objects from the
            collection instance.
            </summary>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Contains(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Determines whether collection contains a specific item.
            </summary>
            <param name="item">Value to search for.</param>
            <returns>
              <see langword="True"/> if the object is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Find(System.String)">
            <summary>
            Finds the type by its full name.
            </summary>
            <param name="fullName">The full name of the type to find.</param>
            <returns>Found type, if any; 
            <see langword="null" />, if there is no type with specified full name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindAncestor(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Finds the ancestor of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search ancestor for.</param>
            <returns><see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that is ancestor of specified <paramref name="item"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindDescendants(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Finds the set of direct descendants of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search descendants for.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are descendants of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindDescendants(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the set of descendants of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search descendants for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested descendants will be returned.</param>
            <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are descendants of specified <paramref name="item"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindInterfaces(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="item"/> implements.
            </summary>
            <param name="item">The type to search interfaces for.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are implemented by specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindInterfaces(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="item"/> implements.
            </summary>
            <param name="item">The type to search interfaces for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implemented interfaces will be returned.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are implemented by specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindImplementors(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Finds the set of direct implementors of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search implementors for.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are implementors of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindImplementors(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the set of implementors of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search implementors for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested implementors will be returned.</param>
            <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that are implementors of specified <paramref name="item"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindRoot(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Finds the root of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search root for.</param>
            <returns><see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance that is root of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindAncestor(System.Type)">
            <summary>
            Finds the ancestor of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="type"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Find(Xtensive.Orm.Model.TypeAttributes)">
            <summary>
            Finds all <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instances according to specified criteria.
            </summary>
            <param name="criteria">The attributes.</param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/> that contains all found instances.</returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.OnInserted(Xtensive.Orm.Model.TypeInfo,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RegisterInheritance(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Registers the connection between ancestor &amp; descendant.
            </summary>
            <param name="ancestor">The ancestor.</param>
            <param name="descendant">The descendant.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RegisterImplementation(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Registers the connection between interface and implementor.
            </summary>
            <param name="interface">The interface.</param>
            <param name="implementor">The implementor.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Item(System.Type)">
            <summary>
            An indexer that provides access to collection items.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Structures">
            <summary>
            Gets the structures that are contained in this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Entities">
            <summary>
            Gets the entities that are contained in this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Interfaces">
            <summary>
            Gets the interfaces that are contained in this collection.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Model.TypeInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.TypeInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Implicit(Xtensive.Orm.Model.TypeInfo)~Xtensive.Orm.Model.TypeInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Inequality(Xtensive.Orm.Model.TypeInfoRef,Xtensive.Orm.Model.TypeInfoRef)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Equality(Xtensive.Orm.Model.TypeInfoRef,Xtensive.Orm.Model.TypeInfoRef)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.Equals(Xtensive.Orm.Model.TypeInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Model.TypeInfoRef.#ctor(Xtensive.Orm.Model.TypeInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="typeInfo"><see cref="T:Xtensive.Orm.Model.TypeInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Orm.Model.TypeInfoRef.TypeName">
            <summary>
            Name of the type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntitySetActionCompletedEventArgs">
            <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1"/> item action completion.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntitySetEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1"/>-related events.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityFieldEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field-related events.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityEventArgs">
            <summary>
            Describes <see cref="P:Xtensive.Orm.EntityEventArgs.Entity"/>-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityEventArgs.#ctor(Xtensive.Orm.Entity)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityEventArgs.Entity">
            <summary>
            Gets the entity to which this event is related.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityFieldEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="field">The field.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldEventArgs.Field">
            <summary>
            Gets the field to which this event is related.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetEventArgs.#ctor(Xtensive.Orm.EntitySetBase)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entitySet">The entity set.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySetEventArgs.EntitySet">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.EntitySetBase"/> to which this event is related.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetActionCompletedEventArgs.#ctor(Xtensive.Orm.EntitySetBase,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entitySet">The entity set.</param>
            <param name="exception">The <see cref="P:Xtensive.Orm.EntitySetActionCompletedEventArgs.Exception"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySetActionCompletedEventArgs.Exception">
            <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.QueryEndpoint">
            <summary>
            Provides methods allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key"/>s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.All``1">
            <summary>
            The "starting point" for any LINQ query -
            a <see cref="T:System.Linq.IQueryable`1"/> enumerating all the instances
            of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the sequence element.</typeparam>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> enumerating all the instances
            of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.All(System.Type)">
            <summary>
            The "starting point" for dynamic LINQ query -
            a <see cref="T:System.Linq.IQueryable"/> enumerating all the instances
            of type <paramref name="elementType"/>.
            </summary>
            <param name="elementType">Type of the sequence element.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> enumerating all the instances
            of type <paramref name="elementType"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.FreeText``1(System.String)">
            <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
            <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
            <param name="searchCriteria">The search criteria in free text form.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:Xtensive.Orm.FullTextMatch`1"/>
            allowing to continue building the query.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.FreeText``1(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
            <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
            <param name="searchCriteria">The search criteria in free text form.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:Xtensive.Orm.FullTextMatch`1"/>
            allowing to continue building the query.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Single(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Entity with the specified key is not found.</exception>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.SingleOrDefault(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Single``1(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Single``1(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="keyValues"/> identify.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.SingleOrDefault``1(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.SingleOrDefault``1(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="F:Xtensive.Orm.QueryEndpoint.session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="keyValues"/> identify.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Many``1(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
            <summary>
            Fetches multiple instances of specified type  by provided <paramref name="keys"/>.
            </summary>
            <param name="keys">The source sequence.</param>
            <returns>The sequence of entities of type <typeparam name="T"/> matching provided <paramref name="keys"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Many``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Fetches multiple instances of specified type  by provided <paramref name="keys"/>.
            </summary>
            <param name="keys">The source sequence.</param>
            <returns>The sequence of entities of type <typeparam name="T"/> matching provided <paramref name="keys"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Execute``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Execute``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Execute``1(System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Execute``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them asyncronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Started task.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them asynchronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Started task.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them asyncronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them asynchronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them asynchronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them asynchronously if it's already cached;
            otherwise executes the <paramref name="query"/> delegate asynchronously
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Started task.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will not be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayed``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will not be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Object,System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.ExecuteDelayedAsync``1(System.Func{Xtensive.Orm.QueryEndpoint,System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Store``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores specified <paramref name="source"/> in the database
            and provides a query for stored items.
            </summary>
            <typeparam name="TElement">Item type.</typeparam>
            <param name="source">Items to store.</param>
            <returns>Query for stored items.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.Items``1(System.Linq.Expressions.Expression{System.Func{Xtensive.Orm.EntitySet{``0}}})">
            <summary>
            Creates query for the <see cref="T:Xtensive.Orm.EntitySet`1"/>
            defined by <paramref name="provider"/> expression.
            This method is suitable for usage within compiled queries.
            For regular queries you can query <see cref="T:Xtensive.Orm.EntitySet`1"/> directly.
            </summary>
            <typeparam name="TElement">Entity set element type.</typeparam>
            <param name="provider">Expression that defines <see cref="T:Xtensive.Orm.EntitySet`1"/>.</param>
            <returns>Created query.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryEndpoint.GetKeyByValues``1(System.Object[])">
            <exception cref="T:System.ArgumentException"><paramref name="keyValues"/> array is empty.</exception>
        </member>
        <member name="P:Xtensive.Orm.QueryEndpoint.Outer">
            <summary>
            Gets outer <see cref="T:Xtensive.Orm.QueryEndpoint"/>.
            For root <see cref="T:Xtensive.Orm.QueryEndpoint"/> returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.QueryEndpoint.Provider">
            <summary>
            Gets <see cref="T:System.Linq.IQueryProvider"/> implementation
            for this session.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.QueryEndpoint.RootBuilder">
            <summary>
            Gets <see cref="T:Xtensive.Orm.IQueryRootBuilder"/> associated with this instance.
            If <see cref="T:Xtensive.Orm.IQueryRootBuilder"/> is not set for this instance
            returns <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.QueryRootBuilder">
            <summary>
            A simple implementation of <see cref="T:Xtensive.Orm.IQueryRootBuilder"/>
            that allows query construction via generic methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.QueryRootBuilder.BuildRootExpression(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.QueryRootBuilder.BuildRootExpression``1">
            <summary>
            Creates root expression for specified <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <returns>Root expression for <typeparamref name="TEntity"/> query.</returns>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.CompilableProvider">
            <summary>
            Abstract base class for any query provider,
            that requires storage-specific compilation before in can be executed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProvider.#ctor(Xtensive.Orm.Rse.Providers.ProviderType,Xtensive.Orm.Rse.Providers.Provider[])">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryBuilder">
            <summary>
            Provides API for dealing with query pipeline.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ISessionService">
            <summary>
            A tagging interface marking any <see cref="T:Xtensive.Orm.Session"/>-level service.
            Session-level services are accessible via <see cref="P:Xtensive.Orm.Session.Services"/> property.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.TranslateQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Translates the specified LINQ query into SQL DOM query.
            </summary>
            <typeparam name="TResult">Type of result element.</typeparam>
            <param name="query">Query to translate.</param>
            <returns>Translated query.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.CompileQuery(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Compiles the specified SQL DOM query.
            </summary>
            <param name="query">Query to compile.</param>
            <returns>Compiled query.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.CreateParameterBinding(System.Type,System.Func{System.Object})">
            <summary>
            Creates new <see cref="T:Xtensive.Orm.Services.QueryParameterBinding"/> with specified
            <paramref name="valueType"/> and <paramref name="valueAccessor"/>.
            </summary>
            <param name="valueType">Value type to use.</param>
            <param name="valueAccessor">Value accessor to use.</param>
            <returns>Created binding.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.CreateRequest(Xtensive.Sql.Compiler.SqlCompilationResult,System.Collections.Generic.IEnumerable{Xtensive.Orm.Services.QueryParameterBinding})">
            <summary>
            Builds request using specified <paramref name="compiledQuery"/> and <paramref name="bindings"/>.
            </summary>
            <returns>Built request.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.CreateCommand(Xtensive.Orm.Services.QueryRequest)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Services.QueryCommand"/> that is ready for execution
            by preparing the specified <paramref name="request"/> in current session.
            </summary>
            <param name="request">Request to use.</param>
            <returns>Created command.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryBuilder.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryCommand">
            <summary>
            Representation of a SQL command similar to <see cref="T:System.Data.Common.DbCommand"/>.
            Unlike <see cref="T:System.Data.Common.DbCommand"/> this type is aware of <see cref="P:Xtensive.Orm.Session.Events"/>
            and does all nessesary logging of executed SQL.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryCommand.ExecuteReader">
            <summary>
            Executes query and returns <see cref="T:System.Data.Common.DbDataReader"/>
            for retrieving query results.
            </summary>
            <returns><see cref="T:System.Data.Common.DbDataReader"/> to use.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryCommand.ExecuteNonQuery">
            <summary>
            Executes query and returns number of affected rows.
            </summary>
            <returns>Number of affected rows.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryCommand.ExecuteScalar">
            <summary>
            Executes query and returns scalar result.
            </summary>
            <returns>Scalar result of query.</returns>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryCommand.CommandText">
            <summary>
            Gets SQL query to execute.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryRequest">
            <summary>
            Thread-safe immutable session-independent representation of a query.
            Note that <see cref="P:Xtensive.Orm.Services.QueryParameterBinding.ValueAccessor"/>
            might contain reference to a session thus turning corresponding request
            to a session-dependent object.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryRequest.CompiledQuery">
            <summary>
            Gets compiled statement.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryRequest.ParameterBindings">
            <summary>
            Gets all <see cref="T:Xtensive.Orm.Services.QueryParameterBinding"/> associated with this request.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryParameterBinding">
            <summary>
            Binding of a query parameter.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryParameterBinding.ValueType">
            <summary>
            Gets type of the parameter.
            Internally created <see cref="T:Xtensive.Orm.Services.QueryParameterBinding"/>s
            may have this property set to <see langword="null"/>.
            Any user-created <see cref="T:Xtensive.Orm.Services.QueryParameterBinding"/>
            always has this property set to non <see langword="null"/> value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryParameterBinding.ValueAccessor">
            <summary>
            Gets accessor of the parameter.
            This delegate returns type that is assignable
            to <see cref="P:Xtensive.Orm.Services.QueryParameterBinding.ValueType"/>
            unless <see cref="P:Xtensive.Orm.Services.QueryParameterBinding.ValueType"/> is null.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryParameterBinding.ParameterReference">
            <summary>
            Gets <see cref="T:Xtensive.Sql.Dml.SqlExpression"/> that allows
            to access parameter in SQL DOM query.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryTranslationResult">
            <summary>
            Result of LINQ query translation.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryTranslationResult.Query">
            <summary>
            Gets or sets SQL DOM query.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.QueryTranslationResult.ParameterBindings">
            <summary>
            Gets or sets parameter bindings for translated query.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.QueryFormatter">
            <summary>
            Transforms LINQ queries into various representations.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryFormatter.ToSqlString``1(System.Linq.IQueryable{``0})">
            <summary>
            Formats the specified <paramref name="query"/> in SQL.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="query">The query to format.</param>
            <returns>A string containing formatted query.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryFormatter.ToString``1(System.Linq.IQueryable{``0})">
            <summary>
            Formats the specified <paramref name="query"/> in C# notation.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="query">The query to format.</param>
            <returns>A string containing formatted query.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryFormatter.ToDbCommand``1(System.Linq.IQueryable{``0})">
            <summary>
            Formats the specified <paramref name="query"/> in <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="query">The query to format.</param>
            <returns>A <see cref="T:System.Data.Common.DbCommand"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.QueryFormatter.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Services.TransactionMonitor.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.TransactionState">
            <summary>
            Indicates operational state of the <see cref="T:Xtensive.Orm.Transaction"/> instance.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Default">
            <summary>
            Default transaction state (<see cref="F:Xtensive.Orm.TransactionState.NotActivated"/>).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.NotActivated">
            <summary>
            The transaction state is not activated.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Completed">
            <summary>
            The transaction is completed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Active">
            <summary>
            The transaction is active (is running).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Completing">
            <summary>
            The transaction is completing.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Committed">
            <summary>
            The transaction has been committed successfully.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.Committing">
            <summary>
            The transaction has started <see cref="M:Xtensive.Orm.Transaction.Commit"/> method but still running.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.RolledBack">
            <summary>
            The transaction has been rolled back.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionState.RollingBack">
            <summary>
            The transaction has started <see cref="M:Xtensive.Orm.Transaction.Rollback"/> method but still running.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TransactionStateExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.TransactionState"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionStateExtensions.IsActive(Xtensive.Orm.TransactionState)">
            <summary>
            Determines whether the specified transaction state describes active transaction.
            </summary>
            <param name="state">The state to check.</param>
            <returns>
            <see langword="True"/> if the specified state describes active transaction;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IgnoreRulesHandler.Handle">
            <summary>
            Runs handling of <see cref="T:Xtensive.Orm.Configuration.IgnoreRuleCollection"/>
            </summary>
            <returns>Modified extracted model</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IgnoreRulesHandler.#ctor(Xtensive.Orm.Upgrade.SchemaExtractionResult,Xtensive.Orm.Configuration.DomainConfiguration,Xtensive.Orm.Providers.MappingResolver)">
            <summary>
            Creates instance of <see cref="T:Xtensive.Orm.Configuration.IgnoreRuleCollection"/> handler
            </summary>
            <param name="model">Extracted model</param>
            <param name="configuration">Configuration of domain</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeActionSequence">
            <summary>
            A sequence of upgrade actions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeActionSequence.ProcessWith(System.Action{System.Collections.Generic.IEnumerable{System.String}},System.Action{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Handles action sequence with specified processors.
            </summary>
            <param name="regularProcessor">Transactional processor.</param>
            <param name="nonTransactionalProcessor">Non-transactional processor.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeActionSequence.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeActionSequence.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeActionSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Upgrade.UpgradeActionSequence"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.Count">
            <summary>
            Gets the number of all actions in sequence (including non-transactional commands).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PreCleanupDataCommands">
            <summary>
            Gets or sets pre-cleanup data commands.
            </summary>
            <value>The pre-cleanup data commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CleanupDataCommands">
            <summary>
            Gets or sets the cleanup data commands.
            </summary>
            <value>The cleanup data commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PreUpgradeCommands">
            <summary>
            Gets or sets the pre upgrade commands.
            </summary>
            <value>The pre upgrade commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.UpgradeCommands">
            <summary>
            Gets or sets the upgrade commands.
            </summary>
            <value>The upgrade commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CopyDataCommands">
            <summary>
            Gets or sets the copy data commands.
            </summary>
            <value>The copy data commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.PostCopyDataCommands">
            <summary>
            Gets or sets the post copy data commands.
            </summary>
            <value>The post copy data commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.CleanupCommands">
            <summary>
            Gets or sets the cleanup commands.
            </summary>
            <value>The cleanup commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.NonTransactionalEpilogCommands">
            <summary>
            Gets or sets the non transactional epilog commands.
            </summary>
            <value>The non transactional epilog commands.</value>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeActionSequence.NonTransactionalPrologCommands">
            <summary>
            Gets or sets the non transactional prolog commands.
            </summary>
            <value>The non transactional prolog commands.</value>
        </member>
        <member name="T:Xtensive.Orm.UrlInfo">
            <summary>
            Holds an URL and provides easy access to its different parts.
            </summary>
            <remarks>
            <para>
            The common URL format that would be converted 
            to the <see cref="T:Xtensive.Orm.UrlInfo"/> can be represented 
            in the BNF form as following:
            <code lang="BNF" outline="true">
            url ::= protocol://[user[:password]@]host[:port]/resource[?parameters]
            protocol ::= alphanumx[protocol]
            user ::= alphanumx[user]
            password ::= alphanumx[password]
            host ::= hostname | hostnum
            port ::= digits
            resource ::= name
            parameters ::= parameter[&amp;parameter]
            
            hostname ::= name[.hostname]
            hostnum ::= digits.digits.digits.digits
            
            parameter ::= name=[name]
            
            name ::= alpanumx[name]
            
            digits ::= digit[digits]
            alphanumx ::= alphanum | escape | $ | - | _ | . | + | ! | * | " | ' | ( | ) | , | ; | # | space
            alphanum ::= alpha | digit
            escape ::= % hex hex
            hex ::= digit | a | b | c | d | e | f | A | B | C | D | E | F
            digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
            alpha ::= /* represents any unicode alpa character */
            </code>
            </para>
            <note>
            This not fully precise notation because it slightly simplified to be shorter.
            But it almost completely reflects <see cref="T:Xtensive.Orm.UrlInfo"/> URL parser
            capabilities.
            </note>
            <para>
            Here you can see several valid URL samples:
            <pre>
            tcp://localhost/
            tcp://server:40000/myResource
            tcp://admin:admin@localhost:40000/myResource?askTimeout=60
            </pre>
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.Parse(System.String)">
            <summary>
            Splits URL into parts (protocol, host, port, resource, user, password) and set all
            derived values to the corresponding properties of the instance.
            </summary>
            <param name="url">URL to split</param>
            <remarks>
            The expected URL format is as the following:
            proto://[[user[:password]@]host[:port]]/resource.
            Note that the empty URL will cause an exception.
            </remarks>
            <exception cref="T:System.ArgumentException">Specified <paramref name="url"/> is invalid (cannot be parsed).</exception>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.Equals(Xtensive.Orm.UrlInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.CompareTo(Xtensive.Orm.UrlInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.op_Equality(Xtensive.Orm.UrlInfo,Xtensive.Orm.UrlInfo)">
            <summary>
            Checks specified objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.op_Inequality(Xtensive.Orm.UrlInfo,Xtensive.Orm.UrlInfo)">
            <summary>
            Checks specified objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Deserilizing constructor.
            </summary>
             <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this deserialization. </param>
             <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate the data from. </param>
        </member>
        <member name="M:Xtensive.Orm.UrlInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization. </param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Url">
            <summary>
            Gets an URL this instance describes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Protocol">
            <summary>
            Gets the protocol part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"tcp"</b> is the protocol part of the "<b>tcp</b>://admin:password@localhost/resource" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Host">
            <summary>
            Gets the host part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"localhost"</b> is the host part of the "tcp://admin:password@<b>localhost</b>/resource" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Port">
            <summary>
            Gets the port part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>40000</b> is the port part of the "tcp://admin:password@localhost:<b>40000</b>/resource" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Resource">
            <summary>
            Gets the resource name part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"resource"</b> is the resource name part of the "tcp://admin:password@localhost/<b>resource</b>" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.User">
            <summary>
            Gets the user name part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"admin"</b> is the user name part of the "tcp://<b>admin</b>:password@localhost/resource" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Password">
            <summary>
            Gets the password part of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"password"</b> is the password part of the "tcp://admin:<b>password</b>@localhost/resource" URL).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.UrlInfo.Params">
            <summary>
            Gets additional parameters of the current <see cref="P:Xtensive.Orm.UrlInfo.Url"/>
            (e.g. <b>"param1=value1&amp;param2=value2"</b> is the additional parameters part
            of the "tcp://admin:password@localhost/resource?<b>param1=value1&amp;param2=value2</b>" URL).
            </summary>
            <remarks>
            <para>The mentioned part of the <see cref="P:Xtensive.Orm.UrlInfo.Url"/> is parsed
            and represented in a <see cref="T:System.Collections.Generic.Dictionary`2"/> form.</para>
            </remarks>
        </member>
        <member name="T:Xtensive.Orm.UrlInfoConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xtensive.Orm.UrlInfo"/> objects to and from other representations.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.UrlInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.UrlInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Validation.EmailConstraint">
            <summary>
            Ensures that email address is in correct format.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.FutureConstraint">
            <summary>
            Ensures that date value is in the future.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.LengthConstraint">
            <summary>
            Ensures field length (or item count) fits in specified range.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.LengthConstraint.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.LengthConstraint.Min">
            <summary>
            Gets or sets the minimal allowed length. Default is 0.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.LengthConstraint.Max">
            <summary>
            Gets or sets the maximal allowed length. Default is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.NotEmptyConstraint">
            <summary>
            Ensures that property value is not <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.NotNullConstraint">
            <summary>
            Ensures property value is not <see langword="null" />.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.NotNullOrEmptyConstraint">
            <summary>
            Ensures that property value is not 
            <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.PastConstraint">
            <summary>
            Ensures that date value is in the past.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.RangeConstraint">
            <summary>
            Ensures field value fits in the specified range.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.RangeConstraint.Min">
            <summary>
            Gets or sets the minimal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.RangeConstraint.Max">
            <summary>
            Gets or sets the maximal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.RegexConstraint">
            <summary>
            Ensures property value matches specified regular expression.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.RegexConstraint.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Validation.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="pattern"><see cref="T:System.Text.RegularExpressions.Regex"/> pattern.</param>
        </member>
        <member name="M:Xtensive.Orm.Validation.RegexConstraint.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="pattern"><see cref="T:System.Text.RegularExpressions.Regex"/> pattern.</param>
            <param name="options"><see cref="T:System.Text.RegularExpressions.Regex"/> options.</param>
        </member>
        <member name="P:Xtensive.Orm.Validation.RegexConstraint.Pattern">
            <summary>
            Gets or sets the regular expression pattern.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Validation.RegexConstraint.Options">
            <summary>
            Gets or sets the options, default value is <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Validation.ConstrainMode">
            <summary>
            Possible validation modes.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Validation.ConstrainMode.Default">
            <summary>
            The same as <see cref="F:Xtensive.Orm.Validation.ConstrainMode.OnValidate"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Validation.ConstrainMode.OnValidate">
            <summary>
            Property value will be checked on object validation.
            </summary>
            <remarks>
            Note that when inconsistent region is not open validation can be performed immediatly after setting property value.
            </remarks>
        </member>
        <member name="F:Xtensive.Orm.Validation.ConstrainMode.OnSetValue">
            <summary>
            Validation is performed before property value is set.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityInitializeOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> initialization operation.
            Actually, does nothing - it is used to suppress nested
            system operations.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityOperation">
            <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.KeyOperation">
            <summary>
            Describes an operation involving the <see cref="P:Xtensive.Orm.Operations.KeyOperation.Key"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operation">
            <summary>
            Base abstract class for all <see cref="T:Xtensive.Orm.IOperation"/> implementors.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IOperation">
            <summary>
            Contract for an operation that could be executed later
            after being logged in <see cref="T:Xtensive.Orm.OperationLog"/>.
            You shouldn't implement this interface directly. 
            Inherit from <see cref="T:Xtensive.Orm.Operation"/> instead.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IOperation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)">
            <summary>
            Prepares the operation using specified execution context.
            </summary>
            <param name="context">The operation execution context.</param>
        </member>
        <member name="M:Xtensive.Orm.IOperation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)">
            <summary>
            Executes the operation using specified execution context.
            </summary>
            <param name="context">The operation execution context.</param>
        </member>
        <member name="M:Xtensive.Orm.IOperation.Clone(System.Boolean)">
            <summary>
            Clones the operation, <see cref="P:Xtensive.Orm.IOperation.PrecedingOperations"/>,
            <see cref="P:Xtensive.Orm.IOperation.FollowingOperations"/> and <see cref="P:Xtensive.Orm.IOperation.UndoOperations"/>.
            </summary>
            <param name="withIdentifiedEntities">if set to <see langword="true"/> <see cref="P:Xtensive.Orm.IOperation.IdentifiedEntities"/>
            must be cloned as well.</param>
            <returns>Clone of the current operation.</returns>
        </member>
        <member name="P:Xtensive.Orm.IOperation.Title">
            <summary>
            Gets the title of the operation.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.Description">
            <summary>
            Gets the description of the operation.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.Type">
            <summary>
            Gets the type of the operation.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.PrecedingOperations">
            <summary>
            Gets the list of preconditions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.FollowingOperations">
            <summary>
            Gets the list of nested operations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.UndoOperations">
            <summary>
            Gets the list of undo operations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IOperation.IdentifiedEntities">
            <summary>
            Gets or sets the identified entities.
            Value of this property can be assigned just once.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operation.Clone(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <summary>
            Prepares the operation itself.
            </summary>
            <param name="context">The operation execution context.</param>
        </member>
        <member name="M:Xtensive.Orm.Operation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <summary>
            Executes the operation itself.
            </summary>
            <param name="context">The operation execution context.</param>
        </member>
        <member name="M:Xtensive.Orm.Operation.CloneSelf(Xtensive.Orm.Operation)">
            <summary>
            Clones the operation itself.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operation.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operation.Title">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.Type">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.PrecedingOperations">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.FollowingOperations">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.UndoOperations">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operation.IdentifiedEntities">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyOperation.#ctor(Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the entity.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.KeyOperation.Key">
            <summary>
            Gets the key of the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.KeyOperation.Description">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityOperation.#ctor(Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the entity.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.#ctor(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityInitializeOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.KeySetOperation">
            <summary>
            Describes operation over key set.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeySetOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="keys">The sequence of keys.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeySetOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Xtensive.Orm.Operations.KeySetOperation.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.KeySetOperation.Keys">
            <summary>
            Gets the key set.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationCompletedEventArgs">
            <summary>
            Arguments for <see cref="T:Xtensive.Orm.IOperation"/> completion events.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationEventArgs">
            <summary>
            Arguments for <see cref="T:Xtensive.Orm.IOperation"/>-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationEventArgs.#ctor(Xtensive.Orm.IOperation)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="operation">The <see cref="P:Xtensive.Orm.Operations.OperationEventArgs.Operation"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationEventArgs.Operation">
            <summary>
            Gets the operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationCompletedEventArgs.#ctor(Xtensive.Orm.IOperation,System.Boolean)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="operation">The <see cref="T:Xtensive.Orm.Operation"/> property value.</param>
            <param name="isCompleted"><see cref="P:Xtensive.Orm.Operations.OperationCompletedEventArgs.IsCompleted"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationCompletedEventArgs.IsCompleted">
            <summary>
            Gets the completion flag of the operation.
            <see langword="True" />, if operation was completed successfully;
            otherwise, <see langword="false" />.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistrationScope.RegisterEntityIdentifier(Xtensive.Orm.Key,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.OperationLogType">
            <summary>
            Defines possible operation log types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OperationLogType.SystemOperationLog">
            <summary>
            Log stores system operations.
            The default option.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OperationLogType.OutermostOperationLog">
            <summary>
            Log stores outermost operations.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.OperationLogType.UndoOperationLog">
            <summary>
            Log stores undo operations.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationRegistry">
            <summary>
            Operation registry for <see cref="P:Xtensive.Orm.Operations.OperationRegistry.Session"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation)">
            <summary>
            Registers the operation.
            </summary>
            <param name="operation">The operation to register.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation,System.Boolean)">
            <summary>
            Registers the operation.
            </summary>
            <param name="operation">The operation to register.</param>
            <param name="isStarted">If set to <see langword="true"/>, <see cref="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting"/> method
            will be called on completion of operation registration.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting">
            <summary>
            Indicates that operation, that is currently registering, is started.
            Leads to <see cref="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting"/> or <see cref="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting"/> notification.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting(System.Boolean)">
            <summary>
            Indicates that operation, that is currently registering, is started.
            Leads to <see cref="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting"/> or <see cref="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting"/> notification.
            </summary>
            <param name="throwIfNotRegistered">Indicates whether <see cref="T:System.InvalidOperationException"/> 
            must be thrown if operation isn't registered yet.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterUndoOperation(Xtensive.Orm.Operation)">
            <summary>
            Registers the operation.
            </summary>
            <param name="operation">The operation to register.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterEntityIdentifier(Xtensive.Orm.Key,System.String)">
            <summary>
            Registers the entity identifier.
            </summary>
            <param name="key">The key of the entity to log the identifier for.</param>
            <param name="identifier">The entity identifier.
            <see langword="null" /> indicates identifier must be assigned automatically 
            as sequential number inside the current operation context.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.DisableUndoOperationRegistration">
            <summary>
            Temporarily disables undo operation logging.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object enabling the logging back on its disposal.</returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.DisableSystemOperationRegistration">
            <summary>
            Temporarily disables system operation logging.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object enabling the logging back on its disposal.</returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.EnableSystemOperationRegistration">
            <summary>
            Temporarily enables system operation logging.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object disabling the logging back on its disposal.</returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationRegistry.BeginRegistration(Xtensive.Orm.Operations.OperationType)">
            <summary>
            Registers the operation.
            </summary>
            <param name="operationType">Type of the operation.</param>
            <returns></returns>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationRegistry.Session">
            <summary>
            Gets the session this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsRegistrationEnabled">
            <summary>
            Indicates whether operation logging is enabled.
            <see cref="M:Xtensive.Orm.Session.OpenSystemLogicOnlyRegion"/> implicitly turns this option off;
            <see cref="M:Xtensive.Orm.Operations.OperationRegistry.DisableUndoOperationRegistration"/> does this explicitly.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsSystemOperationRegistrationEnabled">
            <summary>
            Gets a value indicating whether system operation registration is enabled.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationRegistry.CanRegisterOperation">
            <summary>
            Gets a value indicating whether this instance can register operation
            using <see cref="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation)"/> method.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsRegisteringOperation">
            <summary>
            Gets a value indicating whether this instance is registering operation now,
            i.e. <see cref="M:Xtensive.Orm.Operations.OperationRegistry.BeginRegistration(Xtensive.Orm.Operations.OperationType)"/> method was invoked, but the
            scope isn't closed yet.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting">
            <summary>
            Occurs when outermost <see cref="T:Xtensive.Orm.IOperation"/> is starting.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationCompleted">
            <summary>
            Occurs when outermost <see cref="T:Xtensive.Orm.IOperation"/> is being registered.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting">
            <summary>
            Occurs when nested <see cref="T:Xtensive.Orm.IOperation"/> is starting.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationCompleted">
            <summary>
            Occurs when nested <see cref="T:Xtensive.Orm.IOperation"/> is being registered.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Operations.OperationRegistry.UndoOperation">
            <summary>
            Occurs when undo <see cref="T:Xtensive.Orm.IOperation"/> is being registered.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationType">
            <summary>
            Defines possible operation types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.OperationType.Custom">
            <summary>
            Custom (user-defined) operation.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.OperationType.System">
            <summary>
            System (pre-defined) operation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Entity"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityExtensions.IsRemoved(Xtensive.Orm.IEntity)">
            <summary>
            Determines whether the specified entity is removed by safely
            checking it for <see langword="null"/> and calling <see cref="P:Xtensive.Orm.IEntity.IsRemoved"/>.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>
            <see langword="true"/> if the specified entity is removed; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Orm.EntityVersionInfoChangedEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/>.<see cref="P:Xtensive.Orm.Entity.VersionInfo"/> change-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityVersionInfoChangedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="changedEntity">The entity that was changed.</param>
            <param name="changedField">The field that was changed.</param>
            <param name="changed"><see cref="P:Xtensive.Orm.EntityVersionInfoChangedEventArgs.Changed"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityVersionInfoChangedEventArgs.Changed">
            <summary>
            Gets or sets a value indicating whether 
            <see cref="P:Xtensive.Orm.Entity.VersionInfo"/> was changed or not.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntitySetItemEventArgs">
            <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1"/> item.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetItemEventArgs.#ctor(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entitySet">The entity set.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySetItemEventArgs.Item">
            <summary>
            Gets the item to which this event is related.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.CheckConstraintViolationException">
            <summary>
            An exception that is thrown when a CHECK constraint violation is detected.
            This also includes violations of a NOT NULL constraints.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ConstraintViolationException">
            <summary>
            An exception that is thrown when RDBMS detects a violation of a constraint.
            <seealso cref="T:Xtensive.Orm.ReferentialConstraintViolationException"/>
            <seealso cref="T:Xtensive.Orm.UniqueConstraintViolationException"/>
            <seealso cref="T:Xtensive.Orm.CheckConstraintViolationException"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.ConstraintViolationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.CheckConstraintViolationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.ConnectionErrorException">
            <summary>
            An exception that is thrown when a connection error occured.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.ConnectionErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.VersionConflictException">
            <summary>
            Thrown by <see cref="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)"/>,
            <see cref="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity,System.Boolean)"/> and similar methods
            to indicate version check didn't pass.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.VersionConflictException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.DeadlockException">
            <summary>
            An exception that is thrown when deadlock is detected by RDBMS.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ReprocessableException">
            <summary>
            Base class for any storage-level error,
            that can be recovered by rolling back active transaction
            and reprocessing all actions in a new one.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.ReprocessableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.DeadlockException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.OperationTimeoutException">
            <summary>
            An exception that is thrown when currently executing operation 
            is timed out.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.OperationTimeoutException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.ReferentialConstraintViolationException">
            <summary>
            An exception that is thrown when referential constaint (aka foreign key) is violated.
            This differs from <see cref="T:Xtensive.Orm.ReferentialIntegrityException"/>.
            <see cref="T:Xtensive.Orm.ReferentialConstraintViolationException"/> is thrown when RDBMS detects a violation.
            <see cref="N:Xtensive.Orm.ReferentialIntegrity"/> is thrown when internal referential integrity
            mechanism detects a violation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.ReferentialConstraintViolationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.SyntaxErrorException">
            <summary>
            An exception that is thrown when generated RDBMS query has syntax error(s).
            When you've got this exception, you either did not configured access permissions
            in your RDBMS, or you've found an error in DataObjects.Net.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.SyntaxErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.UniqueConstraintViolationException">
            <summary>
            An exception that is thrown when unique constaint is violated,
            this also denotes violation of a unique or primary index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.UniqueConstraintViolationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.TransactionSerializationFailureException">
            <summary>
            An exception that is thrown when RDBMS can not serialize concurrent access.
            This exception is not related to .NET serialization!
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.TransactionSerializationFailureException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.IHasNullEntity">
            <summary>
            Contract for entities having <see cref="P:Xtensive.Orm.IHasNullEntity.NullEntity"/> property.
            Any references to such entities are replaced to  <see cref="P:Xtensive.Orm.IHasNullEntity.NullEntity"/> property value
            during reference cleanup process.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IHasNullEntity.NullEntity">
            <summary>
            Gets the special "null entity".
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IOperationSequence">
            <summary>
            Operation sequence contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IOperationSequence.Replay">
            <summary>
            Applies this operation sequence to the <see cref="P:Xtensive.Orm.Session.Current"/> session.
            </summary>
            <returns>Key mapping.</returns>
        </member>
        <member name="M:Xtensive.Orm.IOperationSequence.Replay(Xtensive.Orm.Session)">
            <summary>
            Applies this operation sequence to the specified session.
            </summary>
            <param name="session">The session to apply the sequence to.</param>
            <returns>Key mapping.</returns>
        </member>
        <member name="T:Xtensive.Orm.IPrecondition">
            <summary>
            Precondition operation contract. Preconditions change nothing,
            but ensure the upcoming operations can be performed safely.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> visitor class. Result is <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ProviderVisitor">
            <summary>
            Abstract <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> visitor class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.Visit(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Visits the specified <paramref name="cp"/>.
            </summary>
            <param name="cp">The <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> to visit.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitPredicateJoin(Xtensive.Orm.Rse.Providers.PredicateJoinProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.PredicateJoinProvider"/>.
            </summary>
            <param name="provider">Predicate join provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitExistence(Xtensive.Orm.Rse.Providers.ExistenceProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.ExistenceProvider"/>.
            </summary>
            <param name="provider">Existence provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitApply(Xtensive.Orm.Rse.Providers.ApplyProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.ApplyProvider"/>.
            </summary>
            <param name="provider">Apply provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitRowNumber(Xtensive.Orm.Rse.Providers.RowNumberProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.RowNumberProvider"/>.
            </summary>
            <param name="provider">Row number provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitTake(Xtensive.Orm.Rse.Providers.TakeProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.TakeProvider"/>.
            </summary>
            <param name="provider">Take provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitSkip(Xtensive.Orm.Rse.Providers.SkipProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.SkipProvider"/>.
            </summary>
            <param name="provider">Skip provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitPaging(Xtensive.Orm.Rse.Providers.PagingProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.PagingProvider"/>.
            </summary>
            <param name="provider">Paging provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitSelect(Xtensive.Orm.Rse.Providers.SelectProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.SelectProvider"/>.
            </summary>
            <param name="provider">Select provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitSeek(Xtensive.Orm.Rse.Providers.SeekProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.SeekProvider"/>.
            </summary>
            <param name="provider">Seek provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitRaw(Xtensive.Orm.Rse.Providers.RawProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.RawProvider"/>.
            </summary>
            <param name="provider">Raw provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitSort(Xtensive.Orm.Rse.Providers.SortProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.SortProvider"/>.
            </summary>
            <param name="provider">Sort provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitJoin(Xtensive.Orm.Rse.Providers.JoinProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.JoinProvider"/>.
            </summary>
            <param name="provider">Join provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitFilter(Xtensive.Orm.Rse.Providers.FilterProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.FilterProvider"/>.
            </summary>
            <param name="provider">Filter provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitDistinct(Xtensive.Orm.Rse.Providers.DistinctProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.DistinctProvider"/>.
            </summary>
            <param name="provider">Distinct provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitCalculate(Xtensive.Orm.Rse.Providers.CalculateProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.CalculateProvider"/>.
            </summary>
            <param name="provider">Calculate provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitAlias(Xtensive.Orm.Rse.Providers.AliasProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.AliasProvider"/>.
            </summary>
            <param name="provider">Alias provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitAggregate(Xtensive.Orm.Rse.Providers.AggregateProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.AggregateProvider"/>.
            </summary>
            <param name="provider">Aggregate provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitStore(Xtensive.Orm.Rse.Providers.StoreProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.StoreProvider"/>.
            </summary>
            <param name="provider">Store provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitIndex(Xtensive.Orm.Rse.Providers.IndexProvider)">
            <summary>
            Visits <see cref="T:Xtensive.Orm.Rse.Providers.IndexProvider"/>.
            </summary>
            <param name="provider">Index provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitIntersect(Xtensive.Orm.Rse.Providers.IntersectProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.IntersectProvider"/>.
            </summary>
            <param name="provider">Intersect provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitExcept(Xtensive.Orm.Rse.Providers.ExceptProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.ExceptProvider"/>.
            </summary>
            <param name="provider">Except provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitConcat(Xtensive.Orm.Rse.Providers.ConcatProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.ConcatProvider"/>.
            </summary>
            <param name="provider">Concat provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitUnion(Xtensive.Orm.Rse.Providers.UnionProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.UnionProvider"/>.
            </summary>
            <param name="provider">Union provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitLock(Xtensive.Orm.Rse.Providers.LockProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.LockProvider"/>.
            </summary>
            <param name="provider">Lock provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitInclude(Xtensive.Orm.Rse.Providers.IncludeProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.IncludeProvider"/>.
            </summary>
            <param name="provider">Include provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ProviderVisitor.VisitFreeText(Xtensive.Orm.Rse.Providers.FreeTextProvider)">
            <summary>
            Visits the <see cref="T:Xtensive.Orm.Rse.Providers.FreeTextProvider"/>.
            </summary>
            <param name="provider">FreeText provider.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitCompilable(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Visits the compilable provider.
            </summary>
            <param name="cp">The compilable provider.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitTake(Xtensive.Orm.Rse.Providers.TakeProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitSkip(Xtensive.Orm.Rse.Providers.SkipProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitPaging(Xtensive.Orm.Rse.Providers.PagingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitSelect(Xtensive.Orm.Rse.Providers.SelectProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitSeek(Xtensive.Orm.Rse.Providers.SeekProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitRaw(Xtensive.Orm.Rse.Providers.RawProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitSort(Xtensive.Orm.Rse.Providers.SortProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitJoin(Xtensive.Orm.Rse.Providers.JoinProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitFilter(Xtensive.Orm.Rse.Providers.FilterProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitDistinct(Xtensive.Orm.Rse.Providers.DistinctProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitCalculate(Xtensive.Orm.Rse.Providers.CalculateProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitAlias(Xtensive.Orm.Rse.Providers.AliasProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitAggregate(Xtensive.Orm.Rse.Providers.AggregateProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitStore(Xtensive.Orm.Rse.Providers.StoreProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitIndex(Xtensive.Orm.Rse.Providers.IndexProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitFreeText(Xtensive.Orm.Rse.Providers.FreeTextProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitPredicateJoin(Xtensive.Orm.Rse.Providers.PredicateJoinProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitExistence(Xtensive.Orm.Rse.Providers.ExistenceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitApply(Xtensive.Orm.Rse.Providers.ApplyProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitIntersect(Xtensive.Orm.Rse.Providers.IntersectProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitExcept(Xtensive.Orm.Rse.Providers.ExceptProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitConcat(Xtensive.Orm.Rse.Providers.ConcatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitUnion(Xtensive.Orm.Rse.Providers.UnionProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.VisitLock(Xtensive.Orm.Rse.Providers.LockProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.OnRecursionExit(Xtensive.Orm.Rse.Providers.Provider)">
            <summary>
            Called after recursion exit.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.OnRecursionEntrance(Xtensive.Orm.Rse.Providers.Provider)">
            <summary>
            Called before recursion entrance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CompilableProviderVisitor.#ctor(System.Func{Xtensive.Orm.Rse.Providers.Provider,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc/>
            <param name="expressionTranslator">Expression translator.</param>
        </member>
        <member name="T:Xtensive.Orm.NotifyChangedOptions">
            <summary>
            Enumerates possible options for <see cref="M:Xtensive.Orm.Session.NotifyChanged(Xtensive.Orm.NotifyChangedOptions)"/> method.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.NotifyChangedOptions.Prefetch">
            <summary>
            Indicates whether all entities must be prefetched.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.NotifyChangedOptions.SkipRemovedEntities">
            <summary>
            Indicates whether removed entities must not be notified.
            Implies <see cref="F:Xtensive.Orm.NotifyChangedOptions.Prefetch"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityIdentifierType">
            <summary>
            Possible identifier types for <see cref="M:Xtensive.Orm.IEntity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)"/> method.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.EntityIdentifierType.Auto">
            <summary>
            Automatically generated indetifier.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.EntityIdentifierType.None">
            <summary>
            No identifier (i.e. identifier must not be logged).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IUniqueOperation">
            <summary>
            Contract for an operation that must be logged only once
            in a given <see cref="T:Xtensive.Orm.OperationLog"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IUniqueOperation.IgnoreIfDuplicate">
            <summary>
            Gets a value indicating whether to ignore the duplicate of this operation, 
            or to throw an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitySetItemRemoveOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1"/> item add operation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitySetItemOperation">
            <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.EntitySet`1"/> item.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitySetOperation">
            <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity"/> field of <see cref="T:Xtensive.Orm.EntitySet`1"/> type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityFieldOperation">
            <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity"/> field.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the entity.</param>
            <param name="field">The field involved into the operation.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldOperation.Field">
            <summary>
            Gets the field involved into the operation.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldOperation.Description">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetOperation.GetEntitySet(Xtensive.Orm.Operations.OperationExecutionContext)">
            <summary>
            Gets the entity set involved into this operation.
            </summary>
            <param name="context">The operation context.</param>
            <returns>Entity set involved into this operation.</returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">Type of provided <paramref name="field"/>
            must be a descendant of <see cref="T:Xtensive.Orm.EntitySetBase"/> type.</exception>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the entity.</param>
            <param name="field">The field involved into the operation.</param>
            <param name="itemKey">The item key.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitySetItemOperation.ItemKey">
            <summary>
            Gets the key of the involved item.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitySetItemOperation.Description">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitySetItemAddOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1"/> item add operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitySetItemAddOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitySetClearOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> creation operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitySetClearOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityCreateOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> creation operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.#ctor(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.TypeName">
            <summary>
            Gets the type name of the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.Title">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.Description">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntitiesRemoveOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> removal operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="keys">The keys of entities to remove.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntitiesRemoveOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.KeyGenerateOperation">
            <summary>
            Describes key generation operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.#ctor(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.KeyGenerateOperation.Title">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationCapturer">
            <summary>
            A service listening to operation-related events in <see cref="T:Xtensive.Orm.Session"/>
            and writing their sequence to <see cref="P:Xtensive.Orm.Operations.OperationCapturer.Operations"/> instance 
            (<see cref="T:Xtensive.Orm.IOperationLogger"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationCapturer.Attach(Xtensive.Orm.IOperationLogger)">
            <summary>
            Attaches the operation capturer to the current session.
            </summary>
            <param name="operations">The operation logger to append captured operations to.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.Operations.OperationCapturer"/> attached
            to the current session.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationCapturer.Attach(Xtensive.Orm.Session,Xtensive.Orm.IOperationLogger)">
            <summary>
            Attaches the operation capturer to the specified session.
            </summary>
            <param name="session">The session to attach the capturer to.</param>
            <param name="operations">The operation logger to append captured operations to.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.Operations.OperationCapturer"/> attached
            to the specified <paramref name="session"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationCapturer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationCapturer.Operations">
            <summary>
            Gets the operation set updated by this service.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.ValidateVersionOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> version validation operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.VersionConflictException">Version check failed.</exception>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="key">The key of the <see cref="T:Xtensive.Orm.Entity"/>.</param>
            <param name="version">The original version.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Version">
            <summary>
            Gets the original version of <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.IgnoreIfDuplicate">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Title">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Description">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Rse.ProviderExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> and <see cref="T:Xtensive.Orm.Rse.Providers.ExecutableProvider"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.ProviderExtensions.GetRecordSet(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Session)">
            <summary>
            Compiles specified <paramref name="provider"/>
            and returns new <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to specified <paramref name="session"/>.
            </summary>
            <param name="provider">The provider.</param>
            <param name="session">The session.</param>
            <returns>New <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to specified <paramref name="session"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.ProviderExtensions.GetRecordSet(Xtensive.Orm.Rse.Providers.ExecutableProvider,Xtensive.Orm.Session)">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to the specified <paramref name="provider"/>.
            </summary>
            <param name="provider">Provider to get <see cref="T:Xtensive.Orm.Rse.RecordSet"/> for.</param>
            <param name="session">Session to bind.</param>
            <returns>New <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to specified <paramref name="session"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.ProviderExtensions.GetRecordSetForAsyncQuery(Xtensive.Orm.Rse.Providers.ExecutableProvider,Xtensive.Orm.Session)">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to the specified <paramref name="provider"/> asynchronously.
            </summary>
            <param name="provider">Provider to get <see cref="T:Xtensive.Orm.Rse.RecordSet"/> for.</param>
            <param name="session">Session to bind</param>
            <returns>New <see cref="T:Xtensive.Orm.Rse.RecordSet"/> bound to specified <paramref name="session"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.ProviderExtensions.Count(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Session)">
            <summary>
            Calculates count of elements of provided <paramref name="provider"/>.
            </summary>
            <param name="provider">The provider.</param>
            <param name="session">The session.</param>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectEntityAccessor">
            <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.Persistent"/> descendants.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectPersistentAccessor">
            <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.Persistent"/> descendants.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(System.Type)">
            <summary>
            Creates new entity instance of the specified type.
            </summary>
            <param name="entityType">The type of entity to create. Must be descendant of the <see cref="T:Xtensive.Orm.Entity"/> type.</param>
            <returns>Newly created entity.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(System.Type,Xtensive.Tuples.Tuple)">
            <summary>
            Creates new entity instance of the specified type with the specified value.
            </summary>
            <param name="entityType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Entity"/> type.</param>
            <param name="tuple">The tuple with entity data.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(Xtensive.Orm.Key)">
            <summary>
            Creates new entity instance with the specified key. Key should have exact type.
            </summary>
            <param name="key">The key.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateStructure(System.Type)">
            <summary>
            Creates new <see cref="T:Xtensive.Orm.Structure"/> of the specified type.
            </summary>
            <param name="structureType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Structure"/> type.</param>
            <returns>Created structure.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateStructure(System.Type,Xtensive.Tuples.Tuple)">
            <summary>
            Creates new <see cref="T:Xtensive.Orm.Structure"/> of the specified type filled with provided data.
            </summary>
            <param name="structureType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Structure"/> type.</param>
            <param name="structureData">The structure data tuple.</param>
            <returns>Created structure.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetFieldValue(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the value of the specified persistent field of the target.
            </summary>
            <param name="target">The target entity or structure.</param>
            <param name="field">The field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetFieldValue``1(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the value of the specified persistent field of the target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target entity or structure.</param>
            <param name="field">The field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.AreSameValues(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
            <summary>
            Indicates whether specified field values are equal.
            </summary>
            <param name="target">The target entity or structure.</param>
            <param name="field">The field.</param>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetReferenceKey(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
            <remarks>
            Result is the same as <c>target.GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
            <param name="target">The target persistent object.</param>
            <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Orm.Entity"/> descendant.</param>
            <returns>Referenced entity key.</returns>
            <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.SetReferenceKey(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
            <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
            <remarks>
            Result is the same as <c>target.GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
            <param name="target">The target persistent object.</param>
            <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Orm.Entity"/> descendant.</param>
            <returns>Referenced entity key.</returns>
            <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.SetFieldValue(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Sets the value of the specified persistent field of the target.
            </summary>
            <param name="target">The target persistent object.</param>
            <param name="field">The field to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.SetFieldValue``1(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,``0)">
            <summary>
            Sets the value of the specified persistent field of the target.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="target">The target persistent object.</param>
            <param name="field">The field to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.Remove(Xtensive.Orm.Entity)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="target">The entity to remove.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.ValidateArguments(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Validates the arguments passed to some of methods.
            </summary>
            <param name="target">The persistent type.</param>
            <param name="field">The field of persistent type.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntityAccessor.UpdateVersionInfo(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Invoked to update <paramref name="targetEntity"/>'s <see cref="P:Xtensive.Orm.Entity.VersionInfo"/>.
            </summary>
            <param name="targetEntity">The changed entity.</param>
            <param name="changedField">The changed field.</param>
            <returns>
            <see langword="True"/>, if <see cref="T:Xtensive.Orm.VersionInfo"/> was changed;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Version root can't implement
            <see cref="T:Xtensive.Orm.IHasVersionRoots"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntityAccessor.GetEntityState(Xtensive.Orm.Entity)">
            <summary>
            Gets the internal state of the entity.
            </summary>
            <param name="target">The target entity.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntityAccessor.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectSqlAccessor">
            <summary>
            Provides access to such low-level objects as 
            <see cref="T:System.Data.Common.DbCommand"/> and <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.RegisterInitializationSql(System.String)">
            <see cref="M:Xtensive.Orm.Providers.IDirectSqlService.RegisterInitializationSql(System.String)" copy="true"/>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.CreateCommand">
            <see cref="M:Xtensive.Orm.Providers.IDirectSqlService.CreateCommand" copy="true"/>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session">The session this instance is bound to.</param>
        </member>
        <member name="P:Xtensive.Orm.Services.DirectSqlAccessor.Connection">
            <see cref="P:Xtensive.Orm.Providers.IDirectSqlService.Connection" copy="true"/>
        </member>
        <member name="P:Xtensive.Orm.Services.DirectSqlAccessor.Transaction">
            <see cref="P:Xtensive.Orm.Providers.IDirectSqlService.Transaction" copy="true"/>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectStateAccessor">
            <summary>
            Provides direct read-only access to various caches.
            Note that this is a fully static service.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.Session)">
            <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.Session"/> state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.Persistent)">
            <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.Persistent"/> instance state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.EntitySetBase)">
            <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.EntitySetBase"/> instance state.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.ReaderPreloadingPolicy">
            <summary>
            A policy for dealing with database readers.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Default">
            <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Auto"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Auto">
            <summary>
            Preload reader if and only if the underlying storage does not support MARS.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Always">
            <summary>
            Always preload reader.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Never">
            <summary>
            Never preload reader.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.EntitySetStateAccessor">
            <summary>
            Public API to cached state of <see cref="T:Xtensive.Orm.EntitySet`1"/> 
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.EntitySetStateAccessor.Contains(Xtensive.Orm.Key)">
            <summary>
            Indicates whether a specified <paramref name="key"/> is cached or not.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="true"/> if the specified key is cached; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.EntitySetStateAccessor.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Services.EntitySetStateAccessor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.EntitySet">
            <summary>
            Gets the entity set this accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.Count">
            <summary>
            Gets the number of cached items.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.IsCountAvailable">
            <summary>
            Gets a value indicating whether an attempt to read
            <see cref="P:Xtensive.Orm.EntitySetBase.Count"/> won't hit the database.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.IsFullyLoaded">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.Services.EntitySetStateAccessor.EntitySet"/> is fully loaded,
            so any read request to it won't hit the database.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.Expressions.ParameterizedExpression.CanRemap">
            <summary>
            Check if <see cref="T:Xtensive.Orm.Linq.Expressions.ParameterizedExpression"/> can be remapped 
            according to current <see cref="T:Xtensive.Orm.Linq.RemapContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.Expressions.FullTextExpression.Mapping">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Rewriters.PersistentIndexerRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Rewriters.PersistentIndexerRewriter.GetMemberExpression(System.Linq.Expressions.MethodCallExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DomainTypeRegistry">
            <summary>
            An implementation of <see cref="T:Xtensive.Collections.TypeRegistry"/>
            used by the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsInterestingType(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is any of types <see cref="T:Xtensive.Orm.Configuration.DomainTypeRegistry"/> 
            is interested in.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsPersistentType(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is persistent type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsDomainService(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is <see cref="T:Xtensive.Orm.Domain"/>-level service.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsSessionService(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is <see cref="T:Xtensive.Orm.Session"/>-level service.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsModule(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is <see cref="T:Xtensive.Orm.Domain"/> module.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsUpgradeHandler(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is <see cref="T:Xtensive.Orm.Domain"/> upgrade handler.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsKeyGenerator(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is key generator.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsCompilerContainer(System.Type)">
            <summary>
            Determines whether a <paramref name="type"/>
            is compiler container.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.#ctor(Xtensive.Collections.ITypeRegistrationProcessor)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="processor">The registry action processor.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.#ctor(Xtensive.Collections.TypeRegistry)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.PersistentTypes">
            <summary>
            Gets all the registered persistent types.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.DomainServices">
            <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Domain"/>-level service types.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.SessionServices">
            <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Session"/>-level service types.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.Modules">
            <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.IModule"/> implementations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.UpgradeHandlers">
            <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Upgrade.IUpgradeHandler"/> implementations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.KeyGenerators">
            <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.KeyGenerator"/>
            and <see cref="T:Xtensive.Orm.TemporaryKeyGenerator"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.CompilerContainers">
            <summary>
            Gets all the registered compiler containers.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.PersistentStateAccessor">
            <summary>
            Public API to cached state of <see cref="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent"/> instance
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.PersistentStateAccessor.GetFieldState(System.String)">
            <summary>
            Gets the state of the field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The state of the field.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.PersistentStateAccessor.GetFieldState(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the state of the field.
            </summary>
            <param name="field">The field to get the state for.</param>
            <returns>The state of the field.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="field"/> belongs to a different type.</exception>
        </member>
        <member name="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent"/> instance this accessor is bound to.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.PersistentFieldState">
            <summary>
            Possible persistent field states.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistentFieldState.Loaded">
            <summary>
            Field value is loaded, so an attempt to read it won't lead to database roundptrip.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistentFieldState.Modified">
            <summary>
            Field value is loaded and modified, but not yet persisted.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.SessionStateAccessor">
            <summary>
            Public API to cached state of the <see cref="P:Xtensive.Orm.Services.SessionStateAccessor.Session"/>
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.SessionStateAccessor.Invalidate">
            <summary>
            Invalidates (forgets) all the pending changes 
            and the state of all cached entities.
            Very similar to what happens on rollback, but
            without rollback itself.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.SessionStateAccessor.RemapEntityKeys(Xtensive.Orm.KeyMapping)">
            <summary>
            Remaps the keys of cached entities
            accordingly with the specified <paramref name="keyMapping"/>.
            </summary>
            <param name="keyMapping">The key mapping.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.SessionStateAccessor.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Services.SessionStateAccessor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Session">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Services.SessionStateAccessor.Session"/> instance this accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Count">
            <summary>
            Gets the number of cached entities.
            Note that it can differ from the number of entities
            returned by <see cref="M:Xtensive.Orm.Services.SessionStateAccessor.GetEnumerator"/> methods
            (cache can be week, etc.).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Item(Xtensive.Orm.Key)">
            <summary>
            Gets cached <see cref="T:Xtensive.Orm.Entity"/> with the specified key.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.SessionEventAccessor">
            <summary>
            Provides access to <see cref="P:Xtensive.Orm.SessionEventAccessor.Session"/>-level events.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.SessionEventAccessor.Session">
            <summary>
            Gets the session this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.SessionEventAccessor.SystemEvents">
            <summary>
            Gets indicates whether this accessor describes system events (<see cref="P:Xtensive.Orm.Session.SystemEvents"/>).
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.DbCommandExecuting">
            <summary>
            Occurs when <see cref="T:System.Data.Common.DbCommand"/> is about to execute.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.DbCommandExecuted">
            <summary>
            Occurs when <see cref="T:System.Data.Common.DbCommand"/> is executed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.QueryExecuting">
            <summary>
            Occurs when LINQ query is about to execute.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.QueryExecuted">
            <summary>
            Occures when LINQ query is executed, but before enumeration of result.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.Disposing">
            <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session"/> is about to be disposed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.Persisting">
            <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session"/> is about to <see cref="M:Xtensive.Orm.Session.SaveChanges"/> changes.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.Persisted">
            <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session"/> persisted.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.KeyGenerated">
            <summary>
            Occurs when local <see cref="T:Xtensive.Orm.Key"/> created.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityMaterialized">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> is materialized.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityCreated">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> is created.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityChanging">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> is about to change.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityVersionInfoChanging">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/>.<see cref="P:Xtensive.Orm.Entity.VersionInfo"/> is about to change.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityVersionInfoChanged">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/>.<see cref="P:Xtensive.Orm.Entity.VersionInfo"/> is changed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGetting">
            <summary>
            Occurs when field value is about to be read.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGet">
            <summary>
            Occurs when field value was read successfully.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGetCompleted">
            <summary>
            Occurs when field value reading is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSettingAttempt">
            <summary>
            Occurs when is field value is about to be set.
            This event is raised on any set attempt (even if new value is the same as the current one).
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSetting">
            <summary>
            Occurs when is field value is about to be changed.
            This event is raised only on actual change attempt (i.e. when new value differs from the current one).
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSet">
            <summary>
            Occurs when field value was changed successfully.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSetCompleted">
            <summary>
            Occurs when field value changing is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemoving">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> is about to remove.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemove">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> removed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemoveCompleted">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity"/> removing is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetChanging">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> is about to change.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemoving">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item is about to remove.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemove">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item removed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemoveCompleted">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item removing is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAdding">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item is about to remove.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAdd">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item removed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAddCompleted">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> item removing is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClearing">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> is about to be cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClear">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> is cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClearCompleted">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase"/> clearing is completed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionOpening">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is about to be opened.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionOpened">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is opened.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionPrecommitting">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is about to be committed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionCommitting">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is about to be committed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionCommitted">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is committed.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionRollbacking">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is about to be rolled back.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionRollbacked">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction"/> is rolled back.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TransactionalValue`1">
            <summary>
            Transactional value cache.
            </summary>
            <typeparam name="T">The type of the <see cref="P:Xtensive.Orm.TransactionalValue`1.Value"/>.</typeparam>
        </member>
        <member name="T:Xtensive.Orm.TransactionalStateContainer`1">
            <summary>
            An abstract base class for objects having associated transactional state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalStateContainer`1.EnsureIsActual">
            <summary>
            Ensures the state is actual.
            If it really is now, this method does nothing.
            Otherwise it calls <see cref="M:Xtensive.Orm.TransactionalStateContainer`1.Invalidate"/> method.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalStateContainer`1.Invalidate">
            <summary>
            Resets the cached transactional state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalStateContainer`1.Refresh">
            <summary>
            Loads/refreshes the state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalStateContainer`1.Rebind">
            <summary>
            Binds the the state to the current lifetime token.
            This method must be invoked on state update.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalStateContainer`1.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.TransactionalStateContainer`1.LifetimeToken">
            <summary>
            Gets lifetime token for this state.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TransactionalStateContainer`1.IsActual">
            <summary>
            Gets a value indicating whether state is loaded and actual.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TransactionalStateContainer`1.State">
            <summary>
            Gets the transactional state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalValue`1.Invalidate">
            <see cref="M:Xtensive.Caching.IInvalidatable.Invalidate" copy="true"/>
        </member>
        <member name="M:Xtensive.Orm.TransactionalValue`1.Refresh">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.TransactionalValue`1.#ctor(Xtensive.Orm.Session,System.Func{`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session">The session to bind this object to.</param>
            <param name="calculator">The delegate calculating a new value.</param>
        </member>
        <member name="P:Xtensive.Orm.TransactionalValue`1.Value">
            <summary>
            Gets the cached value.
            If it isn't valid anymore (see <see cref="P:Xtensive.Orm.TransactionalStateContainer`1.IsActual"/>), 
            it gets re-calculated.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.FullTextMatch`1">
            <summary>
            Single full-text search match result.
            </summary>
            <typeparam name="T">Type of the matched entity.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.FullTextMatch`1.#ctor(System.Double,`0)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="rank">The <see cref="P:Xtensive.Orm.FullTextMatch`1.Rank"/> property value.</param>
            <param name="target">The <see cref="P:Xtensive.Orm.FullTextMatch`1.Entity"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.FullTextMatch`1.Rank">
            <summary>
            Gets the rank of the full-text document.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FullTextMatch`1.Entity">
            <summary>
            Gets the target entity.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.PersistReason">
            <summary>
            A reason of calling <see cref="M:Xtensive.Orm.Session.Persist(Xtensive.Orm.Internals.PersistReason)"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.Manual">
            <summary>
            Manual persist is requested.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.Query">
            <summary>
            Query is to be executed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.NestedTransaction">
            <summary>
            Nested transaction is about to start.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.Commit">
            <summary>
            Commit is to be performed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.ChangeRegistrySizeLimit">
            <summary>
            <see cref="P:Xtensive.Orm.Session.EntityChangeRegistry"/> has reached its size limit.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.ValidateVersions">
            <summary>
            <see cref="T:Xtensive.Orm.VersionValidator"/> is about to be disposed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.RemapEntityKeys">
            <summary>
            <see cref="T:Xtensive.Orm.Session"/> is about to remap its keys.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.PersistEntityRemoval">
            <summary>
            It's necessary to flush entity removal.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistReason.Other">
            <summary>
            Another persist reason.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.Pinner.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session"><see cref="T:Xtensive.Orm.Session"/>, to which current instance 
            is bound.</param>
        </member>
        <member name="T:Xtensive.Orm.QueryTranslationException">
            <summary>
            LINQ query translation exception. 
            Describes various errors that occurs during query compilation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.QueryTranslationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.KeyMapping">
            <summary>
            Maps local ("disconnected") <see cref="T:Xtensive.Orm.Key"/> instances 
            to actual (storage) <see cref="T:Xtensive.Orm.Key"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.TryRemapKey(Xtensive.Orm.Key)">
            <summary>
            Tries to remaps the specified key;
            returns the original key, if there is no 
            remapped key in <see cref="P:Xtensive.Orm.KeyMapping.Map"/> for it.
            </summary>
            <param name="key">The key to remap.</param>
            <returns>The mapped storage <see cref="T:Xtensive.Orm.Key"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.RemapEntityKeys(Xtensive.Orm.Session)">
            <summary>
            Remaps the keys of cached entities
            in the specified <paramref name="session"/>
            accordingly with this key mapping.
            </summary>
            <param name="session">The session to remap entity keys in.</param>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.#ctor(Xtensive.Collections.ReadOnlyDictionary{Xtensive.Orm.Key,Xtensive.Orm.Key})">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.KeyMapping.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.KeyMapping"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.KeyMapping.Map">
            <summary>
            Gets the key map.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Operations.MethodCallOperation">
            <summary>
            Describes arbitrary method call operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.MethodCallOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.MethodCallOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.MethodCallOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.MethodCallOperation.#ctor(System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Object[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="executeAction">The <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)"/> method action.</param>
            <param name="arguments">The action arguments.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.MethodCallOperation.#ctor(System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Object[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="prepareAction">The <see cref="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)"/> method action.</param>
            <param name="executeAction">The <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)"/> method action.</param>
            <param name="arguments">The action arguments.</param>
        </member>
        <member name="P:Xtensive.Orm.Operations.MethodCallOperation.PrepareAction">
            <summary>
            Gets the <see cref="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)"/> method action.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.MethodCallOperation.ExecuteAction">
            <summary>
            Gets the <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)"/> method action.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Title">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Description">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions">
            <summary>
            Extension method for <see cref="T:Xtensive.Orm.DomainUpgradeMode"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.RequiresUpgradingStage(Xtensive.Orm.DomainUpgradeMode)">
            <summary>
            Determines whether <paramref name="upgradeMode"/> requires <see cref="F:Xtensive.Orm.Upgrade.UpgradeStage.Upgrading"/> stage.
            </summary>
            <param name="upgradeMode">The upgrade mode.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.RequiresInitializingStage(Xtensive.Orm.DomainUpgradeMode)">
            <summary>
            Determines whether <paramref name="upgradeMode"/> requires <see cref="F:Xtensive.Orm.Upgrade.UpgradeStage.Initializing"/> stage.
            </summary>
            <param name="upgradeMode">The upgrade mode.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.IsMultistage(Xtensive.Orm.DomainUpgradeMode)">
            <summary>
            Determines whether <paramref name="upgradeMode"/> requires <see cref="F:Xtensive.Orm.Upgrade.UpgradeStage.Upgrading"/> stage.
            </summary>
            <param name="upgradeMode">The upgrade mode.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.IsLegacy(Xtensive.Orm.DomainUpgradeMode)">
            <summary>
            Determines whether the specified upgrade mode is legacy.
            </summary>
            <param name="upgradeMode">The upgrade mode.</param>
            <returns>
            <see langword="true"/> if the specified upgrade mode is legacy;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.IsUpgrading(Xtensive.Orm.DomainUpgradeMode)">
            <summary>
            Determines whether the specified upgrade mode changes database schema.
            </summary>
            <param name="upgradeMode">The upgrade mode.</param>
            <returns>
            <see langword="true"/> if the specified upgrade mode changes database schema;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.MergeTypeHint">
            <summary>
            Rename type hint.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeHint">
            <summary>
            Abstract base class for any upgrade hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Equals(Xtensive.Orm.Upgrade.MergeTypeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="oldType">The old type.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Create``2">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TOld">The old type.</typeparam>
            <typeparam name="TNew">The new type.</typeparam>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MergeTypeHint.NewType">
            <summary>
            Gets the new type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MergeTypeHint.OldType">
            <summary>
            Gets the old type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RecycledTypeHint">
            <summary>
            Rename type hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Equals(Xtensive.Orm.Upgrade.RecycledTypeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.#ctor(System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The recycled type.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Create``1">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="T">The recycled type.</typeparam>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RecycledTypeHint.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.VersionCapturer">
            <summary>
            A service listening to entity change-related events in <see cref="T:Xtensive.Orm.Session"/>
            and writing the information on their original version to <see cref="P:Xtensive.Orm.VersionCapturer.Versions"/> set
            (<see cref="T:Xtensive.Orm.VersionSet"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionCapturer.Attach(Xtensive.Orm.VersionSet)">
            <summary>
            Attaches the version capturer to the current session.
            </summary>
            <param name="versions">The <see cref="T:Xtensive.Orm.VersionSet"/> to append captured versions to.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionCapturer"/> attached
            to the current session.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionCapturer.Attach(Xtensive.Orm.Session,Xtensive.Orm.VersionSet)">
            <summary>
            Attaches the version capturer to the current session.
            </summary>
            <param name="session">The session to attach the capturer to.</param>
            <param name="versions">The <see cref="T:Xtensive.Orm.VersionSet"/> to append captured versions to.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionCapturer"/> attached
            to the specified <paramref name="session"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionCapturer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.VersionCapturer.Versions">
            <summary>
            Gets the version set updated by this service.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.VersionSet">
            <summary>
            Describes a set of key-version pairs used to validate versions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Get(Xtensive.Orm.Entity)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo"/> for the specified 
            <paramref name="entity"/>.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo"/>, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void"/>.
            </summary>
            <param name="entity">The entity to get associated <see cref="T:Xtensive.Orm.VersionInfo"/> for.</param>
            <returns>Associated <see cref="T:Xtensive.Orm.VersionInfo"/>, if found;
            otherwise, <see cref="P:Xtensive.Orm.VersionInfo.Void"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Get(Xtensive.Orm.Key)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo"/> by the specified key.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo"/>, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void"/>.
            </summary>
            <param name="key">The key to get associated <see cref="T:Xtensive.Orm.VersionInfo"/> for.</param>
            <returns>Associated <see cref="T:Xtensive.Orm.VersionInfo"/>, if found;
            otherwise, <see cref="P:Xtensive.Orm.VersionInfo.Void"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Contains(Xtensive.Orm.Entity)">
            <summary>
            Determines whether this set contains the key of the specified entity.
            </summary>
            <param name="entity">The entity to check the key for containment.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Contains(Xtensive.Orm.Key)">
            <summary>
            Determines whether this set contains the specified key.
            </summary>
            <param name="key">The key to check for containment.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity)">
            <summary>
            Validates version of the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to validate version for.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity,System.Boolean)">
            <summary>
            Validates version of the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to validate version for.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
            <summary>
            Validates the <paramref name="version"/>
            for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to validate version for.</param>
            <param name="version">The version to validate.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
            <summary>
            Validates the <paramref name="version"/>
            for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to validate version for.</param>
            <param name="version">The version to validate.</param>
            <param name="throwOnFailure">Indicates whether <see cref="T:System.InvalidOperationException"/>
            must be thrown on validation failure.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:Xtensive.Orm.VersionConflictException">Version conflict is detected.</exception>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Add(Xtensive.Orm.Entity,System.Boolean)">
            <summary>
            Adds key and <see cref="T:Xtensive.Orm.VersionInfo"/> pair
            of the specified <paramref name="entity"/> to this set.
            </summary>
            <param name="entity">The entity to add version of.</param>
            <param name="overwrite">Indicates whether to overwrite an existing
            key-version pair or not, if it exists.</param>
            <returns><see langword="True"/>, if operation was successful;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Add(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
            <summary>
            Adds the specified key and <see cref="T:Xtensive.Orm.VersionInfo"/> pair to this set.
            </summary>
            <param name="key">The key.</param>
            <param name="version">The version related to this key.</param>
            <param name="overwrite">Indicates whether to overwrite an existing
            key-version pair or not, if it exists.</param>
            <returns><see langword="True"/>, if operation was successful;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Remove(Xtensive.Orm.Entity)">
            <summary>
            Removed the key and <see cref="T:Xtensive.Orm.VersionInfo"/> pair 
            of the specified <paramref name="entity"/> from this set.
            </summary>
            <param name="entity">The entity to remove the key-version pair of.</param>
            <returns><see langword="True"/>, if operation was successful;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Remove(Xtensive.Orm.Key)">
            <summary>
            Removed the specified key and <see cref="T:Xtensive.Orm.VersionInfo"/> pair from this set.
            </summary>
            <param name="key">The key.</param>
            <returns><see langword="True"/>, if operation was successful;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.Clear">
            <summary>
            Clears this set.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.MergeWith(Xtensive.Orm.VersionSet,Xtensive.Orm.Session)">
            <summary>
            Merges the current <see cref="T:Xtensive.Orm.VersionSet"/> with provided one.
            </summary>
            <param name="other">The other <see cref="T:Xtensive.Orm.VersionSet"/>.</param>
            <param name="session"></param>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.#ctor(Xtensive.Orm.Entity[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">Initial content.</param>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Entity})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">Initial content.</param>
        </member>
        <member name="M:Xtensive.Orm.VersionSet.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo}})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">Initial content.</param>
        </member>
        <member name="P:Xtensive.Orm.VersionSet.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.VersionSet.Item(Xtensive.Orm.Key)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo"/> by the specified key.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo"/>, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.VersionValidator">
            <summary>
            An attachable service validating versions inside the specified <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
            <summary>
            Validates the <paramref name="version"/>
            for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to validate version for.</param>
            <param name="version">The version to validate.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
            <summary>
            Validates the <paramref name="version"/>
            for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to validate version for.</param>
            <param name="version">The version to validate.</param>
            <param name="throwOnFailure">Indicates whether <see cref="T:System.InvalidOperationException"/>
            must be thrown on validation failure.</param>
            <returns>
            <see langword="True"/>, if validation passes successfully;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:Xtensive.Orm.VersionConflictException">Version conflict is detected.</exception>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.VersionSet)">
            <summary>
            Attaches the validator to the current session.
            </summary>
            <param name="expectedVersions">The set containing expected versions.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionValidator"/> attached
            to the current session.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.Session,Xtensive.Orm.VersionSet)">
            <summary>
            Attaches the validator to the specified session.
            </summary>
            <param name="session">The session to attach validator to.</param>
            <param name="expectedVersions">The set containing expected versions.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionValidator"/> attached
            to the specified <paramref name="session"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.Attach(System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
            <summary>
            Attaches the validator to the current session.
            </summary>
            <param name="expectedVersionProvider">The expected version provider.</param>
            <returns>A newly created <see cref="T:Xtensive.Orm.VersionValidator"/> attached
            to the current session.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.Session,System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
            <summary>
            Attaches the validator to the specified session.
            </summary>
            <param name="session">The session to attach validator to.</param>
            <param name="expectedVersionProvider">The expected version provider.</param>
            <returns>A newly created <see cref="T:Xtensive.Orm.VersionValidator"/> attached
            to the specified <paramref name="session"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.#ctor(Xtensive.Orm.Session,System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
            <exception cref="T:System.InvalidOperationException">Session is persisting the changes.</exception>
        </member>
        <member name="M:Xtensive.Orm.VersionValidator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityRemoveCompletedEventArgs">
            <summary>
            Arguments for completing entity remove event.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityRemoveCompletedEventArgs.#ctor(Xtensive.Orm.Entity,System.Exception)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity">The entity.</param>
            <param name="exception">The <see cref="P:Xtensive.Orm.EntityRemoveCompletedEventArgs.Exception"/> initial value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityRemoveCompletedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Xtensive.Orm.EntitySetItemActionCompletedEventArgs">
            <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1"/> item action completion.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.#ctor(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entitySet">The entity set.</param>
            <param name="item">The item.</param>
            <param name="exception">The <see cref="P:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.Exception"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.Exception">
            <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field set completion events.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityFieldValueSetEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field-related events containing old and new field values.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityFieldValueSetEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="field">The field.</param>
            <param name="oldValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue"/> property value.</param>
            <param name="newValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="field">The field.</param>
            <param name="oldValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue"/> value.</param>
            <param name="newValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue"/> value.</param>
            <param name="exception">The <see cref="P:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.Exception"/> value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.Exception">
            <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.ConfigurationSection">
            <summary>
            A root element of storage configuration section within a configuration file.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.ConfigurationSection.XmlNamespace">
            <summary>
            Gets or sets XML namespace.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.ConfigurationSection.Domains">
            <summary>
            Gets the collection of domain configurations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.ConfigurationSection.Logging">
            <summary>
            Gets configuration of logging.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement">
            <summary>
            <see cref="T:Xtensive.Orm.Domain"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Name">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ConnectionUrl">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ConnectionString">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Provider">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Types">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Types" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.NamingConvention">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.NamingConvention" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.KeyCacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.KeyGeneratorCacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.QueryCacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.RecordSetMappingCacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.UpgradeMode">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.UpgradeMode" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.SchemaSyncExceptionFormat">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SchemaSyncExceptionFormat" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ForeignKeyMode">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ForeignKeyMode" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Collation">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Collation" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Sessions">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Sessions" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.MappingRules">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.MappingRules" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Databases">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Databases" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.KeyGenerators">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGenerators" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ServiceContainerType">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.DefaultSchema">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.DefaultDatabase">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultDatabase" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.IncludeSqlInExceptions">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.IncludeSqlInExceptions" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.AllowCyclicDatabaseDependencies">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.AllowCyclicDatabaseDependencies" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.BuildInParallel">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.BuildInParallel" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ForcedServerVersion">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ForcedServerVersion" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.NativeLibraryCacheFolder">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.NativeLibraryCacheFolder" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ConnectionInitializationSql">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInitializationSql" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.MultidatabaseKeys">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.MultidatabaseKeys" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Options">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Options" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement">
            <summary>
            Namespace synonym configuration element within a configuration file.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Namespace">
            <summary>
            Gets or sets the namespace the <see cref="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Synonym"/> is defined for.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Synonym">
            <summary>
            Gets or sets the synonym for the <see cref="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Namespace"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.NamingConventionElement">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.NamingConvention"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.NamingConventionElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.NamingConvention"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.LetterCasePolicy">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.NamingConvention.LetterCasePolicy" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamespacePolicy">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamespacePolicy" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamingRules">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamingRules" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamespaceSynonyms">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamespaceSynonyms" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement">
            <summary>
            <see cref="T:Xtensive.Orm.Session"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Name">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.UserName">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.UserName" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Password">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Password" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.CacheSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.CacheType">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheType" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Options">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.DefaultIsolationLevel">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultIsolationLevel" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.DefaultCommandTimeout">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.BatchSize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.BatchSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ReaderPreloading">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.ReaderPreloading" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ServiceContainerType">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.EntityChangeRegistrySize">
            <summary>
            <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.EntityChangeRegistrySize" copy="true"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SessionOptions">
            <summary>
            Enumerates possible options of the <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.None">
            <summary>
            None of <see cref="T:Xtensive.Orm.Configuration.SessionOptions"/> is on.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.NonTransactionalReads">
            <summary>
            Enables reading of <see cref="T:Xtensive.Orm.Entity"/> objects without active transaction.
            This option changes <see cref="T:Xtensive.Orm.Session"/> behavior in two ways.
            It becames possible to execute queries without any active transaction.
            Entities loaded or modified in a transaction that is already committed don't refetch their data.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching">
            <summary>
            Enables activation of this <see cref="T:Xtensive.Orm.Session"/> from another session having this option.
            </summary>
            <remarks>
            <para>
            By default, activation of a session inside another one with running transaction 
            (i.e. when another session is active, and transaction is already running there)
            leads to <see cref="T:System.InvalidOperationException"/>, 
            since normally this indicates the same thread controls two sessions and transactions,
            which is dangerous (may lead to application-level deadlock).
            </para>
            <para>
            Alternatively, this might indicate unintentional usage of data fetched by 
            one session inside another.
            </para>
            <para>
            So to activate one session from another, you must use either <see cref="M:Xtensive.Orm.Session.Deactivate"/>
            method or this option.
            </para>
            <para>
            See <see href="http://support.x-tensive.com/question/2870/nested-sessions-and-transactions">description of 
            this feature on Support@x-tensive.com</see> for further details and examples.
            </para>
            </remarks>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation">
            <summary>
            Enables automatic activation of session on all public members of <see cref="T:Xtensive.Orm.ISessionBound"/> implementors 
            (e.g. <see cref="T:Xtensive.Orm.Entity"/>, <see cref="T:Xtensive.Orm.Structure"/> and their inheritors).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.ReadRemovedObjects">
            <summary>
            Enables reading of fields of removed objects.
            By default this leads no an exception - only <see cref="P:Xtensive.Orm.Entity.Key"/>, <see cref="P:Xtensive.Orm.Entity.TypeId"/> and
            few other system properties of removed objects can be accessed.
            This option allows to read all the properties of removed objects, which values are available.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.SuppressRollbackExceptions">
            <summary>
            Enables suppression of any exception occurred during transaction rollback.
            This option is useful if exception hiding occurs due to exceptions in <see cref="M:Xtensive.Orm.TransactionScope.Dispose"/>.
            Any exception thrown in <see cref="E:Xtensive.Orm.SessionEventAccessor.TransactionRollbacking"/> event
            will not be affected by this option.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.ValidateEntityVersions">
            <summary>
            Enables validation of entity versions during save to the database.
            This option disables any SQL statement batching.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.ValidateEntities">
            <summary>
            Enables validation framework in this session.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.LazyKeyGeneration">
            <summary>
            Enables generation of <see cref="T:Xtensive.Orm.Key"/>s for <see cref="T:Xtensive.Orm.Entity">Entities</see>
            just before saving to storage.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.AutoSaveChanges">
            <summary>
            Enables automatic persist of changes in case of committing of transaction, query and some others.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.NonTransactionalEntityStates">
            <summary>
            Enables reading and saving of <see cref="T:Xtensive.Orm.Entity"/> objects without active transaction.
            Contains
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.NonTransactionalReads"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.ServerProfile">
            <summary>
            Predefined option set for server-side sessions (ASP.NET, ASP.NET MVC, services, etc.).
            Includes only <see cref="F:Xtensive.Orm.Configuration.SessionOptions.ValidateEntities"/> flag.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.ClientProfile">
            <summary>
            Predefined option set for client-side sessions (WPF, Windows Forms, console applications, etc.).
            Combines 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.NonTransactionalEntityStates"/> | 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.LazyKeyGeneration"/> |
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.ValidateEntities"/> flags.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.LegacyProfile">
            <summary>
            Predefined option set for compatibility with previous versions of DataObjects.Net (4.3.* and earlier).
            Combines  
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation"/> |
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.ValidateEntities"/> flags.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionOptions.Default">
            <summary>
            Default option set.
            The same as <see cref="F:Xtensive.Orm.Configuration.SessionOptions.ServerProfile"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SessionType">
            <summary>
            Enumerates possible types of the <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionType.User">
            <summary>
            A regular user session.
            Value is <see langword="0x0" />.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionType.System">
            <summary>
            A system session.
            Value is <see langword="0x1" />.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionType.KeyGenerator">
            <summary>
            A generator session.
            Value is <see langword="0x2"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionType.Service">
            <summary>
            A service session.
            Value is <see langword="0x3"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionType.Default">
            <summary>
            Default session type - <see cref="F:Xtensive.Orm.Configuration.SessionType.User"/>.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IOperationLogger">
            <summary>
            <see cref="T:Xtensive.Orm.IOperation"/> logger contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IOperationLogger.Log(Xtensive.Orm.IOperation)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Xtensive.Orm.IOperationLogger.Log(System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
            <summary>
            Logs the specified sequence of operations.
            </summary>
            <param name="source">The source sequence.</param>
        </member>
        <member name="P:Xtensive.Orm.IOperationLogger.LogType">
            <summary>
            Gets operation log type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.OperationLog">
            <summary>
            Built-in implementation of both <see cref="T:Xtensive.Orm.IOperationLogger"/>
            and <see cref="T:Xtensive.Orm.IOperationSequence"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.Log(Xtensive.Orm.IOperation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.Log(System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.Replay">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.Replay(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.Replay(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.#ctor(Xtensive.Orm.OperationLogType)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="logType">Type of the log.</param>
        </member>
        <member name="M:Xtensive.Orm.OperationLog.#ctor(Xtensive.Orm.OperationLogType,System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="logType">Type of the log.</param>
            <param name="operations">The operations to add (using <see cref="M:Xtensive.Orm.OperationLog.Log(Xtensive.Orm.IOperation)"/> method).</param>
        </member>
        <member name="P:Xtensive.Orm.OperationLog.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.OperationLog.LogType">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.EntityFieldSetOperation">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field set operation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.CloneSelf(Xtensive.Orm.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the changed entity.</param>
            <param name="field">The field involved into the operation.</param>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="key">The key of the changed entity.</param>
            <param name="field">The field involved into the operation.</param>
            <param name="valueKey">The new field value key.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Value">
            <summary>
            Gets the new field value, if field is NOT a reference field 
            (i.e. not a field of <see cref="T:Xtensive.Orm.IEntity"/> type).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.ValueKey">
            <summary>
            Gets the new field value key, if field is a reference field 
            (i.e. field of <see cref="T:Xtensive.Orm.IEntity"/> type).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Title">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Description">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Operations.OperationExecutionContext">
            <summary>
            Operation context for <see cref="M:Xtensive.Orm.IOperation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)"/> and
            <see cref="M:Xtensive.Orm.IOperation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)"/> methods executed for a set of operations.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.OperationExecutionContext.Session">
            <summary>
            The session this instance is bound to.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Operations.OperationExecutionContext.KeyMapping">
            <summary>
            The mapping for new keys.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.TryRemapKey(Xtensive.Orm.Key)">
            <summary>
            Remaps the key.
            </summary>
            <param name="key">The key to remap.</param>
            <returns>Remapped key</returns>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.RegisterKey(Xtensive.Orm.Key,System.Boolean)">
            <summary>
            Registers the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="isNew">if set to <see langword="true"/>, the key is new.</param>
        </member>
        <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Operations.OperationExecutionContext.KeysToPrefetch">
            <summary>
            Gets the sequence of keys to prefetch.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntitySetBase">
            <summary>
            Abstract base for <see cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IFieldValueAdapter">
            <summary>
            An object exposing (i.e. providing access to) field value in custom fashion.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IFieldValueAdapter.Owner">
            <summary>
            Gets the owner of the value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IFieldValueAdapter.Field">
            <summary>
            Gets the field this adapter handles.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Prefetch">
            <summary>
            Prefetches the entity set completely - i.e. ensures it is fully loaded.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Prefetch(System.Nullable{System.Int32})">
            <summary>
            Prefetches the entity set - i.e. ensures it is either completely or partially loaded.
            </summary>
            <param name="maxItemCount">The maximal count of items to try to load.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Contains(Xtensive.Orm.Key)">
            <summary>
            Determines whether <see cref="T:Xtensive.Orm.EntitySetBase"/> contains the specified <see cref="T:Xtensive.Orm.Key"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if <see cref="T:Xtensive.Orm.EntitySetBase"/> contains the specified <see cref="T:Xtensive.Orm.Key"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Entity type is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.GetItemCountQueryDelegate(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets a delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            returning count of items associated with this instance.
            </summary>
            <param name="field">The field containing <see cref="T:Xtensive.Orm.EntitySet`1"/>.</param>
            <returns>
            The created delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            returning count of items associated with this instance.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.EnsureOwnerIsNotRemoved">
            <summary>
            Ensures the owner is not removed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.NotifyPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.NotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,Xtensive.Orm.Entity,System.Nullable{System.Int32})">
            <summary>
            Raises <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
            <param name="action">The actual action.</param>
            <param name="item">The item, that was participating in the specified action.</param>
            <param name="index">The index on the item, if available.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.GetSubscription(System.Object)">
            <summary>
            Gets the subscription for the specified event key.
            </summary>
            <param name="eventKey">The event key.</param>
            <returns>Event subscription (delegate) for the specified event key.</returns>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnInitialize">
            <summary>
            Called when entity set is initialized.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnAdding(Xtensive.Orm.Entity)">
            <summary>
            Called when item is adding to entity set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnAdd(Xtensive.Orm.Entity)">
            <summary>
            Called when item is added to entity set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnRemoving(Xtensive.Orm.Entity)">
            <summary>
            Called when item is removing from entity set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnRemove(Xtensive.Orm.Entity)">
            <summary>
            Called when item is removed from entity set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnClearing">
            <summary>
            Called when entity set is clearing.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnClear">
            <summary>
            Called when entity set is cleared.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.OnValidate">
            <summary>
            Called when entity set should be validated.
            </summary>
            <remarks>
            Override this method to perform custom entity set validation.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Initialize(System.Type)">
            <summary>
            Performs initialization (see <see cref="M:Xtensive.Orm.EntitySetBase.Initialize"/>) of the <see cref="T:Xtensive.Orm.EntitySetBase"/> 
            if type of <see langword="this"/> is the same as <paramref name="ctorType"/>.
            Automatically invoked in the epilogue of any constructor of this type and its ancestors.
            </summary>
            <param name="ctorType">The type, which constructor has invoked this method.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.Initialize">
            <summary>
            Performs initialization of the <see cref="T:Xtensive.Orm.EntitySetBase"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="owner">Persistent this entity set belongs to.</param>
            <param name="field">Field corresponds to this entity set.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySetBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.Owner">
            <summary>
            Gets the owner of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.Xtensive#Orm#IFieldValueAdapter#Owner">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.Field">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.Entities">
            <summary>
            Gets the entities contained in this <see cref="T:Xtensive.Orm.EntitySetBase"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Xtensive.Orm.EntitySetBase"/>.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.EntitySetBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Orm.EntitySetBase.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySetBase.CanBeValidated">
            <summary>
            Gets a value indicating whether validation can be performed for this entity.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectEntitySetAccessor">
            <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.EntitySetBase"/> descendants.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.GetEntitySet(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the entity set for the specified property.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Add(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
            <summary>
            Adds the item to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Add(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Entity)">
            <summary>
            Adds the item to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Remove(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
            <summary>
            Removes the item from the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Remove(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Entity)">
            <summary>
            Removes the item from the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Clear(Xtensive.Orm.EntitySetBase)">
            <summary>
            Clears the specified target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Clear(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Clears the entity set of the specified target field.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.EntityFieldValueEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field related events containing field value.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityFieldValueEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="field">The field.</param>
            <param name="value">The <see cref="P:Xtensive.Orm.EntityFieldValueEventArgs.Value"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldValueEventArgs.Value">
            <summary>
            Gets the field value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Delayed`1">
            <summary>
            Future returning a scalar result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="T:Xtensive.Orm.Internals.DelayedQueryResult`1">
            <summary>
            Abstract base for a future query and future scalar implementation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Internals.DelayedQueryResult`1.Materialize(Xtensive.Orm.Session)">
            <summary>
            Materializes a result.
            </summary>
            <param name="session"></param>
            <returns>The materialized result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.DelayedQueryResult`1.#ctor(Xtensive.Orm.Session,Xtensive.Orm.Linq.TranslatedQuery{`0},Xtensive.Core.ParameterContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session"></param>
            <param name="translatedQuery">The translated query.</param>
            <param name="parameterContext">The parameter context.</param>
        </member>
        <member name="P:Xtensive.Orm.Internals.DelayedQueryResult`1.Session">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Internals.DelayedQueryResult`1.Session"/> this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.DelayedQueryResult`1.LifetimeToken">
            <summary>
            Gets <see cref="T:Xtensive.Orm.StateLifetimeToken"/> this instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.DelayedQueryResult`1.Task">
            <summary>
            Gets the task for this future.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Delayed`1.#ctor(Xtensive.Orm.Session,Xtensive.Orm.Linq.TranslatedQuery{`0},Xtensive.Core.ParameterContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
            <param name="translatedQuery">The translated query.</param>
            <param name="parameterContext">The parameter context.</param>
        </member>
        <member name="P:Xtensive.Orm.Delayed`1.Value">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs">
            <summary>
            Describes <see cref="T:Xtensive.Orm.Entity"/> field reading completion events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="field">The field.</param>
            <param name="value">The <see cref="P:Xtensive.Orm.EntityFieldValueEventArgs.Value"/> value.</param>
            <param name="exception">The <see cref="P:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.Exception"/> value.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.Exception">
            <summary>
            Gets the exception, if any, that was thrown on getting the field value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.IHasVersionRoots">
            <summary>
            Should be implemented by entities that have version roots.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IHasVersionRoots.GetVersionRoots">
            <summary>
            Gets the sequence of entity's version roots.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.VersionGenerator">
            <summary>
            Default generator providing next values for fields marked by <see cref="T:Xtensive.Orm.VersionAttribute"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.VersionGenerator.GenerateNextVersion(System.Object)">
            <summary>
            Gets the next version value.
            </summary>
            <param name="currentVersion">The current version.</param>
            <returns>Next version value.</returns>
            <exception cref="T:System.NotSupportedException">Unsupported <paramref name="currentVersion"/> type.</exception>
        </member>
        <member name="T:Xtensive.Orm.Key">
            <summary>
            Identifies a particular <see cref="T:Xtensive.Orm.Entity"/>.
            Stores the set of <see cref="T:Xtensive.Orm.Entity"/>'s <see cref="T:Xtensive.Orm.KeyAttribute">[Key]</see> field values, 
            as well as <see cref="T:Xtensive.Orm.Model.HierarchyInfo"/> the entity belongs to.
            </summary>
            <remarks>
            Every entity is uniquely identified by its <see cref="P:Xtensive.Orm.Entity.Key"/>.
            </remarks>
            <seealso cref="P:Xtensive.Orm.Entity.Key"/>
        </member>
        <member name="F:Xtensive.Orm.Key.value">
            <summary>
            Protected member caching the tuple with key values.
            Can be <see langword="null" />, if the value isn't materialized yet.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Key.IsTemporary(Xtensive.Orm.Domain)">
            <summary>
            Determines whether this key is a temporary key in the specified <paramref name="domain"/>.
            </summary>
            <param name="domain">The domain.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.ResolveTypeInfo(Xtensive.Orm.Session)">
            <summary>
            Resolves the type of <see cref="T:Xtensive.Orm.Entity"/> this instance identifies.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to resolve type for Key.</exception>
            <param name="session">Session to use for resolving</param>
            <returns><see cref="P:Xtensive.Orm.Key.TypeInfo"/> for this instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.GetValue">
            <summary>
            Gets the value in form of <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Key.Equals(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Key.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Key.op_Equality(Xtensive.Orm.Key,Xtensive.Orm.Key)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Key.op_Inequality(Xtensive.Orm.Key,Xtensive.Orm.Key)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Key.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Key.ValueEquals(Xtensive.Orm.Key)">
            <summary>
            Compares key value for equality.
            </summary>
            <param name="other">The other key to compare.</param>
            <returns>Equality comparison result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.CalculateHashCode">
            <summary>
            Calculates hash code.
            </summary>
            <returns>Calculated hash code.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:Xtensive.Orm.Key"/> to its string representation.
            </summary>
            <param name="format">Indicates whether to use <see cref="M:Xtensive.Orm.Key.Format"/>,
            or <see cref="M:Xtensive.Orm.Key.ToString"/> method.</param>
            <returns>String representation of the <see cref="T:Xtensive.Orm.Key"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Format">
            <summary>
            Gets the string representation of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Key.Parse(Xtensive.Orm.Domain,System.String)">
            <summary>
            Parses the specified <paramref name="source"/> string
            produced by <see cref="M:Xtensive.Orm.Key.Format"/> back to the <see cref="T:Xtensive.Orm.Key"/>
            instance.
            </summary>
            <param name="source">The string to parse.</param>
            <param name="domain">The domain.</param>
            <returns>
            <see cref="T:Xtensive.Orm.Key"/> instance corresponding to the specified
            <paramref name="source"/> string.
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid key format.</exception>
        </member>
        <member name="M:Xtensive.Orm.Key.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Key.Generate``1(Xtensive.Orm.Session)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> type <typeparamref name="T"/>
            with newly generated value.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity"/> descendant to get <see cref="T:Xtensive.Orm.Key"/> for.</typeparam>
            <param name="session">The session.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.Key"/> instance .
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Generate(Xtensive.Orm.Session,System.Type)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>
            with newly generated value.
            </summary>
            <param name="session">The session.</param>
            <param name="type">The type.</param>
            <returns>
            A newly created <see cref="T:Xtensive.Orm.Key"/> instance .
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Orm.Domain,Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> type <typeparamref name="T"/>
            and with specified <paramref name="value"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity"/> descendant to get <see cref="T:Xtensive.Orm.Key"/> for.</typeparam>
            <param name="domain">Domain to use.</param>
            <param name="value">Key value.</param>
            <returns>
            A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>
            and with specified <paramref name="value"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="type">Entity type.</param>
            <param name="value">Key value.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,Xtensive.Orm.TypeReferenceAccuracy,Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>,
            with specified <paramref name="value"/> and <paramref name="accuracy"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="type">Entity type.</param>
            <param name="accuracy">Key accuracy.</param>
            <param name="value">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.String,System.Type,Xtensive.Orm.TypeReferenceAccuracy,Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>,
            with specified <paramref name="value"/>, <paramref name="accuracy"/> and <paramref name="nodeId"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="nodeId">Node identifier to use.</param>
            <param name="type">Entity type.</param>
            <param name="accuracy">Key accuracy.</param>
            <param name="value">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Orm.Domain,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> type <typeparamref name="T"/>
            and with specified <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity"/> descendant to get <see cref="T:Xtensive.Orm.Key"/> for.</typeparam>
            <param name="domain">Domain to use.</param>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>
            and with specified <paramref name="values"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="type">Entity type.</param>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,Xtensive.Orm.TypeReferenceAccuracy,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>,
            with specified <paramref name="values"/> and <paramref name="accuracy"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="type">Entity type.</param>
            <param name="accuracy">Key accuracy.</param>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.String,System.Type,Xtensive.Orm.TypeReferenceAccuracy,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Key"/> instance
            for the specified <see cref="T:Xtensive.Orm.Entity"/> <paramref name="type"/>,
            with specified <paramref name="values"/>, <paramref name="accuracy"/> and <paramref name="nodeId"/>.
            </summary>
            <param name="domain">Domain to use.</param>
            <param name="nodeId">Node identifier to use.</param>
            <param name="type">Entity type.</param>
            <param name="accuracy">Key accuracy.</param>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Key.#ctor(System.String,Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.TypeReferenceAccuracy,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The type.</param>
            <param name="accuracy">The typre reference accuracy.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Xtensive.Orm.Key.Value">
            <summary>
            Gets the key value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Key.TypeReference">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Key.TypeReference"/> object
            describing the type this key belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Key.NodeId">
            <summary>
            Gets node identifier for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Key.TypeInfo">
            <summary>
            Gets the type of <see cref="T:Xtensive.Orm.Entity"/> this instance identifies.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Key.HasExactType">
            <summary>
            Determines whether <see cref="P:Xtensive.Orm.Key.TypeInfo"/> property has exact type value or not.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.LongKey.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.LongKey.CalculateHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.LongKey.ValueEquals(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor">
            <summary>
            Descriptor of a field's fetching request.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field">
            <summary>
            The field which value will be fetched.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.FetchFieldsOfReferencedEntity">
            <summary>
            If it is set to <see langword="true"/> then fields' values of 
            an <see cref="T:Xtensive.Orm.Entity"/> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field"/> will be fetched.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.EntitySetItemCountLimit">
            <summary>
            The maximal count of items which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.FetchLazyFields">
            <summary>
            Indicates whether children lazy-load fields will be fetched, or not.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Equals(Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field">The field whose value will be fetched.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field">The field whose value will be fetched.</param>
            <param name="entitySetItemCountLimit">The maximal count of items 
            which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field">The field whose value will be fetched.</param>
            <param name="fetchFieldsOfReferencedEntity">If it is set to <see langword="true"/> 
            then fields' values of an <see cref="T:Xtensive.Orm.Entity"/> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field"/> 
            will be fetched.</param>
            <param name="fetchLazyFields">if set to <see langword="true"/> 
            children lazy-load fields will be fetched.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Action{Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="field">The field whose value will be fetched.</param>
            <param name="entitySetItemCountLimit">The maximal count of items
            which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1"/>.</param>
            <param name="fetchFieldsOfReferencedEntity">If it is set to <see langword="true"/>
            then fields' values of an <see cref="T:Xtensive.Orm.Entity"/> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field"/>
            will be fetched.</param>
            <param name="fetchLazyFields">if set to <see langword="true"/> 
            children lazy-load fields will be fetched.</param>
            <param name="keyExtractionSubscriber">The delegate which will be invoked
            if a key of a referenced entity has been extracted and
            its exact type can't be get or inferred.</param>
        </member>
        <member name="T:Xtensive.Orm.Internals.QueryTask">
            <summary>
            Delayed query task. 
            Used internally to support delayed (future) queries.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.QueryTask.DataSource">
            <summary>
            The data surce (data provider).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.QueryTask.ParameterContext">
            <summary>
            The parameter value context.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.QueryTask.LifetimeToken">
            <summary>
            Gets <see cref="T:Xtensive.Orm.StateLifetimeToken"/> this instance is bound to.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.QueryTask.GetEnumerator">
            <exception cref="T:System.InvalidOperationException">Query task is not executed yet.</exception>
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.QueryTask.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.QueryTask.#ctor(Xtensive.Orm.Rse.Providers.ExecutableProvider,Xtensive.Orm.StateLifetimeToken,Xtensive.Core.ParameterContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="parameterContext">The parameter value context.</param>
        </member>
        <member name="P:Xtensive.Orm.Internals.QueryTask.Result">
            <summary>
            Gets or sets the result of execution of this query task.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.EntitySetState">
            <summary>
            Describes cached state of <see cref="T:Xtensive.Orm.EntitySetBase"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Update(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key},System.Nullable{System.Int64})">
            <summary>
            Sets cached keys to <paramref name="keys"/>.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Contains(Xtensive.Orm.Key)">
            <summary>
            Determines whether cached state contains specified item.
            </summary>
            <param name="key">The key.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Register(Xtensive.Orm.Key)">
            <summary>
            Registers the specified fetched key in cached state.
            </summary>
            <param name="key">The key to register.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Add(Xtensive.Orm.Key)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key to add.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Remove(Xtensive.Orm.Key)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.ApplyChanges">
            <summary>
            Applies all changes to state.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.CancelChanges">
            <summary>
            Clear all changes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.Refresh">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetState.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.TotalItemCount">
            <summary>
            Gets total count of elements which entity set contains.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.CachedItemCount">
            <summary>
            Gets the number of cached items.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.FetchedItemsCount">
            <summary>
            Gets the number of fetched keys.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.AddedItemsCount">
            <summary>
            Gets count of keys which was added but changes are not applyed.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.RemovedItemsCount">
            <summary>
            Gets count of keys which was removed but changes are not applied.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.IsFullyLoaded">
            <summary>
            Gets a value indicating whether state contains all keys which stored in database.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.IsLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is loaded.
            </summary>
            <value>
            <see langword="true"/> if this instance is preloaded; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetState.HasChanges">
            <summary>
            Get value indicating whether state has changes.
            </summary>
            <value>
            <see langword="true"/> if this state has changes; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Xtensive.Orm.Internals.EntityChangeRegistry">
            <summary>
            Registers <see cref="T:Xtensive.Orm.EntityState"/> changes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.Register(Xtensive.Orm.EntityState)">
            <summary>
            Registers the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.GetItems(Xtensive.Orm.PersistenceState)">
            <summary>
            Gets the items with specified <paramref name="state"/>.
            </summary>
            <param name="state">The state of items to get.</param>
            <returns>The sequence of items with specified state.</returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.Clear">
            <summary>
            Clears the registry.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.GetContainer(Xtensive.Orm.PersistenceState)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="state"/> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session"><see cref="T:Xtensive.Orm.Session"/>, to which current instance 
            is bound.</param>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntityChangeRegistry.Count">
            <summary>
            Gets the number of registered entities.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer">
            <summary>
            Saves a strong reference to an object.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.JoinIfPossible(Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer)">
            <summary>
            Joins this instance with <paramref name="other"/>, 
            if <paramref name="other"/> is not <see langword="null" /> and is the root of other containers' chain.
            </summary>
            <param name="other">The other container.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.Join(Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer)">
            <summary>
            Joins this instance with <paramref name="other"/>.
            </summary>
            <param name="other">The other container.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="reference">The reference to be saved.</param>
        </member>
        <member name="T:Xtensive.Orm.KeyEventArgs">
            <summary>
            Arguments for <see cref="P:Xtensive.Orm.KeyEventArgs.Key"/>-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyEventArgs.#ctor(Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Xtensive.Orm.KeyEventArgs.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntitySetFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntitySetFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Always thrown by this method.</exception>
        </member>
        <member name="T:Xtensive.Orm.Internals.EntitySetItem`2">
            <summary>
            Abstract base class for internally used <see cref="T:Xtensive.Orm.EntitySet`1"/> items.
            Instances of runtime-generated descendants of this type are used
            to actually describe the relationship behind the <see cref="T:Xtensive.Orm.EntitySet`1"/>,
            if it isn't paired, or is paired to another <see cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
            <typeparam name="TMaster">The type of the master.</typeparam>
            <typeparam name="TSlave">The type of the slave.</typeparam>
        </member>
        <member name="T:Xtensive.Orm.Entity">
            <summary>
            Abstract base class for any persistent entity.
            </summary>
            <remarks>
            <para>
            <see cref="T:Xtensive.Orm.Entity"/> class encapsulates infrastructure to store persistent transactional data.
            It has <see cref="P:Xtensive.Orm.Entity.Key"/> property that uniquely identifies the instance within its <see cref="T:Xtensive.Orm.Session"/>.
            </para>
            <para>All entities in a model should be inherited from this class.
            </para>
            </remarks>
            <example>
            <code>
            [HierarchyRoot]
            public class Customer : Entity
            {
              [Field, Key]
              public int Id { get; set; }
              
              [Field]
              public string Name { get; set; }
            }
            </code>
            </example>
            <seealso cref="T:Xtensive.Orm.Structure">Structure class</seealso>
            <seealso cref="T:Xtensive.Orm.EntitySet`1"><c>EntitySet</c> class</seealso>
        </member>
        <member name="T:Xtensive.Orm.Persistent">
            <summary>
            Abstract base class for any persistent type (<see cref="T:Xtensive.Orm.Entity"/> or <see cref="T:Xtensive.Orm.Structure"/>).
            </summary>
            <seealso cref="T:Xtensive.Orm.Entity"/>
            <seealso cref="T:Xtensive.Orm.Structure"/>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetProperty``1(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <returns>Property value.</returns>
            <remarks>
            Method calls property getter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Orm.Persistent.GetFieldValue``1(System.String)"/> directly if there is no property declared for this field.
            </remarks>
            <seealso cref="M:Xtensive.Orm.Persistent.SetProperty``1(System.String,``0)"/>
            <exception cref="T:System.ArgumentException">There is no persistent property with provided name.</exception>
        </member>
        <member name="M:Xtensive.Orm.Persistent.SetProperty``1(System.String,``0)">
            <summary>
            Sets the property value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <param name="value">The value to set.</param>
            <remarks>
            Method calls property setter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Orm.Persistent.SetFieldValue``1(System.String,``0)"/> directly if there is no property declared for this field.
            </remarks>
            <seealso cref="M:Xtensive.Orm.Persistent.GetProperty``1(System.String)"/>
            <exception cref="T:System.ArgumentException">There is no persistent property with provided name.</exception>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetFieldValue``1(System.String)">
            <summary>
            Gets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object"/> instead of <see cref="T:Xtensive.Orm.IEntity"/> might lead to unpredictable effects.
            </summary>
            <typeparam name="T">Field value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetFieldValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldName">The field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetFieldValue``1(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object"/> instead of <see cref="T:Xtensive.Orm.IEntity"/> might lead to unpredictable effects.
            </summary>
            <typeparam name="T">Field value type.</typeparam>
            <param name="field">The field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetFieldValue(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the field value.
            </summary>
            <param name="field">The field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetReferenceKey(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
            <remarks>
            Result is the same as <c>GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
            <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Orm.Entity"/> descendant.</param>
            <returns>Referenced entity key.</returns>
            <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
        </member>
        <member name="M:Xtensive.Orm.Persistent.SetFieldValue``1(System.String,``0)">
            <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object"/> instead of <see cref="T:Xtensive.Orm.IEntity"/> might lead to unpredictable effects.
            </summary>
            <typeparam name="T">Field value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.SetFieldValue(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.SetFieldValue``1(Xtensive.Orm.Model.FieldInfo,``0)">
            <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object"/> instead of <see cref="T:Xtensive.Orm.IEntity"/> might lead to unpredictable effects.
            </summary>
            <typeparam name="T">Field value type.</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.SetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object"/> instead of <see cref="T:Xtensive.Orm.IEntity"/> might lead to unpredictable effects.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnInitialize">
            <summary>
            Called when instance is initialized (right after constructor).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnInitializationError(System.Exception)">
            <summary>
            Called on instance initialization error (constructor failure).
            </summary>
            <param name="error">The actual error.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnGettingFieldValue(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Called before field value is about to be read.
            </summary>
            <remarks>
            Override it to perform some actions before reading field value, e.g. to check access permissions.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnGetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Called when field value has been read.
            </summary>
            <remarks>
            Override it to perform some actions when field value has been read, e.g. for logging purposes.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnSettingFieldValueAttempt(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Called before field value is about to be set.
            This event is raised on any set attempt (even if new value is the same as the current one).
            </summary>
            <remarks>
            Override it to perform some actions before setting field value, e.g. to check access permissions.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnSettingFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Called before field value is about to be changed.
            This event is raised only on actual change attempt (i.e. when new value differs from the current one).
            </summary>
            <remarks>
            Override it to perform some actions before changing field value, e.g. to check access permissions.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnSetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
            <summary>
            Called when field value has been changed.
            </summary>
            <remarks>
            Override it to perform some actions when field value has been changed, e.g. for logging purposes.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.OnValidate">
            <summary>
            Called when entity should be validated.
            </summary>
            <remarks>
            Override this method to perform custom object validation.
            </remarks>
            <example>
            <code>
            public override void OnValidate()
            {
              base.OnValidate();
              if (Age &lt;= 0) 
                throw new InvalidOperationException("Age should be positive.");
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Orm.Persistent.AdjustFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Called when value is read from the field and before it is returned to caller.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value of the field.</param>
            <returns></returns>
            <remarks>
            Override it to perform changes to the value that is being read.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.AdjustFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
            <summary>
            Called before value is stored to the field.
            </summary>
            <param name="field">The field.</param>
            <param name="oldValue">The previous value of the field.</param>
            <param name="newValue">The value that is being set.</param>
            <returns></returns>
            <remarks>
            Override it to perform changes to the value that is being set.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.NotifyFieldChanged(Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">The field, which value is changed.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.NotifyPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetSubscription(System.Object)">
            <summary>
            Gets the subscription for the specified event key.
            </summary>
            <param name="eventKey">The event key.</param>
            <returns>Event subscription (delegate) for the specified event key.</returns>
        </member>
        <member name="M:Xtensive.Orm.Persistent.GetFieldState(Xtensive.Orm.Model.FieldInfo)">
            <exception cref="T:System.ArgumentException"><paramref name="field"/> belongs to a different type.</exception>
        </member>
        <member name="M:Xtensive.Orm.Persistent.Initialize(System.Type)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="ctorType">Type of the instance that is being constructed.</param>
            <remarks>
            This method is called when custom constructor is finished.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.InitializationError(System.Type,System.Exception)">
            <summary>
            Called on initialization error.
            </summary>
            <param name="ctorType">Type of the instance that is being constructed.</param>
            <param name="error">The error that happened on initialization.</param>
            <remarks>
            This method is called when custom constructor is finished.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Persistent.InitializeOnMaterialize">
            <summary>
            Initializes this instance on materialization.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Persistent.InitializationErrorOnMaterialize(System.Exception)">
            <summary>
            Called on initialization error on materialization.
            </summary>
            <param name="error">The error that happened on initialization.</param>
            <remarks>
            This method is called when custom constructor is finished.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.Persistent.TypeInfo">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Model.TypeInfo"/> object describing structure of persistent object.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Persistent.Tuple">
            <summary>
            Gets the underlying tuple.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Persistent.CanBeValidated">
            <summary>
            Gets a value indicating whether validation can be performed for this entity.
            </summary>
        </member>
        <member name="E:Xtensive.Orm.Persistent.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Persistent.Item(System.String)">
            <summary>
            Gets or sets the value of the field with specified name.
            </summary>
            <value>Field value.</value>
        </member>
        <member name="P:Xtensive.Orm.Persistent.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Persistent.System#ComponentModel#IDataErrorInfo#Error">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.IEntity">
            <summary>
            Persistent entity contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IEntity.Remove">
            <summary>
            Removes the instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IEntity.RemoveLater">
            <summary>
            Registers the instance in the removal queue.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.IEntity.Lock(Xtensive.Orm.LockMode,Xtensive.Orm.LockBehavior)">
            <summary>
            Locks this instance in the storage.
            </summary>
            <param name="lockMode">The lock mode.</param>
            <param name="lockBehavior">The lock behavior.</param>
        </member>
        <member name="M:Xtensive.Orm.IEntity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)">
            <summary>
            Identifies the entity by identifier of specified type.
            This identifier is used by <see cref="N:Xtensive.Orm.Operations"/> framework
            to bind it with the identical entity while replaying the operation.
            </summary>
            <param name="identifierType">Type of the identifier.</param>
        </member>
        <member name="M:Xtensive.Orm.IEntity.IdentifyAs(System.String)">
            <summary>
            Identifies the entity by specified identifier.
            This identifier is used by <see cref="N:Xtensive.Orm.Operations"/> framework
            to bind it with the identical entity while replaying the operation.
            </summary>
            <param name="identifier">The entity identifier.
            <see langword="null"/> indicates no identifier must be associated with the entity.</param>
        </member>
        <member name="P:Xtensive.Orm.IEntity.Key">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.IEntity.Key"/> of the <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IEntity.TypeId">
            <summary>
            Gets the type id.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IEntity.TypeInfo">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Model.TypeInfo"/> object describing <see cref="T:Xtensive.Orm.Entity"/> structure.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IEntity.VersionInfo">
            <summary>
            Gets <see cref="P:Xtensive.Orm.IEntity.VersionInfo"/> object describing 
            current version of the <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IEntity.PersistenceState">
            <summary>
            Gets persistence state of the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IEntity.Item(System.String)">
            <summary>
            Gets or sets the value of the field with specified name.
            </summary>
            <value>Field value.</value>
        </member>
        <member name="P:Xtensive.Orm.IEntity.IsRemoved">
            <summary>
            Gets a value indicating whether this entity is removed.
            </summary>
            <seealso cref="M:Xtensive.Orm.IEntity.Remove"/>
        </member>
        <member name="M:Xtensive.Orm.Entity.Remove">
            <summary>
            Removes this entity.
            </summary>
            <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny"/> on-remove action.</exception>
            <seealso cref="P:Xtensive.Orm.Entity.IsRemoved"/>
        </member>
        <member name="M:Xtensive.Orm.Entity.RemoveLater">
            <summary>
            Register the entity in removing queue. Removal operation will be postponed 
            until <see cref="M:Xtensive.Orm.Session.SaveChanges"/> method is called; some query is executed 
            or current transaction is being committed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Entity.Lock(Xtensive.Orm.LockMode,Xtensive.Orm.LockBehavior)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Entity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Entity.IdentifyAs(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Entity.OnRemoving">
            <summary>
            Called when entity is about to be removed.
            </summary>
            <remarks>
            Override it to perform some actions when entity is about to be removed.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Entity.OnRemove">
            <summary>
            Called when entity becomes removed.
            </summary>
            <remarks>
            Override this method to perform some actions when entity is removed.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Entity.UpdateVersionInfo(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Invoked to update <see cref="P:Xtensive.Orm.Entity.VersionInfo"/>.
            </summary>
            <param name="changedEntity">The changed entity.</param>
            <param name="changedField">The changed field.</param>
            <returns>
            <see langword="True"/>, if <see cref="P:Xtensive.Orm.Entity.VersionInfo"/> was changed;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Version root can't implement
            <see cref="T:Xtensive.Orm.IHasVersionRoots"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Entity.UpdateVersion(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Called to update the fields describing <see cref="T:Xtensive.Orm.Entity"/>'s version.
            </summary>
            <param name="changedEntity">The changed entity.</param>
            <param name="changedField">The changed field.</param>
            <returns>
            <see langword="True"/>, if <see cref="P:Xtensive.Orm.Entity.VersionInfo"/> was changed;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Entity.Validate">
            <summary>
            Performs immediate validation of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Entity.EnsureNotRemoved">
            <exception cref="T:System.InvalidOperationException">Entity is removed.</exception>
        </member>
        <member name="M:Xtensive.Orm.Entity.HasReferenceFrom(Xtensive.Orm.Entity)">
            <summary>
            Checks that reference from <paramref name="entity"/> to this entity have not removed.
            </summary>
            <param name="entity">Entity to check.</param>
            <returns><see langword="false"/> if <see cref="P:Xtensive.Orm.Session.EntityReferenceChangesRegistry"/> contains information about removed reference, otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Entity.GetNewReferencesFromEntities">
            <summary>
            Gets all entities which have new references to this entity until <see cref="M:Xtensive.Orm.Session.Persist(Xtensive.Orm.Internals.PersistReason)"/> or <see cref="M:Xtensive.Orm.Session.CancelChanges"/> executed.
            </summary>
            <returns>All entities which have new references to this entity until persist.</returns>
        </member>
        <member name="M:Xtensive.Orm.Entity.GetRemovedReferencesFromEntities">
            <summary>
            Gets all entities which have new references to this entity until <see cref="M:Xtensive.Orm.Session.Persist(Xtensive.Orm.Internals.PersistReason)"/> or <see cref="M:Xtensive.Orm.Session.CancelChanges"/> executed.
            </summary>
            <returns>All entities which have new references to this entity until persist.</returns>
        </member>
        <member name="M:Xtensive.Orm.Entity.GetSubscription(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="values">The field values that will be used for key building.</param>
            <remarks>Use this kind of constructor when you need to explicitly set key for this instance.</remarks>
            <example>
            <code>
            [HierarchyRoot]
            public class Book : Entity
            {
              [Field, KeyField]
              public string ISBN { get; set; }
              
              public Book(string isbn) : base(isbn) { }
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session,System.Object[])">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
            <param name="values">The field values that will be used for key building.</param>
            <remarks>Use this kind of constructor when you need to explicitly set key for this instance.</remarks>
            <example>
            	<code>
            [HierarchyRoot]
            public class Book : Entity
            {
            [Field, KeyField]
            public string ISBN { get; set; }
            public Book(string isbn) : base(isbn) { }
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Entity"/> class.
            </summary>
            <param name="state">The initial state of this instance fetched from storage.</param>
            <remarks>
            Used internally to initialize the entity on materialization.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session,Xtensive.Orm.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Entity"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="state">The initial state of this instance fetched from storage.</param>
            <remarks>
            Used internally to initialize the entity on materialization.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Entity.State">
            <exception cref="T:System.InvalidOperationException">Entity is already detached from Session.</exception>
        </member>
        <member name="P:Xtensive.Orm.Entity.TypeId">
            <exception cref="T:System.Exception">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Orm.Entity.Key">
            <summary>
            Gets the <see cref="P:Xtensive.Orm.Entity.Key"/> that identifies this entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Entity.VersionInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.TypeInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.Tuple">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.PersistenceState">
            <summary>
            Gets persistence state of the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Entity.IsRemoved">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.IsMaterializing">
            <summary>
            Gets a value indicating whether this instance is materializing.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Entity.Xtensive#Core#IIdentified{Xtensive#Orm#Key}#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.Xtensive#Core#IHasVersion{Xtensive#Orm#VersionInfo}#Version">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.Xtensive#Core#IHasVersion#Version">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Orm.Entity.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Entity.CanBeValidated">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetItem`2.#ctor(Xtensive.Orm.Session,Xtensive.Orm.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Entity"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="state">The initial state of this instance fetched from storage.</param>
            <remarks>
            Used internally to initialize the entity on materialization.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Internals.EntitySetItem`2.#ctor(Xtensive.Orm.Session,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
            <param name="tuple">The tuple containing key value for this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetItem`2.Master">
            <summary>
            Gets the master entity reference.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.EntitySetItem`2.Slave">
            <summary>
            Gets the slave entity reference.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntitySet`1">
            <summary>
            Unordered persistent <see cref="T:Xtensive.Orm.Entity"/>-bound set (i.e. there can be no duplicates).
            </summary>
            <typeparam name="TItem">The type of the entities in this set.</typeparam>
            <remarks>
            <para>
            Use <see cref="T:Xtensive.Orm.EntitySet`1"/> when you need to declare persistent property of entity set type.
            </para>
            <para>
            <c>EntitySets</c> can be used as a <see cref="P:Xtensive.Orm.AssociationAttribute.PairTo">paired property</see> with reference 
            (One-To-Many) or EntitySet (Many-To-Many) properties. In such case DataObjects.Net automatically
            modifies collection or it's paired property. If paired property is not specified, auxiliary table
            will be automatically created in database.
            </para>
            <para>EntitySet class implements <see cref="T:System.Linq.IQueryable`1"/> interface and fully supported by 
            DataObjects.Net LINQ translator.</para>
            </remarks>
            <example>In following example User entity has three EntitySet properties with different association kinds.
            <code>
            public class User : Entity
            {
              ...
              
              // persistent collection with auxiliary table
              [Field]
              public EntitySet&lt;Photo&gt; Photos { get; private set; }
              
              // One-to-many association
              [Field, Association(PairTo = "Author")]
              public EntitySet&lt;BlogItem&gt; BlogItems { get; private set; }
              
              // Many-to-many association
              [Field, Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code>
            </example>
            <seealso cref="T:Xtensive.Orm.Entity">Entity class</seealso>
            <seealso cref="P:Xtensive.Orm.AssociationAttribute.PairTo">Using EntitySets with paired associations</seealso>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.Contains(`0)">
            <summary>
            Determines whether this collection contains the specified item.
            </summary>
            <param name="item">The item to check for containment.</param>
            <returns>
            <see langword="true"/> if this collection contains the specified item; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>
            <see langword="True"/>, if the item is added to the collection;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            <see langword="True"/>, if the item is removed from the collection;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the <paramref name="items"/> to this <see cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.IntersectWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Modifies the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object
            to contain only elements that are present in that object and in the specified collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.UnionWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Modifies the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object
            to contain all elements that are present in both itself and in the specified collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.ExceptWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all elements in the specified collection from the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.GetItemCountQueryDelegate(Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="owner">Persistent this entity set belongs to.</param>
            <param name="field">Field corresponds to this entity set.</param>
        </member>
        <member name="M:Xtensive.Orm.EntitySet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.EntitySet`1.System#Collections#Generic#ICollection{TItem}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySet`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySet`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntitySet`1.Provider">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.ItemToTupleConverter`1.IsPersistableType(System.Type)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="T:Xtensive.Orm.Services.DirectSessionAccessor">
            <summary>
            Provides access to core services bound to a <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.OpenSystemLogicOnlyRegion">
            <summary>
            Opens the region in which only the system logic is executed.
            </summary>
            <returns>
            An object implementing <see cref="T:System.IDisposable"/> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.IsSystemLogicOnly"/> property.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.ChangeSessionHandler(Xtensive.Orm.Providers.SessionHandler)">
            <summary>
            Changes the value of <see cref="P:Xtensive.Orm.Session.Handler"/>.
            </summary>
            <param name="newHandler">The new handler.</param>
            <returns>
            An object implementing <see cref="T:System.IDisposable"/> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.Handler"/> property.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.NullifySessionTransaction">
            <summary>
            Sets the value of <see cref="P:Xtensive.Orm.Session.Transaction"/> to <see langword="null"/>.
            </summary>
            <returns>
            An object implementing <see cref="T:System.IDisposable"/> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.Transaction"/> property;
            <see langword="null"/>, if <see cref="P:Xtensive.Orm.Session.Transaction"/> 
            is already <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.GetChangedEntities(Xtensive.Orm.PersistenceState)">
            <summary>
            Gets entities that were changed in the current session, but were not
            saved to the database yet.
            </summary>
            <param name="persistenceState">Type of entity change.</param>
            <returns><see cref="T:Xtensive.Orm.EntityState"/>s with the specified <paramref name="persistenceState"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.#ctor(Xtensive.Orm.Session)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.PrefetchExtensions">
            <summary>
            Contains extension methods allowing prefetch fields of an <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Registers fields specified by <paramref name="expression"/> for prefetch.
            </summary>
            <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
            <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
            <param name="source">The source query.</param>
            <param name="expression">The expression specifying a field to be prefetched.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of source items.</returns>
        </member>
        <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Registers fields specified by <paramref name="expression"/> for prefetch.
            </summary>
            <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
            <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="expression">The expression specifying a field to be prefetched.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of source items.</returns>
        </member>
        <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates <see cref="T:Xtensive.Orm.Internals.Prefetch.PrefetchFacade`1"/> for the specified <paramref name="source"/> and
            registers the prefetch of the field specified by <paramref name="expression"/>.
            </summary>
            <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
            <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="session">The session.</param>
            <param name="expression">The expression specifying a field to be prefetched.</param>
            <returns>A newly created <see cref="T:Xtensive.Orm.Internals.Prefetch.PrefetchFacade`1"/>.</returns>
        </member>
        <member name="T:Xtensive.Orm.ReferenceInfo">
            <summary>
            Describes referential relationship between two particular entities.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReferenceInfo.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="referencingEntity">The referencing entity.</param>
            <param name="referencedEntity">The referenced entity.</param>
            <param name="association">The association.</param>
        </member>
        <member name="P:Xtensive.Orm.ReferenceInfo.ReferencingEntity">
            <summary>
            Gets the referencing entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ReferenceInfo.ReferencedEntity">
            <summary>
            Gets the referenced entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ReferenceInfo.Association">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.AssociationInfo"/> object describing the relationship.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.EntityState">
            <summary>
            The underlying state of the <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityState.TryGetEntity">
            <summary>
            Tries to get entity.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityState.RollbackDifference">
            <summary>
            Reverts the state to the origin by discarding the difference.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityState.CommitDifference">
            <summary>
            Commits the state difference to the origin.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityState.RestoreDifference">
            <summary>
            Restore difference of <see cref="P:Xtensive.Orm.EntityState.DifferentialTuple"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Update(Xtensive.Tuples.Tuple)">
            <summary>
            Updates the entity state to the most current one.
            </summary>
            <param name="update">The state change tuple, or a new state tuple. 
            If <see langword="null" />, the entity is considered as removed.</param>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Refresh">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Xtensive#Caching#IInvalidatable#Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.Equals(Xtensive.Orm.EntityState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.EntityState.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.EntityState.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.Tuple">
            <summary>
            Gets the values as <see cref="P:Xtensive.Orm.EntityState.Tuple"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.DifferentialTuple">
            <summary>
            Gets the values as <see cref="P:Xtensive.Orm.EntityState.DifferentialTuple"/>.
            </summary>
            <returns>A <see cref="P:Xtensive.Orm.EntityState.DifferentialTuple"/> corresponding to the current state.</returns>
        </member>
        <member name="P:Xtensive.Orm.EntityState.IsTupleLoaded">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.EntityState.Tuple"/> value is already loaded.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.Entity">
            <summary>
            Gets the owner of this instance.
            </summary>
            <exception cref="T:System.NotSupportedException">Property value is already set.</exception>
        </member>
        <member name="P:Xtensive.Orm.EntityState.PersistenceState">
            <summary>
            Gets or sets the persistence state.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.IsNotAvailable">
            <summary>
            Gets a value indicating whether this entity is available (has a <see cref="P:Xtensive.Orm.EntityState.Tuple"/>).
            Tuple does not exist, if there is no row corresponding to the <see cref="P:Xtensive.Orm.EntityState.Entity"/>
            in the storage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.IsNotAvailableOrMarkedAsRemoved">
            <summary>
            Gets a value indicating whether the state is either <see cref="P:Xtensive.Orm.EntityState.IsNotAvailable"/>
            or is marked as removed (see <see cref="P:Xtensive.Orm.EntityState.PersistenceState"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.IsStale">
            <summary>
            Gets a value indicating whether this state is stale (taken from cache).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.EntityState.IsVersionInfoUpdated">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.Entity.VersionInfo"/> already updated.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ReferentialIntegrityException">
            <summary>
            Thrown on attempt to remove an object having
            reference with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny"/>
            option pointing to it.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReferentialIntegrityException.#ctor(Xtensive.Orm.Model.AssociationInfo,Xtensive.Orm.Entity,Xtensive.Orm.Entity,Xtensive.Orm.Entity)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReferentialIntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.ReferentialIntegrityException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Xtensive.Orm.ReferentialIntegrityException.Association">
            <summary>
            Gets the association.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ReferentialIntegrityException.Initiator">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Key"/> of the initiator of removing action.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ReferentialIntegrityException.ReferencingObject">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Key"/> of the referencing object.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.ReferentialIntegrityException.ReferencedObject">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Key"/> of the referenced object.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.IndexInfoExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Model.IndexInfo"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.IndexInfoExtensions.GetQuery(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Creates the <see cref="T:Xtensive.Orm.Rse.Providers.IndexProvider"/> allowing to query the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index to create the <see cref="T:Xtensive.Orm.Rse.Providers.IndexProvider"/> for.</param>
            <returns>Newly created <see cref="T:Xtensive.Orm.Rse.Providers.IndexProvider"/> object.</returns>
        </member>
        <member name="T:Xtensive.Orm.Rse.RecordSetExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.RecordSet"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetExtensions.ToEntities``1(Xtensive.Orm.Rse.RecordSet,System.Int32)">
            <summary>
            Converts the <see cref="T:Xtensive.Orm.Rse.RecordSet"/> items to <see cref="T:Xtensive.Orm.Entity"/> instances.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Orm.Entity"/> instances to get.</typeparam>
            <param name="source">The <see cref="T:Xtensive.Orm.Rse.RecordSet"/> to process.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record"/>.</param>
            <returns>The sequence of <see cref="T:Xtensive.Orm.Entity"/> instances.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetExtensions.ToEntities``1(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Rse.RecordSetHeader,Xtensive.Orm.Session,System.Int32)">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples to <see cref="T:Xtensive.Orm.Entity"/> instances.
            </summary>
            <param name="source">The tuples to process.</param>
            <param name="header">The record set header.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record"/>.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.Entity"/> instances.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetExtensions.ToEntities(Xtensive.Orm.Rse.RecordSet,System.Int32)">
            <summary>
            Converts the <see cref="T:Xtensive.Orm.Rse.RecordSet"/> items to <see cref="T:Xtensive.Orm.Entity"/> instances.
            </summary>
            <param name="source">The <see cref="T:Xtensive.Orm.Rse.RecordSet"/> to process.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record"/>.</param>
            <returns>The sequence of <see cref="T:Xtensive.Orm.Entity"/> instances.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetExtensions.ToEntities(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Rse.RecordSetHeader,Xtensive.Orm.Session,System.Int32)">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples to <see cref="T:Xtensive.Orm.Entity"/> instances.
            </summary>
            <param name="source">The tuples to process.</param>
            <param name="header">The record set header.</param>
            <param name="session">The session.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record"/>.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.Entity"/> instances.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.StructureFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.StructureFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.HierarchyDefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef"/> items.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.Contains(Xtensive.Orm.Building.Definitions.HierarchyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.TryGetValue(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.TryGetValue(System.Type)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.Item(System.Type)">
            <summary>
            An indexer that provides access to collection items.
            </summary>
            <exception cref="T:System.ArgumentException"> when item was not found.</exception>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.HierarchyDef">
            <summary>
            Defines a signle persistent type hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.Root">
            <summary>
            Gets the root of the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyFields">
            <summary>
            Gets the fields that are included in the key for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.Schema">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.InheritanceSchema"/> for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.IncludeTypeId">
            <summary>
            Gets or sets a value indicating whether key includes TypeId field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.IsClustered">
            <summary>
            Gets or sets a value indicating whether primary key for this hierarchy is clustered.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyGeneratorKind">
            <summary>
            Gets or sets the key generator kind to use in this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyGeneratorName">
            <summary>
            Gets or sets the key generator name to use in this hierarchy.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.TypeDefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> items.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindAncestor(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Finds the ancestor of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="item"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindAncestor(System.Type)">
            <summary>
            Finds the ancestor of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="type"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindInterfaces(System.Type)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of interfaces that specified <paramref name="type"/> implements.
            </summary>
            <param name="type">The type to search interfaces for.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see name="TypeDef"/> instance that are implemented by the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.Contains(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Determines whether collection contains a specific item.
            </summary>
            <param name="item">Value to search for.</param>
            <returns>
              <see langword="True"/> if the object is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.Contains(System.Type)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.TryGetValue(System.Type)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDefCollection.Item(System.Type)">
            <summary>
            An indexer that provides access to collection items.
            </summary>
            <exception cref="T:System.ArgumentException"> when item was not found.</exception>
        </member>
        <member name="T:Xtensive.Orm.DomainBuilderException">
            <summary>
            Describes various errors detected during <see cref="T:Xtensive.Orm.Domain"/>.<see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.DomainBuilderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.IndexDef">
            <summary>
            Defines a single index.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Building.Definitions.IndexDef.DefaultFillFactor">
            <summary>
            Default fill factor.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.IndexDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.Type">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> that this index is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsSecondary">
            <summary>
            Gets or sets a value indicating whether this instance is secondary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsClustered">
            <summary>
            Gets or sets a value indicating whether this instance is clustered index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.FillFactor">
            <summary>
            Gets or sets the fill factor for index, must be a real number between <see langword="0"/> and <see langword="1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.KeyFields">
            <summary>
            Gets the key fields that are included in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IncludedFields">
            <summary>
            Gets the non key fields that are included in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.FilterExpression">
            <summary>
            Gets or sets expression that defines range for partial index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Builders.TypeBuilder.BuildType(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Builds the <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance, its key fields and <see cref="T:Xtensive.Orm.Model.HierarchyInfo"/> for hierarchy root.
            </summary>
            <param name="typeDef"><see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> instance.</param>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.FieldDef">
            <summary>
            Defines a signle persistent field.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.FieldDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Length">
            <summary>
            Gets or sets the maximal length of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.DefaultValue">
            <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.DefaultSqlExpression">
            <summary>
            Gets or sets arbitrary SQL expression as default value for this field.
            This default value has higher priority than <see cref="P:Xtensive.Orm.Building.Definitions.FieldDef.DefaultValue"/>.
            <see langword="null"/> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether this instance should be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsNullable">
            <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsStructure">
            <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsEntitySet">
            <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsPrimitive">
            <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsEntity">
            <summary>
            Gets a value indicating whether this property is a reference to Entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsSystem">
            <summary>
            Gets a value indicating whether this property is system field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsTypeId">
            <summary>
            Gets a value indicating whether this property contains information about Type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsTypeDiscriminator">
            <summary>
            Gets or sets a value indicating whether this instance is used as custom type discriminator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsIndexed">
            <summary>
            Gets a value indicating whether this property is indexed.
            Setting this value to <see langword="true"/> resets <see cref="P:Xtensive.Orm.Building.Definitions.FieldDef.IsNotIndexed"/> to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsNotIndexed">
            <summary>
            Gets a value indicating whether this property should not be indexed implicitly.
            Setting this value to <see langword="true"/> resets <see cref="P:Xtensive.Orm.Building.Definitions.FieldDef.IsIndexed"/> to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.UnderlyingProperty">
            <summary>
            Gets the underlying system property.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.ValueType">
            <summary>
            Gets or sets the type of the value of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.ItemType">
            <summary>
            Gets or sets the item type for field that describes the entity set.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.OnTargetRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> action that will be executed on referenced Entity removal.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Orm.EntitySet`1"/>.</exception>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.OnOwnerRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> action that will be executed with referenced Entity on field owner removal.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Orm.EntitySet`1"/>.</exception>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.PairTo">
            <summary>
            Gets or sets the name of the paired field.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity.</exception>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Validators">
            <summary>
            Gets of <see cref="T:Xtensive.Orm.Validation.IPropertyValidator"/> instances associated with this field.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.LetterCasePolicy">
            <summary>
            Enumerates all possible modification types to names.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Default">
            <summary>
            Default mode. The same as <see cref="F:Xtensive.Orm.Configuration.LetterCasePolicy.AsIs"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.AsIs">
            <summary>
            No modifications should be applied.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Uppercase">
            <summary>
            Name should be in upper case.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Lowercase">
            <summary>
            Name should be in lower case.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.NamingRules">
            <summary>
            Miscellaneous naming policy rules.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.None">
            <summary>
            No modification should be applied.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreHyphens">
            <summary>
            All hyphens should be replaced with underscore symbol.
            This option is mutually exclusive with <see cref="F:Xtensive.Orm.Configuration.NamingRules.RemoveHyphens"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreDots">
            <summary>
            All dots should be replaced with underscore symbol.
            This option is mutually exclusive with <see cref="F:Xtensive.Orm.Configuration.NamingRules.RemoveDots"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.RemoveHyphens">
            <summary>
            All hyphens should be removed.
            This option is mutually exclusive with <see cref="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreHyphens"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.RemoveDots">
            <summary>
            All dots should be removed.
            This option is mutually exclusive with <see cref="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreDots"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamingRules.Default">
            <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.NamingRules.None"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.NamespacePolicy">
            <summary>
            Enumerates all possible namespace treatment options in naming policy.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Default">
            <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.NamespacePolicy.Omit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Omit">
            <summary>
            Only name of the type will be used to derive the name of
            the table or view.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Synonymize">
            <summary>
            Name of the type and namespace synonym will be used to derive 
            the name of the table or view.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.AsIs">
            <summary>
            Name of the type and namespace name will be used to derive 
            the name of the table or view.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Hash">
            <summary>
            Name of the type and namespace hashes will be used to derive 
            the name of the table or view. Driver decides on the type of hashing
            algorythm to use.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.NamingConvention">
            <summary>
            A set of rules for model definition objects naming.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NamingConvention.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.NamingConvention.Clone">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NamingConvention.LetterCasePolicy">
            <summary>
            Gets or sets the letter case policy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamespacePolicy">
            <summary>
            Gets or sets the namespace policy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamingRules">
            <summary>
            Gets or sets the naming rules.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamespaceSynonyms">
            <summary>
            Gets namespace synonyms dictionary where key is a namespace name and value is a synonym.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.TypeDef">
            <summary>
            Defines a single persistent type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineIndex(System.String)">
            <summary>
            Defines the index and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Indexes"/>.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument "name" is invalid.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineField(System.Reflection.PropertyInfo)">
            <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields"/>.
            </summary>
            <param name="property">The underlying property.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineField(System.String,System.Type)">
            <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="valueType">The type of the field value.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.StaticTypeId">
            <summary>
            Gets or sets static type id for this type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsEntity">
            <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsAbstract">
            <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsSystem">
            <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsInterface">
            <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsStructure">
            <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsAutoGenericInstance">
            <summary>
            Gets a value indicating whether this instance is automatically registered generic type instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.UnderlyingType">
            <summary>
            Gets or sets the underlying system type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Indexes">
            <summary>
            Gets the indexes for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields">
            <summary>
            Gets the fields contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Implementors">
            <summary>
            Gets the direct implementors of this instance (if this is an interface).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Validators">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Validation.IObjectValidator"/> instances associated with this type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.TypeDiscriminatorValue">
            <summary>
            Gets or sets the type discriminator value.
            </summary>
            <value>The type discriminator value.</value>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsDefaultTypeInHierarchy">
            <summary>
            Gets or sets a value indicating whether this instance is default type in hierarchy.
            </summary>
            <value>
            <see langword="true"/> if this instance is default type in hierarchy; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Xtensive.Orm.Building.Validator.ValidateName(System.String,Xtensive.Orm.Building.ValidationRule)">
            <summary>
            Determines whether the specified name is valid.
            </summary>
            <param name="name">The name to validate.</param>
            <param name="rule">The validation rule.</param>
            <returns>
            <see langword="true"/> if the specified name is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Validator.EnsureIsNullable(System.Type)">
            <exception cref="T:Xtensive.Orm.DomainBuilderException">Field cannot be nullable.</exception>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SessionConfiguration">
            <summary>
            <see cref="T:Xtensive.Orm.Session"/> configuration.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCacheSize">
            <summary>
            Default cache size.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultDefaultIsolationLevel">
            <summary>
             Default isolation level.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultBatchSize">
            <summary>
            Default batch size.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultEntityChangeRegistrySize">
            <summary>
            Default size of entity change registry.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.Default">
            <summary>
            Default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.CreateClone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.CopyFrom(Xtensive.Orm.Configuration.ConfigurationBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.Clone">
            <summary>
            Clones this configuration.
            </summary>
            <returns>The clone of this configuration.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(Xtensive.Orm.Configuration.SessionOptions)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="sessionOptions">The session options.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(System.String)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="name">Value for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(System.String,Xtensive.Orm.Configuration.SessionOptions)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="name">Value for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Name">
            <summary>
            Gets the session name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.UserName">
            <summary>
            Gets or sets user name to authenticate.
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Password">
            <summary>
            Gets or sets password to authenticate.
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheSize">
            <summary>
            Gets or sets the size of the session entity state cache. 
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheType">
            <summary>
            Gets or sets the type of the session cache.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultIsolationLevel">
            <summary>
            Gets or sets the default isolation level. 
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultDefaultIsolationLevel"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            Default value is <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Type">
            <summary>
            Gets session type.
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionType.User"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.BatchSize">
            <summary>
            Gets or sets the size of the batch.
            This affects create, update, delete operations and future queries.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Options">
            <summary>
            Gets or sets session options.
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Default"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ReaderPreloading">
            <summary>
            Gets or sets the reader preloading policy.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.EntityChangeRegistrySize">
            <summary>
            Gets or sets the size of the entity change registry.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ServiceContainerType">
            <summary>
            Gets or sets the type of the service container.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ConnectionInfo">
            <summary>
            Gets or sets the custom <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.ConnectionInfo"/> for session.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.SessionExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Session"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.SessionExtensions.ToStringSafely(Xtensive.Orm.Session)">
            <summary>
            Gets the string representation of specified 
            <see cref="T:Xtensive.Orm.Session"/> safely (with null check).
            </summary>
            <param name="session">The session to get the string representation for.</param>
            <returns>The string representation of specified <paramref name="session"/>;
            "n\a", if <paramref name="session"/> is <see langword="null"/>.</returns>
        </member>
        <member name="T:Xtensive.Orm.SessionScope">
            <summary>
            <see cref="P:Xtensive.Orm.SessionScope.Session"/> activation scope. 
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SessionScope.#ctor(Xtensive.Orm.Session)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="session">The session to activate.</param>
        </member>
        <member name="P:Xtensive.Orm.SessionScope.CurrentSession">
            <summary>
            Gets the current <see cref="P:Xtensive.Orm.SessionScope.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.SessionScope.Session">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.BuildingContext">
            <summary>
            Domain building context.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.BuildingContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Building.BuildingContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Building.BuildingContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Configuration">
            <summary>
            Gets the configuration of the building <see cref="T:Xtensive.Orm.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.BuilderConfiguration">
            <summary>
            Gets the building configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Domain">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain"/> object.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.NameBuilder">
            <summary>
            Gets the name builder.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.ModelDef">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain"/> model definition.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Model">
            <summary>
            Gets domain model.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Modules">
            <summary>
            Gets all available <see cref="T:Xtensive.Orm.IModule"/> implementations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingContext.Modules2">
            <summary>
            Gets all available <see cref="T:Xtensive.Orm.IModule2"/> implementations.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.BuildingScope">
            <summary>
            The scope for <see cref="T:Xtensive.Orm.Building.BuildingContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.BuildingScope.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.DomainUpgradeMode">
            <summary>
            Enumerates possible <see cref="T:Xtensive.Orm.Domain"/> upgrade modes.
            <seealso cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/>
            <seealso cref="T:Xtensive.Orm.Domain"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.Skip">
            <summary>
            Minimal validation is performed.
            Assembly versions are checked.
            Type identifiers are extracted.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.Validate">
            <summary>
            Validation only mode.
            <see cref="T:Xtensive.Orm.DomainBuilderException"/> will be 
            thrown if storage schema differs from the expected one.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.Recreate">
            <summary>
            Recreates all the necessary structures. 
            Storage will contain no instances after this type of update.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.Perform">
            <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, 
            unmapped columns and tables will be removed.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.PerformSafely">
            <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, 
            unmapped columns and tables will be removed 
            only if there are corresponding hints.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.LegacySkip">
            <summary>
            Legacy database support mode.
            No validation is performed.
            Use at your own risk.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.LegacyValidate">
            <summary>
            Legacy database support mode. 
            Similar to <see cref="F:Xtensive.Orm.DomainUpgradeMode.Validate"/>, but schema comparison
            is limited to comparison of tables and columns, everything
            else is ignored.
            <see cref="T:Xtensive.Orm.DomainBuilderException"/> will be 
            thrown if storage schema significantly differs 
            from the expected one.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.DomainUpgradeMode.Default">
            <summary>
            Default upgrade mode.
            The same as <see cref="F:Xtensive.Orm.DomainUpgradeMode.PerformSafely"/>
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Definitions.DomainModelDef">
            <summary>
            Defines the whole <see cref="T:Xtensive.Orm.Domain"/> model.
            The root definition.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.DefineType(System.Type)">
            <summary>
            Defines new <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> and adds it to <see cref="T:Xtensive.Orm.Building.Definitions.DomainModelDef"/> instance.
            </summary>
            <param name="type">The underlying type.</param>
            <returns>Newly created <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.FindRoot(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Finds the root of inheritance hierarchy for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search root for.</param>
            <returns><see name="TypeDef"/> instance that is root of specified <paramref name="item"/> or 
            <see langword="null"/> if the root is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.FindHierarchy(Xtensive.Orm.Building.Definitions.TypeDef)">
            <summary>
            Finds the hierarchy.
            </summary>
            <param name="item">The type to search hierarchy for.</param>
            <returns><see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef"/> instance or <see langword="null"/> if hierarchy is not found.</returns>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.Types">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef"/> instances contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.Hierarchies">
            <summary>
            Gets the collection of <see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef"/> instances contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.FullTextIndexes">
            <summary>
            Gets the collection of <see cref="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef"/> instances contained in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Domain">
            <summary>
            Storage access point.
            </summary>
            <sample>
            <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Domain sample"></code>
            </sample>
        </member>
        <member name="M:Xtensive.Orm.Domain.Demand">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain"/> of the current <see cref="T:Xtensive.Orm.Session"/>, or throws <see cref="T:System.InvalidOperationException"/>, 
            if active <see cref="T:Xtensive.Orm.Session"/> is not found.
            </summary>
            <returns>Current domain.</returns>
            <exception cref="T:System.InvalidOperationException">Current session is <see langword="null"/>.</exception>
            <seealso cref="M:Xtensive.Orm.Session.Demand">Session.Current property</seealso>
        </member>
        <member name="M:Xtensive.Orm.Domain.OpenSession">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = Domain.OpenSession()) {
            // work with persistent objects here.
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="M:Xtensive.Orm.Domain.OpenSession(Xtensive.Orm.Configuration.SessionType)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType"/>.
            </summary>
            <param name="type">The type of session.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = domain.OpenSession(sessionType)) {
            // work with persistent objects here.
            }
            </code></sample>
        </member>
        <member name="M:Xtensive.Orm.Domain.OpenSession(Xtensive.Orm.Configuration.SessionConfiguration)">
            <summary>
            Opens new <see cref="T:Xtensive.Orm.Session"/> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="configuration">The session configuration.</param>
            <returns>
            New <see cref="T:Xtensive.Orm.Session"/> object.
            </returns>
            <sample><code>
            using (var session = domain.OpenSession(configuration)) {
            // work with persistent objects here
            }
            </code></sample>
            <seealso cref="T:Xtensive.Orm.Session"/>
        </member>
        <member name="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)">
            <summary>
            Builds the new <see cref="T:Xtensive.Orm.Domain"/> according to the specified <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/>.
            </summary>
            <param name="configuration">The configuration of domain to build.</param>
            <returns>Newly built <see cref="T:Xtensive.Orm.Domain"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Domain.Dispose">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Orm.Domain.SessionOpen">
            <summary>
            Occurs when new <see cref="T:Xtensive.Orm.Session"/> is open and activated.
            </summary>
            <seealso cref="M:Xtensive.Orm.Domain.OpenSession"/>
        </member>
        <member name="E:Xtensive.Orm.Domain.Disposing">
            <summary>
            Occurs when <see cref="T:Xtensive.Orm.Domain"/> is about to be disposed.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.Current">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain"/> of the current <see cref="T:Xtensive.Orm.Session"/>. 
            </summary>
            <seealso cref="P:Xtensive.Orm.Session.Current"/>
            <seealso cref="M:Xtensive.Orm.Domain.Demand"/>
        </member>
        <member name="P:Xtensive.Orm.Domain.Configuration">
            <summary>
            Gets the domain configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.Model">
            <summary>
            Gets the domain model.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.StorageProviderInfo">
            <summary>
            Gets the information about provider's capabilities.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.Services">
            <summary>
            Gets the domain-level service container.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.StorageNodeManager">
            <summary>
            Gets storage node manager.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Domain.Extensions">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.FieldAttribute">
            <summary>
            Indicates that property is persistent field
            and defines its persistence-related properties.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.Indexed">
            <summary>
            Gets or sets whether the field should be indexed.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.Length">
            <summary>
            Gets or sets the length of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.String"/> or array of <see cref="T:System.Byte"/> fields.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.Decimal"/> type.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.Decimal"/> type.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.Nullable">
            <summary>
            Gets or sets a value indicating whether this field is nullable.
            </summary>
            <remarks>
            Note that this should be applied to reference fields only. For value-based fields
            consider using <see cref="T:System.Nullable`1"/> approach.
            </remarks>
            <value>
            <see langword="true"/> if field nullable; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.NullableOnUpgrade">
            <summary>
            Gets or sets a value indicating whether this field must be <see cref="P:Xtensive.Orm.FieldAttribute.Nullable"/> during upgrade.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for this property.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.DefaultSqlExpression">
            <summary>
            Gets or sets arbitrary SQL expression as default value for this property.
            This default value has higher priority than <see cref="P:Xtensive.Orm.FieldAttribute.DefaultValue"/>.
            <see langword="null"/> indicates default value is provided automatically.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.FieldAttribute.LazyLoad">
            <summary>
            Gets or sets a value indicating whether value of this field should be loaded on demand.
            </summary>
            <remarks>
            Usually lazy loading is used for byte-arrays, large string fields or <see cref="T:Xtensive.Orm.Structure">structures</see>.
            <see cref="T:Xtensive.Orm.Entity"/> and <see cref="T:Xtensive.Orm.EntitySet`1"/> fields are always loaded on demand.
            </remarks>
        </member>
        <member name="T:Xtensive.Orm.IndexAttribute">
            <summary>
            Defines secondary index.
            </summary>
            <example>
              <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\Attributes\AttributesTest.cs" region="Model" />
            </example>
        </member>
        <member name="M:Xtensive.Orm.IndexAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="keyField">The first key field.</param>
            <param name="keyFields">The other (optional) key fields.</param>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.Name">
            <summary>
            Gets or sets the index name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.KeyFields">
            <summary>
            Key fields that compose the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.IncludedFields">
            <summary>
            Non key fields that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.FillFactor">
            <summary>
            Fill factor for this index, must be a real number between 
            <see langword="0"/> and <see langword="1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.Unique">
            <summary>
            Gets or sets a value indicating whether the index is unique.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.Filter">
            <summary>
            Gets or sets member name that provides filtering expression for partial index.
            This member should be static property or static method without parameters.
            It should return either <see cref="T:System.Linq.Expressions.LambdaExpression"/> or any descendant of it.
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> should define a function that takes one argument
            and returns <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.FilterType">
            <summary>
            Gets or sets type that contains member specified by <see cref="P:Xtensive.Orm.IndexAttribute.Filter"/>.
            If <see cref="P:Xtensive.Orm.IndexAttribute.FilterType"/> is not set,
            type that <see cref="T:Xtensive.Orm.IndexAttribute"/> is applied to is used.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.IndexAttribute.Clustered">
            <summary>
            Gets or sets a value indicating whether this index should be clustered.
            If underlying RDBMS does not support clustered indexes, this value is ignored.
            Default value is <see langword="false" />.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TableMappingAttribute">
            <summary>
            Table mapping attribute.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TableMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name"><see cref="P:Xtensive.Orm.TableMappingAttribute.Name"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.TableMappingAttribute.Name">
            <summary>
            Gets the base part of the field's related column name 
            or the base part of the class' related table name.
            </summary>
            <remarks>
            You can use the following characters in <see cref="P:Xtensive.Orm.TableMappingAttribute.Name"/>s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Orm.TableMappingAttribute.Name"/> can't be an empty string or <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:Xtensive.Orm.Structure">
            <summary>
            Abstract base class for any persistent structure.
            Persistent structures are types having <see cref="T:System.ValueType"/> behavior -
            they have no keys, and thus can be stored only as parts of entities.
            </summary>
            <remarks>
            <para>
            Like <see cref="P:Xtensive.Orm.Structure.Entity"/>, structures support inheritance and consist of one or more persistent 
            fields (properties) of scalar, <see cref="T:Xtensive.Orm.Structure"/>, or <see cref="P:Xtensive.Orm.Structure.Entity"/> type.
            </para>
            <para>
            However unlike entity, structure is not identified by <see cref="T:Xtensive.Orm.Key"/>
            and has value type behavior: it can be stored only inside some entity.
            </para>
            </remarks>
            <example>In the following example Address fields (City, Street and Building) will be included in Person table.
            <code>
            public class Person : Entity
            {
              [Field, Key]
              public int Id { get; set; }
            
              public string Name { get; set; }
            
              public Address Address { get; set; }
            }
            
            public class Address : Structure
            {
              [Field]
              public City City { get; set; }
              
              [Field]
              public string Street { get; set; }
            
              [Field]
              public string Building { get; set; }
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Orm.Structure.GetSubscription(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Structure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Structure.Equals(Xtensive.Orm.Structure)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Structure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Session)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="data">Underlying <see cref="P:Xtensive.Orm.Structure.Tuple"/> value.</param>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Session,Xtensive.Tuples.Tuple)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
            <param name="data">Underlying <see cref="P:Xtensive.Orm.Structure.Tuple"/> value.</param>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
            <summary>
            Initializes a new instance of this class.
            Used internally to initialize the structure on materialization.
            </summary>
            <param name="owner">The owner of this instance.</param>
            <param name="field">The owner field that describes this instance.</param>
        </member>
        <member name="M:Xtensive.Orm.Structure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Structure"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.Structure.TypeInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Structure.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Structure.Field">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Structure.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Structure.IsBoundToEntity">
            <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Orm.Structure"/> instance is bound to entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Structure.Tuple">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Structure.CanBeValidated">
            <inheritdoc/> 
        </member>
        <member name="E:Xtensive.Orm.Structure.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.PersistenceState">
            <summary>
            Defines possible persistence states of the entities.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistenceState.Synchronized">
            <summary>
            The entity is synchronized with the database (there are no unsaved changes).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistenceState.New">
            <summary>
            The entity is created, but not persisted yet.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistenceState.Modified">
            <summary>
            The entity presents in database, but has some unpersisted changes.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.PersistenceState.Removed">
            <summary>
            The entity is marked as removed, but is not removed from database yet.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Building.Builders.DomainBuilder">
            <summary>
            Utility class for <see cref="T:Xtensive.Orm.Domain"/> building.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.Builders.DomainBuilder.Run(Xtensive.Orm.Building.Builders.DomainBuilderConfiguration)">
            <summary>
            Builds the domain.
            </summary>
            <param name="builderConfiguration">The builder configuration.</param>
            <returns>Built domain.</returns>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DomainConfiguration">
            <summary>
            The configuration of the <see cref="T:Xtensive.Orm.Domain"/>.
            </summary> 
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSectionName">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName"/> value:
            "<see langword="Xtensive.Orm"/>".
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize"/> value: 
            <see langword="16*1024"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize"/> value: 
            <see langword="128"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultQueryCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize"/> value: 
            <see langword="256"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize"/> value: 
            <see langword="1024"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultIncludeSqlInExceptions">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.IncludeSqlInExceptions"/> value: 
            <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultBuildInParallel">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.BuildInParallel"/> value: 
            <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultMultidatabaseKeys">
            <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.MultidatabaseKeys"/> value:
            <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked as well.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.CreateClone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.CopyFrom(Xtensive.Orm.Configuration.ConfigurationBase)">
            <summary>
            Copies the properties from the <paramref name="source"/>
            configuration to this one.
            Used by <see cref="M:Xtensive.Orm.Configuration.ConfigurationBase.Clone"/> method implementation.
            </summary>
            <param name="source">The configuration to copy properties from.</param>
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The clone of this configuration.</returns>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Load(System.String)">
            <summary>
            Loads the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/> for <see cref="T:Xtensive.Orm.Domain"/>
            with the specified <paramref name="name"/>
            from application configuration file (section with <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName"/>).
            </summary>
            <param name="name">Name of the <see cref="T:Xtensive.Orm.Domain"/>.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/> for the specified domain.
            </returns>
            <exception cref="T:System.InvalidOperationException">Section <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName"/>
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Orm.Domain"/> with specified <paramref name="name"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Load(System.String,System.String)">
            <summary>
            Loads the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/> for <see cref="T:Xtensive.Orm.Domain"/>
            with the specified <paramref name="name"/>
            from application configuration file (section with <paramref name="sectionName"/>).
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="name">Name of the <see cref="T:Xtensive.Orm.Domain"/>.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/> for the specified domain.
            </returns>
            <exception cref="T:System.InvalidOperationException">Section <paramref name="sectionName"/>
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Orm.Domain"/> with specified <paramref name="name"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="connectionUrl">The string containing connection URL for <see cref="T:Xtensive.Orm.Domain"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(Xtensive.Orm.UrlInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="connectionUrl">The connection URL.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(Xtensive.Orm.ConnectionInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName">
            <summary>
            Gets or sets the name of the section where storage configuration is configuration.
            </summary>
            <exception cref="T:System.NotSupportedException">The property is already defined once.</exception>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Name">
            <summary>
            Gets or sets the domain configuration name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo">
            <summary>
            Gets or sets the connection info.
            </summary>
            <example>
            <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Connection URL examples" />
            <code lang="cs">
            var configuration = new DomainConfiguration();
            configuration.ConnectionInfo = new ConnectionInfo(connectionUrl);
            </code>
            </example>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema">
            <summary>
            Gets or sets the default schema.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultDatabase">
            <summary>
            Gets or sets the default database.
            If database aliases are configured, this should be an alias name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.UpgradeMode">
            <summary>
            Gets or sets a value indicating domain upgrade behavior. 
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Types">
            <summary>
            Gets the collection of persistent <see cref="T:System.Type"/>s that are about to be 
            registered in the <see cref="T:Xtensive.Orm.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.LinqExtensions">
            <summary>
            Gets the collection of LINQ extensions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.NamingConvention">
            <summary>
            Gets or sets the naming convention.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize">
            <summary>
            Gets or sets the size of the key cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize">
            <summary>
            Gets or sets the size of the key generator cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize">
            <summary>
            Gets or sets the size of the query cache (see <see cref="M:Xtensive.Orm.Query.Execute``1(System.Func{System.Linq.IQueryable{``0}})"/>).
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultQueryCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize">
            <summary>
            Gets or sets the size of the record set mapping cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ForeignKeyMode">
            <summary>
            Gets or sets a value indicating foreign key mode. 
            Default value is <see cref="F:Xtensive.Orm.ForeignKeyMode.Default"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.SchemaSyncExceptionFormat">
            <summary>
            Gets or sets <see cref="T:Xtensive.Orm.SchemaSynchronizationException"/> format.
            Default value is <see cref="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Detailed"/>.
            To get old format that was used in DataObjects.Net prior to version 4.5
            set this to <see cref="F:Xtensive.Orm.Configuration.SchemaSyncExceptionFormat.Brief"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Sessions">
            <summary>
            Gets available session configurations.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.MappingRules">
            <summary>
            Gets or sets registered mapping rules.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Databases">
            <summary>
            Gets or sets registered database aliases.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGenerators">
            <summary>
            Gets or sets key generators.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType">
            <summary>
            Gets or sets the type of the service container.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.IncludeSqlInExceptions">
            <summary>
            Gets or sets value indicating whether SQL text of a query
            that caused error should be included in exception message.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.AllowCyclicDatabaseDependencies">
            <summary>
            Gets or sets value indicating whether
            cyclic database dependencies are allowed.
            This option has no effect unless <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.IsMultidatabase"/> is true.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ForcedServerVersion">
            <summary>
            Gets or sets forced server version,
            if this property set to non-empty value,
            DataObjects.Net acts as it connected to server having
            specified version, ignoring actual version of the server.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.BuildInParallel">
            <summary>
            Gets or sets value indicating whether <see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/>
            process should be parallelized whenever possible.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.IgnoreRules">
            <summary>
            Get or set registered ignore rules
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Collation">
            <summary>
            Gets or sets collation for all columns.
            If provider does not utilize collations this setting is ignored.
            <remarks>
            Only 'sqlserver', 'sqlserverce' and 'sqlite' providers support this setting.
            For 'sqlite' provider the following non-standard collations are supported
            in addition to any user-provided collations:
            StringComparer_Ordinal, StringComparer_Ordinal_IgnoreCase,
            StringComparer_CurrentCulture, StringComparer_CurrentCulture_IgnoreCase,
            StringComparer_InvariantCulture, StringComparer_InvariantCulture_IgnoreCase.
            </remarks>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.NativeLibraryCacheFolder">
            <summary>
            Gets or sets native library cache folder.
            <remarks>
            This folder is used to store native libraries required for certain providers
            (currently only SQLite).
            </remarks>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInitializationSql">
            <summary>
            Gets or sets connection initialization SQL script.
            This script is executed for each created connection
            (including system connections) just after connection has been opened.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.MultidatabaseKeys">
            <summary>
            Gets or sets multidatabase key mode.
            In this mode keys generated for entities in different databases
            are treated as compatible. Enable this option if you want to
            implement persistent interfaces by entities mapped to different databases.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Options">
            <summary>
            Gets or sets domain options.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.IsMultidatabase">
            <summary>
            Gets a value indicating whether this configuration is multi-database.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.IsMultischema">
            <summary>
            Gets a value indicating whether this configuration is multi-schema.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.DomainTypeRegistrationHandler">
            <summary>
            <see cref="T:Xtensive.Collections.ITypeRegistrationProcessor"/> for processing <see cref="T:Xtensive.Orm.SessionBound"/> 
            and <see cref="T:Xtensive.Orm.IEntity"/> descendants registration in 
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Types"/> registry.
            </summary>
            <remarks>This implementation provides topologically sorted list 
            of <see cref="T:System.Type"/>s.</remarks>
        </member>
        <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistrationHandler.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration,System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistrationHandler.BaseType">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Transaction">
            <summary>
            An implementation of transaction suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Transaction"/>, 
            or throws <see cref="T:System.InvalidOperationException"/>, 
            if active <see cref="T:Xtensive.Orm.Transaction"/> is not found.
            </summary>
            <returns>Current transaction.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Transaction.Current"/> <see cref="T:Xtensive.Orm.Transaction"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Require(Xtensive.Orm.Session)">
            <summary>
            Checks whether a transaction exists or not in the provided session.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Transaction.Current"/> <see cref="T:Xtensive.Orm.Transaction"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.AreChangesVisibleTo(Xtensive.Orm.Transaction)">
            <summary>
            Indicates whether changes made in this transaction are visible "as is"
            in <paramref name="otherTransaction"/>. This implies <paramref name="otherTransaction"/>
            and this transaction at least share the same <see cref="P:Xtensive.Orm.Transaction.Outermost"/> transaction.
            Please refer to the code of this method to clearly understand what it really does ;)
            </summary>
            <param name="otherTransaction">The other transaction.</param>
            <returns>
            <see langword="True"/> if changes made in this transaction are visible
            "as is" in <paramref name="otherTransaction"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.TransactionOpenMode)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="mode">The mode.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,Xtensive.Orm.TransactionOpenMode)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="mode">The mode.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="mode">The mode.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope"/> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Orm.ICompletableScope.IsCompleted"/> flag.
            </returns>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Transaction"/> object
            using <see cref="P:Xtensive.Orm.Transaction.Session"/>.<see cref="P:Xtensive.Orm.Session.Current"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.IsAutomatic">
            <summary>
            Gets a value indicating whether this instance is automatic transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.IsDisconnected">
            <summary>
            Gets a value indicating whether this instance is 
            transaction running locally.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Guid">
            <summary>
            Gets the unique identifier of this transaction.
            Nested transactions have the same <see cref="P:Xtensive.Orm.Transaction.Guid"/> 
            as their outermost.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Session">
            <summary>
            Gets the session this transaction is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.IsolationLevel">
            <summary>
            Gets the isolation level.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.State">
            <summary>
            Gets the state of the transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Outer">
            <summary>
            Gets the outer transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Outermost">
            <summary>
            Gets the outermost transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.TimeStamp">
            <summary>
            Gets the start time of this transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.IsNested">
            <summary>
            Gets a value indicating whether this transaction is a nested transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.LifetimeToken">
            <summary>
            Gets <see cref="T:Xtensive.Orm.StateLifetimeToken"/> associated with this transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Transaction.Extensions">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.TransactionalExtensions">
            <summary>
            Various extensions related to transactions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Orm.Session,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Orm.Session)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Orm.Session,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Orm.Session,System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0})">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Orm.Session)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},System.Transactions.IsolationLevel)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
            <typeparam name="T">The type of item in sequence.</typeparam>
            <param name="source">The sequence to convert.</param>
            <returns>"Transactional" version of sequence.</returns>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session)">
            <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
            <typeparam name="T">The type of item in sequence.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="session">The session.</param>
            <returns>"Transactional" version of sequence.</returns>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},System.Transactions.IsolationLevel)">
            <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
            <typeparam name="T">The type of item in sequence.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>"Transactional" version of sequence.</returns>
        </member>
        <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
            <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
            <typeparam name="T">The type of item in sequence.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>"Transactional" version of sequence.</returns>
        </member>
        <member name="T:Xtensive.Orm.TransactionOpenMode">
            <summary>
            Describes transaction opening mode.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionOpenMode.Auto">
            <summary>
            Existing transaction will be used if it is already open, 
            otherwise new transaction will be open.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionOpenMode.New">
            <summary>
            New transaction will be open, i.e. nested one if some transaction is already open.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TransactionOpenMode.Default">
            <summary>
            Default value is <see cref="F:Xtensive.Orm.TransactionOpenMode.Auto"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TransactionScope">
            <summary>
            Transaction scope suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionScope.Complete">
            <summary>
            Completes this scope. 
            This method can be called multiple times; if so, only the first call makes sense.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.TransactionScope.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is <see cref="M:Xtensive.Orm.TransactionScope.Complete"/>d.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TransactionScope.VoidScopeInstance">
            <summary>
            <see cref="T:Xtensive.Orm.TransactionScope"/> instance that is used for all <see cref="P:Xtensive.Orm.TransactionScope.IsVoid">nested</see> scopes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TransactionScope.Transaction">
            <summary>
            Gets the transaction this scope controls.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TransactionScope.IsVoid">
            <summary>
            Gets a value indicating whether this scope is void,
            i.e. is included into another <see cref="T:Xtensive.Orm.TransactionScope"/> 
            and therefore does nothing on opening and disposing.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Ref`1">
            <summary>
            Typed reference to <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <typeparam name="T">The type of referenced object (<see cref="P:Xtensive.Orm.Ref`1.Value"/> property).</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.Equals(Xtensive.Orm.Ref{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.Equals(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Key)~Xtensive.Orm.Ref{`0}">
            <summary>
            Implicit conversion of <see cref="P:Xtensive.Orm.Ref`1.Key"/> to <see cref="T:Xtensive.Orm.Ref`1"/>.
            </summary>
            <param name="key">Key of the entity to provide typed reference for.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.op_Implicit(`0)~Xtensive.Orm.Ref{`0}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.IEntity"/> to <see cref="T:Xtensive.Orm.Ref`1"/>.
            </summary>
            <param name="entity">The entity to provide typed reference for.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Ref{`0})~Xtensive.Orm.Key">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.Ref`1"/> to <see cref="P:Xtensive.Orm.Ref`1.Key"/>.
            </summary>
            <param name="reference">The typed reference to convert.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Ref{`0})~`0">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.Ref`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="reference">The typed reference to convert.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.#ctor(Xtensive.Orm.Key)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="key">The key of entity this reference points to.</param>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="formattedKey">The formatted key of entity this reference points to.</param>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="entity">The entity this reference points to.</param>
        </member>
        <member name="M:Xtensive.Orm.Ref`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Xtensive.Orm.Ref`1.Key">
            <summary>
            Gets the key of the referenced entity.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Ref`1.FormattedKey">
            <summary>
            Gets the formatted key of the referenced entity.
            Formatted key is the string produced with <see cref="M:Xtensive.Orm.Key.Format"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Ref`1.Value">
            <summary>
            Gets the referenced entity (resolves the reference).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TypeExtensions">
            <summary>
            Useful <see cref="T:System.Type"/>-related extensions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TypeExtensions.GetTypeInfo(System.Type)">
            <summary>
            Gets the corresponding <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns><see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.</returns>
            <remarks>This method requires open <see cref="T:Xtensive.Orm.Session"/>.</remarks>
        </member>
        <member name="M:Xtensive.Orm.TypeExtensions.GetTypeInfo(System.Type,Xtensive.Orm.Domain)">
            <summary>
            Gets the corresponding <see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.
            </summary>
            <param name="type">The type.</param>
            <param name="domain">The domain to look for <see cref="T:Xtensive.Orm.Model.TypeInfo"/> within.</param>
            <returns><see cref="T:Xtensive.Orm.Model.TypeInfo"/> instance.</returns>
        </member>
        <member name="T:Xtensive.Orm.TypeReference">
            <summary>
            Reference to <see cref="T:Xtensive.Orm.Model.TypeInfo"/> with the specified degree of accuracy.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TypeReference.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.TypeReferenceAccuracy)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The referenced type.</param>
            <param name="accuracy">The type reference accuracy.</param>
        </member>
        <member name="P:Xtensive.Orm.TypeReference.Type">
            <summary>
            Gets or sets the referenced type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.TypeReference.Accuracy">
            <summary>
            Gets or sets the type reference accuracy.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TypeReferenceAccuracy">
            <summary>
            Describes type reference accuracy.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TypeReferenceAccuracy.Hierarchy">
            <summary>
            Referenced type is limited to the entire hierarchy.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TypeReferenceAccuracy.BaseType">
            <summary>
            Referenced type is limited to the hierarchy subtree (specified type and its ancestors).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.TypeReferenceAccuracy.ExactType">
            <summary>
            Referenced type is exactly known.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.MoveFieldHint">
            <summary>
            Move field hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Equals(Xtensive.Orm.Upgrade.MoveFieldHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType"/>.</param>
            <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType"/>.</param>
            <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField"/> and <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.Type,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType"/>.</param>
            <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType"/>.</param>
            <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField"/> and <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Create``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourceType">The source type.</param>
            <param name="sourceField">The source field.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourceType">The source type.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Create``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourcePropertyAccessExpression">The source field access expression.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField">
            <summary>
            Gets the source field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField">
            <summary>
            Gets the target field.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RemoveFieldHint">
            <summary>
            Remove field hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Equals(Xtensive.Orm.Upgrade.RemoveFieldHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Type"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Field"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Type"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Field"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyAccessExpression">The field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Type">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Field">
            <summary>
            Gets the source field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.IsExplicit">
            <summary>
            Gets or sets a value indicating whether this instance is explicit.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.AffectedColumns">
            <summary>
            Gets affected column paths.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RemoveTypeHint">
            <summary>
            Remove type hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.Equals(Xtensive.Orm.Upgrade.RemoveTypeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveTypeHint.Type"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveTypeHint.Type">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RemoveTypeHint.AffectedTables">
            <summary>
            Gets affected column paths.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.SystemTypeAttribute">
            <summary>
            Marks persistent type as a system type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SystemTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SystemTypeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="typeId">The type identifier.</param>
        </member>
        <member name="P:Xtensive.Orm.SystemTypeAttribute.TypeId">
            <summary>
            Type identifier to preserve for it.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeContext">
            <summary>
            Upgrade context.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Current"/> <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.UpgradeMode">
            <summary>
            Gets current <see cref="T:Xtensive.Orm.DomainUpgradeMode"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Stage">
            <summary>
            Gets the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.OriginalConfiguration">
            <summary>
            Gets the original <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Configuration">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration"/>
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.NodeConfiguration">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.NodeConfiguration"/> (if available).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.ParentDomain">
            <summary>
            Gets parent domain.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints">
            <summary>
            Gets the upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.RecycledDefinitions">
            <summary>
            Gets the recycled definitions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaHints">
            <summary>
            Gets the schema upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaDifference">
            <summary>
            Gets the storage model difference 
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaUpgradeActions">
            <summary>
            Gets the schema upgrade actions
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedDomainModel">
            <summary>
            Gets the domain model that was extracted from storage.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap">
            <summary>
            Gets the extracted type map (full name of the type and type identifier).
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.FullTypeMap">
            <summary>
            Gets type identifier map for all known identifiers.
            This collection includes all items from <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap"/>,
            but it might include additional items if new types were added.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.UserDefinedTypeMap">
            <summary>
            Gets or sets additional type identifier map which defined by user.
            <para>
            NOTE THAT, this collection has lower priority than <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap"/>. 
            It means, if this collection and <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap"/> both have mapping for the same type, 
            then type identifier will be defined by value from <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap"/>.
            </para>
            <para>
            If domain configuration has configurations for databases with defined minimal and maximal type identifier,
            then type identifier must be set within limits, which defined in mapped database.
            If domain has not configurations for databases then all type identifiers in this collection must be greater then or equal to 100.
            </para>
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.UpgradeHandlers">
            <summary>
            Gets the map of upgrade handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.OrderedUpgradeHandlers">
            <summary>
            Gets the ordered collection of upgrade handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Modules">
            <summary>
            Gets the ordered collection of upgrade handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Session">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Session"/> that is used for upgrade.
            Session is available only in <see cref="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnStage"/>
            and <see cref="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnUpgrade"/> methods.
            You should not dispose upgrade session. Session lifetime is controlled by DataObjects.Net.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Connection">
            <summary>
            Gets <see cref="T:System.Data.Common.DbConnection"/> that is used for upgrade.
            You should not modify connection state by calling <see cref="M:System.Data.Common.DbConnection.Open"/>,
            <see cref="M:System.Data.Common.DbConnection.Close"/> or similar methods. Connection state is controlled by DataObjects.Net.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Transaction">
            <summary>
            Gets <see cref="T:System.Data.Common.DbTransaction"/> that is used for upgrade.
            You should not modify transaction state by calling <see cref="M:System.Data.Common.DbTransaction.Commit"/>,
            <see cref="M:System.Data.Common.DbTransaction.Rollback"/> or similar methods. Transaction state is controlled by DataObjects.Net.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.UpgradedTypesMapping">
            <summary>
            Gets mapping between new and old persistent types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeScope">
            <summary>
            The scope for <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeScope.#ctor(Xtensive.Orm.Upgrade.UpgradeContext)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SessionConfigurationCollection">
            <summary>
            <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Insert(System.Int32,Xtensive.Orm.Configuration.SessionConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Add(Xtensive.Orm.Configuration.SessionConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Equals(Xtensive.Orm.Configuration.SessionConfigurationCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Default">
            <summary>
             Gets the default session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.System">
            <summary>
             Gets the system session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Service">
            <summary>
             Gets the service session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.KeyGenerator">
            <summary>
             Gets the key generator session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Item(System.String)">
            <summary>
             Gets the element with the specified name.
            </summary>
            <param name="name">The string name of the element to get.</param>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.AreSameValues(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Linq.ExpressionEvaluator">
            <summary>
            Expression visitor that checks ability to evaluate expression to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.CanBeEvaluated(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether specified <paramref name="e"/> can be evaluated.
            </summary>
            <param name="e">The expression.</param>
            <returns>
              <see langword="true" /> if <paramref name="e"/> can be evaluated; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the specified <paramref name="e"/> into <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="e">The expression.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Linq.ParameterExtractor">
            <summary>
            Expression visitor that determines whether <see cref="T:System.Linq.Expressions.Expression"/> could be parameter.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.ParameterExtractor.IsParameter(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified <paramref name="e"/> is parameter.
            </summary>
            <param name="e">The expression.</param>
            <returns>
              <see langword="true" /> if the specified <paramref name="e"/> is parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.ParameterExtractor.ExtractParameter``1(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the parameter.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.ParameterExtractor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.ParameterExtractor.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.ParameterExtractor.#ctor(Xtensive.Orm.Linq.ExpressionEvaluator)">
            <summary>
              Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitOfType(System.Linq.Expressions.Expression,System.Type,System.Type)">
            <exception cref="T:System.NotSupportedException">OfType supports only 'Entity' conversion.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitCast(System.Linq.Expressions.Expression,System.Type,System.Type)">
            <exception cref="T:System.InvalidCastException">Unable to cast item.</exception>
            <exception cref="T:System.NotSupportedException">Cast supports only 'Entity' conversion.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitNew(System.Linq.Expressions.NewExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitBinaryRecursive(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.GetMember(System.Linq.Expressions.Expression,System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.VisitTypeAs(System.Linq.Expressions.Expression,System.Type)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Translator.#ctor(Xtensive.Orm.Linq.TranslatorContext)">
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session"/>.</exception>
        </member>
        <member name="T:Xtensive.Orm.Linq.QueryProvider">
            <summary>
            <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Linq.QueryProvider.Session">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Linq.QueryProvider.Session"/> this provider is attached to.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Record">
            <summary>
            A single item in <see cref="M:Xtensive.Orm.Internals.RecordSetReader.Read(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Rse.RecordSetHeader,Xtensive.Orm.Session)"/> result 
            containing both raw <see cref="P:Xtensive.Orm.Record.Source"/> and parsed primary keys.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Record.GetKey">
            <summary>
            Gets the first primary key in the <see cref="T:Xtensive.Orm.Record"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Record.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Key"/> by specified index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Record.GetTuple">
            <summary>
            Gets the first tuple in the <see cref="T:Xtensive.Orm.Record"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Record.GetTuple(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Tuples.Tuple"/> by specified index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Record.Count">
            <summary>
            Gets the key count.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Record.Source">
            <summary>
            Gets raw tuple this record is build from.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Metadata.Assembly">
            <summary>
            Persistent descriptor of an assembly with registered persistent types.
            Used for schema upgrade purposes.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Metadata.MetadataBase">
            <summary>
            Abstract base class for any metadata type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Metadata.MetadataBase.OnSettingFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="M:Xtensive.Orm.Metadata.MetadataBase.OnRemove">
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="M:Xtensive.Orm.Metadata.Assembly.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Assembly.Name">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Assembly.Version">
            <summary>
            Gets or sets the assembly version.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Metadata.Type">
            <summary>
            Persistent descriptor of registered type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Metadata.Type.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Type.Id">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Type.Name">
            <summary>
            Gets or sets the full type name.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.AssociationAttribute">
            <summary>
            Provides additional properties to association. 
            This attribute can be applied on persistent properties of <see cref="T:Xtensive.Orm.Entity"/> or <see cref="T:Xtensive.Orm.EntitySet`1"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.AssociationAttribute.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.AssociationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="pairTo">The pair to.</param>
        </member>
        <member name="P:Xtensive.Orm.AssociationAttribute.OnTargetRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> action that will be executed in case that 
            target (referenced) Entity is about to be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.AssociationAttribute.OnOwnerRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction"/> action that will be executed in case that 
            owner Entity (the owner of the reference field) is about to be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.AssociationAttribute.PairTo">
            <summary>
            Indicates that association (persistent collection or persistent field)
            is inverse end of another another collection or reference field.
            </summary>
            <remarks>
            <para>
            When reference field is paired to another reference field, their value is automatically synchronized.
            </para>
            <para>
            When collection is paired to reference field (One-to-Many association), 
            it does not allocate any space in the database and all operations on this EntitySet are 
            automatically synchronized to paired reference field.
            </para>
            <para>
            When collection is paired to another collection (Many-to-Many) association, auxiliary table
            will be automatically created to support this association.
            </para>
            </remarks>
            <example>In the following example User entity has three associations of different types.
            <code>
            public class User : Entity
            {
              ...
              
              // One-to-one association with "User" propery of "Account" class.
              [Association(PairTo = "User")]
              public Account Account { get; private set; }
              
              // One-to-many association
              [Association(PairTo = "Author")]
              public EntitySet&lt;BlogPost&gt; BlogPostss { get; private set; }
              
              // Many-to-many association
              [Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code>
            </example>
        </member>
        <member name="T:Xtensive.Orm.FieldMappingAttribute">
            <summary>
            Field mapping attribute.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.FieldMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Field mapping name.</param>
        </member>
        <member name="P:Xtensive.Orm.FieldMappingAttribute.Name">
            <summary>
            Gets the base part of the field's related column name.
            </summary>
            <remarks>
            You can use the following characters in <see cref="P:Xtensive.Orm.FieldMappingAttribute.Name"/>s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Orm.FieldMappingAttribute.Name"/> can't be an empty string or <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:Xtensive.Orm.KeyAttribute">
            <summary>
            Marks persistent property as a part of primary key and 
            specifies <see cref="P:Xtensive.Orm.KeyAttribute.Position"/> and <see cref="P:Xtensive.Orm.KeyAttribute.Direction"/> of the field in key.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyAttribute.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="position">The <see cref="P:Xtensive.Orm.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
        </member>
        <member name="M:Xtensive.Orm.KeyAttribute.#ctor(Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="direction">The <see cref="P:Xtensive.Orm.KeyAttribute.Direction">sort direction</see>.</param>
        </member>
        <member name="M:Xtensive.Orm.KeyAttribute.#ctor(System.Int32,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="position">The <see cref="P:Xtensive.Orm.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
            <param name="direction">The <see cref="P:Xtensive.Orm.KeyAttribute.Direction">sort direction</see>.</param>
        </member>
        <member name="P:Xtensive.Orm.KeyAttribute.Position">
            <summary>
            Gets or sets the position of persistent property inside primary key.
            </summary>
            <remarks>
            <para>Each key in hierarchy should have an unique position from 0 to N-1 where N is number of key fields.</para>
            <para>
            Key fields positions and <see cref="P:Xtensive.Orm.KeyAttribute.Direction">directions</see> choice can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and <see cref="P:Xtensive.Orm.KeyAttribute.Direction"/> of key fields.
            </para>
            <para>Default position is <c>0</c>.</para>
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.KeyAttribute.Direction">
            <summary>
            Gets or sets the sort direction. Default is <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
            <para>
            Key fields <see cref="P:Xtensive.Orm.KeyAttribute.Position">positions</see> and directions choice can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and direction of key fields.
            </para>
        </member>
        <member name="T:Xtensive.Orm.KeyGeneratorAttribute">
            <summary>
            Configures key generator for the hierarchy.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">The generator type. It should be type implmenting <see cref="T:Xtensive.Orm.KeyGenerator"/>.</param>
            <remarks><paramref name="type"/> can be null.</remarks>
        </member>
        <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor(Xtensive.Orm.KeyGeneratorKind)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="keyGeneratorKind">Kind of the key generator.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>keyGeneratorKind</c> cannot be 
            <see cref="F:Xtensive.Orm.KeyGeneratorKind.Custom"/> here.</exception>
        </member>
        <member name="P:Xtensive.Orm.KeyGeneratorAttribute.Kind">
            <summary>
            Gets the kind of key generator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.KeyGeneratorAttribute.Name">
            <summary>
            Gets or sets the name of the key generator.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.DomainConfiguration">
            <summary>
            Gets <see cref="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.DomainConfiguration"/> for domain.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.Stage">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Upgrade.UpgradeStage"/> for domain.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.Equals(Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.op_Equality(Xtensive.Orm.Building.DependencyGraph.Edge{`0},Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.op_Inequality(Xtensive.Orm.Building.DependencyGraph.Edge{`0},Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.EntityEventBroker">
            <summary>
            Manages events related to <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.GettingFieldEventKey">
            <summary>
            The key for 'Getting field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.GetFieldEventKey">
            <summary>
            The key of 'Get field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.SettingFieldAttemptEventKey">
            <summary>
            The key of 'Setting field attempt' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.SettingFieldEventKey">
            <summary>
            The key of 'Setting field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.SetFieldEventKey">
            <summary>
            The key of 'Set field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.PropertyChangedEventKey">
            <summary>
            The key of 'Property changed' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.CollectionChangedEventKey">
            <summary>
            The key of 'Collection changed' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.InitializingPersistentEventKey">
            <summary>
            The key of 'Initializing persistent' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.InitializePersistentEventKey">
            <summary>
            The key of 'Initialize persistent' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.InitializationErrorPersistentEventKey">
            <summary>
            The key of 'Error on initializing persistent' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.RemovingEntityEventKey">
            <summary>
            The key of 'Removing entity' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.RemoveEntityEventKey">
            <summary>
            The key of 'Remove entity' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.InitializeEntitySetEventKey">
            <summary>
            The key of 'Initialize entity set' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.AddingEntitySetItemEventKey">
            <summary>
            The key of 'Adding entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.AddEntitySetItemEventKey">
            <summary>
            The key of 'Add entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.RemovingEntitySetItemEventKey">
            <summary>
            The key of 'Removing entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.RemoveEntitySetItemEventKey">
            <summary>
            The key of 'Remove entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.ClearingEntitySetEventKey">
            <summary>
            The key of 'Clearing entity set' event.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.EntityEventBroker.ClearEntitySetEventKey">
            <summary>
            The key of 'Clear entity set' event.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.AddSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object,System.Delegate)">
            <summary>
            Adds the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.AddSubscriber(Xtensive.Orm.Key,System.Object,System.Delegate)">
            <summary>
            Adds the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.RemoveSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object,System.Delegate)">
            <summary>
            Removes the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.RemoveSubscriber(Xtensive.Orm.Key,System.Object,System.Delegate)">
            <summary>
            Removes the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object)">
            <summary>
            Gets the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <returns>A delegate registered for the event or <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscriber(Xtensive.Orm.Key,System.Object)">
            <summary>
            Gets the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Orm.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <returns>A delegate registered for the event or <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscribers(System.Object)">
            <summary>
            Gets all the subscribers for the specified <paramref name="eventKey"/>.
            </summary>
            <param name="eventKey">The event key.</param>
            <returns>
            The sequence of subscribers for the specified <paramref name="eventKey"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.EntityEventBroker.RemapKeys(Xtensive.Orm.KeyMapping)">
            <summary>
            Remaps the event keys in accordance with specified <paramref name="keyMapping"/>.
            </summary>
            <param name="keyMapping">The key mapping.</param>
        </member>
        <member name="P:Xtensive.Orm.EntityEventBroker.HasSubscribers">
            <summary>
            Gets a value indicating whether at least a one subscriber has registered.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.SchemaSynchronizationException">
            <summary>
            Describes schema synchronization errors 
            detected during <see cref="T:Xtensive.Orm.Domain"/>.<see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(Xtensive.Orm.Upgrade.SchemaComparisonResult)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="result">The schema comparison result.</param>
        </member>
        <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.SchemaSynchronizationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Xtensive.Orm.SchemaSynchronizationException.ComparisonResult">
            <summary>
            Gets or sets the schema comparison result.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.ForeignKeyMode">
            <summary>
            Enumerates possible foreign key build modes for <see cref="T:Xtensive.Orm.Domain"/>.
            <seealso cref="T:Xtensive.Orm.Domain"/>
            <seealso cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ForeignKeyMode.None">
            <summary>
            No foreign keys will be built for storage.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ForeignKeyMode.Hierarchy">
            <summary>
            Foreign keys for hierarchy inheritance will be built.
            <see cref="F:Xtensive.Orm.ForeignKeyMode.Hierarchy"/>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ForeignKeyMode.Reference">
            <summary>
            Foreign keys for <see cref="T:Xtensive.Orm.Entity"/> references will be built. 
            <seealso cref="T:Xtensive.Orm.EntitySet`1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ForeignKeyMode.All">
            <summary>
            All foreign keys (<see cref="F:Xtensive.Orm.ForeignKeyMode.Hierarchy"/> and <see cref="F:Xtensive.Orm.ForeignKeyMode.Reference"/>) will be built for storage.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.ForeignKeyMode.Default">
            <summary>
            Default foreign key mode. Equals to <see cref="F:Xtensive.Orm.ForeignKeyMode.All"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Providers.ChainingSessionHandler">
            <summary>
            The base class for <see cref="T:Xtensive.Orm.Providers.SessionHandler"/>s which support the chaining 
            with another handler.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Providers.ChainingSessionHandler.ChainedHandler">
            <summary>
            The chained handler.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.CompletingTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.ExecutePrefetchTasks(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.FetchEntityState(Xtensive.Orm.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.FetchField(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.FetchEntitySet(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Providers.ChainingSessionHandler.#ctor(Xtensive.Orm.Providers.SessionHandler)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="chainedHandler">The handler to be chained.</param>
        </member>
        <member name="P:Xtensive.Orm.Providers.ChainingSessionHandler.TransactionIsStarted">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Internals.PersistActionKind">
            <summary>
            Action to be executed during a persisting.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistActionKind.Insert">
            <summary>
            'Insert' action.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistActionKind.Update">
            <summary>
            'Update' action.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Internals.PersistActionKind.Remove">
            <summary>
            'Remove' action.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.Expressions.MarkerExpression.#ctor(System.Linq.Expressions.Expression,Xtensive.Orm.Linq.Expressions.MarkerType)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor">
            <summary>
            Apply parameter access visitor. 
            This type is used internally by DataObjects.Net.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor.#ctor(Xtensive.Orm.Rse.ApplyParameter,System.Func{System.Linq.Expressions.MethodCallExpression,System.Int32,System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.Expressions.SubQueryExpression.Mapping">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Materialization.ExpressionMaterializer.CreateEntity(Xtensive.Orm.Linq.Expressions.IEntityExpression,System.Linq.Expressions.Expression)">
            <exception cref="T:System.InvalidOperationException">Unable to materialize Entity.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Materialization.ExpressionMaterializer.VisitEntityFieldExpression(Xtensive.Orm.Linq.Expressions.EntityFieldExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.Materialization.MaterializationHelper.Materialize``1(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Linq.Materialization.MaterializationContext,Xtensive.Core.ParameterContext,System.Func{Xtensive.Tuples.Tuple,Xtensive.Orm.Linq.Materialization.ItemMaterializationContext,``0},System.Collections.Generic.Dictionary{Xtensive.Core.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple})">
            <summary>
            Materializes the specified data source.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="context">The context.</param>
            <param name="parameterContext">The parameter context.</param>
            <param name="itemMaterializer">The item materializer.</param>
            <param name="tupleParameterBindings">The tuple parameter bindings.</param>
        </member>
        <member name="T:Xtensive.Orm.Linq.TranslatedQuery`1">
            <summary>
            LINQ query translation result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Xtensive.Orm.Linq.TranslatedQuery">
            <summary>
            Abstract base class describing LINQ query translation result.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Linq.TranslatedQuery.DataSource">
            <summary>
            The <see cref="T:Xtensive.Orm.Rse.Providers.ExecutableProvider"/> acting as source for further materialization.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.TranslatedQuery.#ctor(Xtensive.Orm.Rse.Providers.ExecutableProvider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dataSource">The <see cref="F:Xtensive.Orm.Linq.TranslatedQuery.DataSource"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Linq.TranslatedQuery.UntypedMaterializer">
            <summary>
            Gets the untyped materializer.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Linq.TranslatedQuery`1.Materializer">
            <summary>
            Materializer.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.Execute(Xtensive.Orm.Session,Xtensive.Core.ParameterContext)">
            <summary>
            Executes the query in specified parameter context.
            </summary>
            <param name="session">The session.</param>
            <param name="parameterContext">The parameter context.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.ExecuteAsync(Xtensive.Orm.Session,Xtensive.Core.ParameterContext,System.Threading.CancellationToken)">
            <summary>
            Executes the query in specified parameter context asynchronously.
            </summary>
            <param name="session">The session.</param>
            <param name="parameterContext">The parameter context.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.#ctor(Xtensive.Orm.Rse.Providers.ExecutableProvider,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Session,System.Collections.Generic.Dictionary{Xtensive.Core.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},Xtensive.Core.ParameterContext,`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="materializer">The materializer.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.#ctor(Xtensive.Orm.Rse.Providers.ExecutableProvider,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Session,System.Collections.Generic.Dictionary{Xtensive.Core.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},Xtensive.Core.ParameterContext,`0},System.Collections.Generic.Dictionary{Xtensive.Core.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},System.Collections.Generic.IEnumerable{Xtensive.Core.Parameter{Xtensive.Tuples.Tuple}})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="materializer">The materializer.</param>
            <param name="tupleParameterBindings">The tuple parameter bindings.</param>
            <param name="tupleParameters">The tuple parameters.</param>
        </member>
        <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.TupleParameterBindings">
            <summary>
            Gets the tuple parameter bindings.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.TupleParameters">
            <summary>
            Gets the tuple parameters.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.UntypedMaterializer">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Linq.Queryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">The type of the content item of the data source.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Linq.Queryable`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.Queryable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.Queryable`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Linq.Queryable`1.#ctor(Xtensive.Orm.Linq.QueryProvider,System.Linq.Expressions.Expression)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="expression"/>  is out of range.</exception>
        </member>
        <member name="P:Xtensive.Orm.Linq.Queryable`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Linq.Queryable`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Linq.Queryable`1.System#Linq#IQueryable#Provider">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.QueryableExtensions">
            <summary>
            Extends LINQ methods for <see cref="N:Xtensive.Orm.Linq"/> queries. 
            </summary>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in <paramref name="source"/> sequence.
            </summary>
            <param name="source">The source sequence.</param>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Version of <see cref="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)"/>, where <paramref name="count"/> is specified as 
            <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">The count of items to take.</param>
            <returns>The same result as its original version.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Version of <see cref="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)"/>, where <paramref name="count"/> is specified as 
            <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">The count of items to skip.</param>
            <returns>The same result as its original version.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.ElementAt``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Version of <see cref="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)"/>, where <paramref name="index"/> is specified as
            <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="index">The index of element to take.</param>
            <returns>The same result as its original version.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Version of <see cref="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)"/>, where <paramref name="index"/> is specified as
            <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="index">The index of element to take.</param>
            <returns>The same result as its original version.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.Lock``1(System.Linq.IQueryable{``0},Xtensive.Orm.LockMode,Xtensive.Orm.LockBehavior)">
            <summary>
            Applies locks to the specified source queryable.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="lockMode">The lock mode.</param>
            <param name="lockBehavior">The lock behavior.</param>
            <returns>The same sequence, but with "apply lock" hint.</returns>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,``0[])">
            <summary>
            Checks if <paramref name="source"/> value is contained in the specified list of values.
            </summary>
            <typeparam name="T">Type of value to check.</typeparam>
            <param name="source">Source value.</param>
            <param name="values">List of values to check.</param>
            <returns><see langword="True"/> if <paramref name="source"/> contains in the list of values, otherwise returns <see langword="false"/>.</returns>
            <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains"/> method.</remarks>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if <paramref name="source"/> value is contained in the specified list of values.
            </summary>
            <typeparam name="T">Type of value to check.</typeparam>
            <param name="source">Source value.</param>
            <param name="values">List of values to check.</param>
            <returns><see langword="True"/> if <paramref name="source"/> contains in the list of values, otherwise returns <see langword="false"/>.</returns>
            <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains"/> method.</remarks>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,Xtensive.Orm.IncludeAlgorithm,``0[])">
            <summary>
            Checks if <paramref name="source"/> value is contained in the specified list of values.
            </summary>
            <typeparam name="T">Type of value to check.</typeparam>
            <param name="source">Source value.</param>
            <param name="algorithm">Translation algorithm.</param>
            <param name="values">List of values to check.</param>
            <returns><see langword="True"/> if <paramref name="source"/> contains in the list of values, otherwise returns <see langword="false"/>.</returns>
            <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains"/> method.</remarks>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,Xtensive.Orm.IncludeAlgorithm,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if <paramref name="source"/> value is contained in the specified list of values.
            </summary>
            <typeparam name="T">Type of value to check.</typeparam>
            <param name="source">Source value.</param>
            <param name="algorithm">Translation algorithm.</param>
            <param name="values">List of values to check.</param>
            <returns><see langword="True"/> if <paramref name="source"/> contains in the list of values, otherwise returns <see langword="false"/>.</returns>
            <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains"/> method.</remarks>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.LeftJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys. 
            </summary>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">One of provided arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">Queryable is not a <see cref="N:Xtensive.Orm.Linq"/> query.</exception>
        </member>
        <member name="M:Xtensive.Orm.QueryableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified entities using <see cref="M:Xtensive.Orm.Session.Remove``1(System.Collections.Generic.IEnumerable{``0})"/> method of <see cref="T:Xtensive.Orm.Session"/>. 
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entities">The entities.</param>
             <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny"/> on-remove action.
            </exception>
        </member>
        <member name="M:Xtensive.Orm.Linq.RemapScope.#ctor(Xtensive.Orm.Linq.RemapContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Orm.Linq.RemapScope.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.RemapScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Linq.RemapScope.Context">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Metadata.Extension">
            <summary>
            Persistent value of any kind indentified by its <see cref="P:Xtensive.Orm.Metadata.Extension.Name"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Metadata.Extension.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Metadata.Extension.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">A value for <see cref="P:Xtensive.Orm.Metadata.Extension.Name"/>.</param>
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Extension.Name">
            <summary>
            Gets or sets the name of the extension.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Extension.Text">
            <summary>
            Gets or sets the text data.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Metadata.Extension.Data">
            <summary>
            Gets or sets the binary data.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Query">
            <summary>
            Single access point allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key"/>s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Query.All``1">
            <summary>
            The "starting point" for any LINQ query -
            a <see cref="T:System.Linq.IQueryable`1"/> enumerating all the instances
            of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the sequence element.</typeparam>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> enumerating all the instances
            of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.All(System.Type)">
            <summary>
            The "starting point" for dynamic LINQ query -
            a <see cref="T:System.Linq.IQueryable"/> enumerating all the instances
            of type <paramref name="elementType"/>.
            </summary>
            <param name="elementType">Type of the sequence element.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> enumerating all the instances
            of type <paramref name="elementType"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.FreeText``1(System.String)">
            <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
            <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
            <param name="searchCriteria">The search criteria in free text form.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:Xtensive.Orm.FullTextMatch`1"/>
            allowing to continue building the query.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.FreeText``1(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
            <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
            <param name="searchCriteria">The search criteria in free text form.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:Xtensive.Orm.FullTextMatch`1"/>
            allowing to continue building the query.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Single(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Entity with the specified key is not found.</exception>
        </member>
        <member name="M:Xtensive.Orm.Query.SingleOrDefault(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Single``1(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Single``1(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="keyValues"/> identify.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.SingleOrDefault``1(Xtensive.Orm.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.SingleOrDefault``1(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="T:Xtensive.Orm.Session"/>.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Orm.Entity"/> specified <paramref name="keyValues"/> identify.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Execute``1(System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by specified <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes it, if found;
            otherwise executes the <paramref name="query"/> delegate
            and caches the compilation result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Execute``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes it, if found;
            otherwise executes the <paramref name="query"/> delegate
            and caches the compilation result.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Execute``1(System.Func{``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes it, if found;
            otherwise executes the <paramref name="query"/> delegate
            and caches the compilation result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Execute``1(System.Object,System.Func{``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes it, if found;
            otherwise executes the <paramref name="query"/> delegate
            and caches the compilation result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFutureScalar``1(System.Object,System.Func{``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query compilation result associated with the future scalar will be cached as well.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFutureScalar``1(System.Func{``0})">
            <summary>
            Creates future scalar query and registers it for the later execution.
            The query compilation result associated with the future scalar will be cached as well.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Func{System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Object,System.Func{System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
            <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
            <param name="key">An object identifying this query in cache.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>
            The future that will be executed when its result is requested.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Query.Store``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores the specified sequence of keys (<see cref="T:Xtensive.Orm.Entity">entities</see>),
            anonymous types or DTOs to the database and allows it to use as
            <see cref="T:System.Linq.IQueryable`1"/> further.
            </summary>
            <typeparam name="TElement">The type of the sequence element.</typeparam>
            <param name="source">The sequence to store.</param>
            <returns><see cref="T:System.Linq.IQueryable`1"/> providing access to the stored sequence.</returns>
        </member>
        <member name="T:Xtensive.Orm.ReferenceFinder">
            <summary>
            Provides a set of referential integrity related methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.FindReferencingObjects(Xtensive.Orm.Entity)">
            <summary>
            Finds the referencing objects.
            </summary>
            <param name="target">The target to find references to.</param>
            <returns>The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo"/> objects.</returns>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.FindReferencingObjects(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Finds the referencing objects.
            </summary>
            <param name="target">The target to find references to.</param>
            <param name="association">The association.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.IsReferenced(Xtensive.Orm.Entity)">
            <summary>
            Determines whether the specified <see cref="T:Xtensive.Orm.Entity"/> is referenced.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Orm.Entity"/> to check.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:Xtensive.Orm.Entity"/> is referenced; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesTo(Xtensive.Orm.Entity)">
            <summary>
            Finds all the entities that reference specified <paramref name="target"/> entity.
            </summary>
            <param name="target">The entity to find references to.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesTo(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Finds all the entities that reference <paramref name="target"/> entity 
            via specified <paramref name="association"/>.
            </summary>
            <param name="target">The entity to find references to.</param>
            <param name="association">The association to process.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo"/> objects.
            </returns>
            <exception cref="T:System.InvalidOperationException">Type doesn't participate in the specified association.</exception>
        </member>
        <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesFrom(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
            <summary>
            Gets all the references from the specified <paramref name="source"/> entity
            via specified <paramref name="association"/>.
            </summary>
            <param name="source">The source entity.</param>
            <param name="association">The association to process.</param>
            <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo"/> objects.
            </returns>
        </member>
        <member name="T:Xtensive.Orm.SessionEventArgs">
            <summary>
            Provides data for <see cref="E:Xtensive.Orm.Domain.SessionOpen"/> event.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.SessionEventArgs.#ctor(Xtensive.Orm.Session)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Xtensive.Orm.SessionEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.TransactionEventArgs">
            <summary>
            Provides data for <see cref="T:Xtensive.Orm.Session"/> transaction-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.TransactionEventArgs.#ctor(Xtensive.Orm.Transaction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:Xtensive.Orm.TransactionEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RecycledAttribute">
            <summary>
            An attribute describing the recycled type or property.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledAttribute.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RecycledAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="originalName">The original name of the type or property.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RecycledAttribute.OriginalName">
            <summary>
            Gets or sets the original name of the type or property.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.ChangeFieldTypeHint">
            <summary>
            Change field type enforced (ignore type conversion verification) hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Equals(Xtensive.Orm.Upgrade.ChangeFieldTypeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Type"/>.</param>
            <param name="fieldName">Value for <see cref="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.FieldName"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyAccessExpression">The field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Type">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.FieldName">
            <summary>
            Gets the target field name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.AffectedColumns">
            <summary>
            Gets affected column paths.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.CopyFieldHint">
            <summary>
            Copy field hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Equals(Xtensive.Orm.Upgrade.CopyFieldHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType"/>.</param>
            <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField"/> and <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.Type,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType"/>.</param>
            <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField"/> and <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourcePropertyAccessExpression">The source field access expression.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourceType">The source type.</param>
            <param name="sourceField">The source field.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="sourceType">The source type.</param>
            <param name="targetPropertyAccessExpression">The target field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField">
            <summary>
            Gets the source field.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField">
            <summary>
            Gets the target field.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.DomainModelConverter">
            <summary>
            Converts <see cref="T:Xtensive.Orm.Model.DomainModel"/> to indexing storage model.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.Run">
            <summary>
            Converts the specified <see cref="T:Xtensive.Orm.Model.DomainModel"/> to
            <see cref="F:Xtensive.Orm.Upgrade.DomainModelConverter.targetModel"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.Visit(Xtensive.Orm.Model.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitDomainModel(Xtensive.Orm.Model.DomainModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitColumnInfo(Xtensive.Orm.Model.ColumnInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitAssociationInfo(Xtensive.Orm.Model.AssociationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitKeyInfo(Xtensive.Orm.Model.KeyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitSequenceInfo(Xtensive.Orm.Model.SequenceInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Thrown always by this method.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitFullTextIndexInfo(Xtensive.Orm.Model.FullTextIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitPrimaryIndexInfo(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Visits primary index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitKeyField(Xtensive.Orm.Model.KeyField)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitFieldInfo(Xtensive.Orm.Model.FieldInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitHierarchyInfo(Xtensive.Orm.Model.HierarchyInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitTypeInfo(Xtensive.Orm.Model.TypeInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitIndexInfo(Xtensive.Orm.Model.IndexInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SchemaComparer">
            <summary>
            Compares storage models.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SchemaComparer.Compare(Xtensive.Orm.Upgrade.Model.StorageModel,Xtensive.Orm.Upgrade.Model.StorageModel,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Collections.SetSlim{Xtensive.Orm.Upgrade.UpgradeHint},Xtensive.Orm.Upgrade.SchemaUpgradeMode,Xtensive.Orm.Model.DomainModel,System.Boolean)">
            <summary>
            Compares <paramref name="sourceSchema"/> and <paramref name="targetSchema"/>.
            </summary>
            <param name="sourceSchema">The source schema.</param>
            <param name="targetSchema">The target schema.</param>
            <param name="schemaHints">The upgrade hints.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SchemaComparisonResult">
            <summary>
            The result of schema comparison.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SchemaComparisonResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SchemaComparisonResult.#ctor(Xtensive.Orm.Upgrade.SchemaComparisonStatus,System.Boolean,System.Nullable{System.Boolean},Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Actions.ActionSequence,System.Collections.Generic.IList{Xtensive.Modelling.Actions.NodeAction})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="schemaComparisonStatus">The comparison status.</param>
            <param name="hasColumnTypeChanges">Indicates whether there are column type changes.</param>
            <param name="isCompatibleInLegacyMode">Indicates whether schemes are compatible in legacy mode.</param>
            <param name="hints">The upgrade hints.</param>
            <param name="difference">The difference.</param>
            <param name="upgradeActions">The upgrade actions.</param>
            <param name="unsafeActions">The unsafe (breaking) actions.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.SchemaComparisonStatus">
            <summary>
            Gets the comparison status.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.HasUnsafeActions">
            <summary>
            Gets or sets a value indicating whether there are unsafe actions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.HasColumnTypeChanges">
            <summary>
            Gets or sets a value indicating whether there are column type changes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.IsCompatibleInLegacyMode">
            <summary>
            Indicates whether storage schema is compatible with domain model.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.UnsafeActions">
            <summary>
            Gets the list of unsafe actions.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.Hints">
            <summary>
            Gets the upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.Difference">
            <summary>
            Gets the schema difference.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SchemaComparisonResult.UpgradeActions">
            <summary>
            Gets all upgrade actions.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SchemaComparisonStatus">
            <summary>
            Schema comparison status.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaComparisonStatus.Equal">
            <summary>
            Target schema is equal to the extracted schema.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaComparisonStatus.TargetIsSuperset">
            <summary>
            Target schema contains additional elements.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaComparisonStatus.TargetIsSubset">
            <summary>
            Target schema doesn't contain some elements of the extracted schema.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaComparisonStatus.NotEqual">
            <summary>
            Both new and removed elements are found.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SystemUpgradeHandler">
            <summary>
            <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler"/> implementation 
            for <see cref="N:Xtensive.Orm"/> assembly.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeHandler">
            <summary>
            Default <see cref="T:Xtensive.Orm.Upgrade.IUpgradeHandler"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.IUpgradeHandler">
            <summary>
            A handler responsible for upgrading a specific assembly or its part.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnConfigureUpgradeDomain">
            <summary>
            Override this method to perform actions before upgrade domain is created.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnPrepare">
            <summary>
            Override this method to perform actions before any operation on database
            is performed.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnBeforeStage">
            <summary>
            Override this method to perform actions before schemas are compared
            and synchronized. Note that database schema and metadata are already extracted here.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnSchemaReady">
            <summary>
            Override this method to handle "at schema ready" event. 
            The both extracted schema and target schema are ready at this moment.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnBeforeExecuteActions(Xtensive.Orm.Upgrade.UpgradeActionSequence)">
            <summary>
            Override this method to make correction to upgrade action sequence.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnStage">
            <summary>
            Override this method to handle "at upgrade stage" event.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnComplete(Xtensive.Orm.Domain)">
            <summary>
            Override this method to perform any actions after all database
            operations are completed.
            </summary>
            <param name="domain">Domain that would be returned by <see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)"/> method.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.CanUpgradeFrom(System.String)">
            <summary>
            Determines whether this handler can upgrade the assembly
            from the specified version of it.
            </summary>
            <param name="oldVersion">The old assembly version.</param>
            <returns>
            <see langword="true"/> if this instance can upgrade 
            from the specified version of an old assembly; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Orm.Upgrade.UpgradeStage)">
            <summary>
            Determines whether specified persistent type should be included into the model
            in the specified <paramref name="upgradeStage"/>, or not.
            </summary>
            <param name="type">The type to filter.</param>
            <param name="upgradeStage">The upgrade stage to check the availability at.</param>
            <returns>
            <see langword="true"/> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Orm.Upgrade.UpgradeStage)">
            <summary>
            Determines whether specified persistent field (property) should be included into the model
            in the specified <paramref name="upgradeStage"/>, or not.
            </summary>
            <param name="field">The field to filter.</param>
            <param name="upgradeStage">The upgrade stage to check the availability at.</param>
            <returns>
              <see langword="true"/> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.IsEnabled">
            <summary>
            Gets a value indicating whether this handler is enabled.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.Assembly">
            <summary>
            Gets the assembly this handler is made for.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.AssemblyName">
            <summary>
            Gets the name of the assembly described by this handler.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.AssemblyVersion">
            <summary>
            Gets the version of the assembly described by this handler.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.UpgradeContext">
            <summary>
            Gets the upgrade context this handler is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.TypesMovementsAutoDetection">
            <summary>
            Determines whether handler is enabled autodetect of types, which moved from one namespace to another.
            <para>
            Detection is enabled by default.
            </para>
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.UpgradeHandler.RecycledSuffix">
            <summary>
            The ".Recycled" suffix.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnConfigureUpgradeDomain">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnPrepare">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnBeforeStage">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>context.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnSchemaReady">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnStage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnComplete(Xtensive.Orm.Domain)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnBeforeExecuteActions(Xtensive.Orm.Upgrade.UpgradeActionSequence)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.CanUpgradeFrom(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Orm.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>UpgradeContext.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Orm.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>UpgradeContext.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnUpgrade">
            <summary>
            Override this method to implement custom persistent data migration logic.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.AddUpgradeHints(Xtensive.Collections.ISet{Xtensive.Orm.Upgrade.UpgradeHint})">
            <summary>
            Override this method to add upgrade hints to
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints"/> collection.
            </summary>
            <param name="hints">A set of hints to add new hints to
            (a shortcut to <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints"/> collection).</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssembly">
            <summary>
            Detects the assembly this handler is made for.
            </summary>
            <returns>The assembly.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssemblyName">
            <summary>
            Detects the name of the assembly this handler is made for.
            </summary>
            <returns>The name of the assembly.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssemblyVersion">
            <summary>
            Detects the version of the assembly this handler is made for.
            </summary>
            <returns>The version of the assembly.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.AddAutoHints(Xtensive.Collections.ISet{Xtensive.Orm.Upgrade.UpgradeHint})">
            <summary>
            Adds the "auto" hints - e.g. hints for recycled types.
            </summary>
            <param name="hints">A set of hints to add new hints to
            (a shortcut to <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints"/> collection).</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.AddRecycledDefinitions(System.Collections.Generic.ICollection{Xtensive.Orm.RecycledDefinition})">
            <summary>
            Override this method to add recycled definitions.
            </summary>
            <param name="recycledDefinitions">Collection to put recycled definitions to.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.GetOriginalName(System.Type)">
            <summary>
            Gets the original name of the recycled type.
            </summary>
            <param name="recycledType">The recycled type to get the original name for.</param>
            <returns>The original name of the recycled type.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.TryStripRecycledSuffix(System.String)">
            <summary>
            Tries to strip the ".Recycled" suffix from the namespace.
            </summary>
            <param name="nameSpace">The namespace to remove the suffix from.</param>
            <returns>
            The namespace without ".Recycled" suffix, if it was there;
            otherwise the same value.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.AssemblyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.AssemblyVersion">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.UpgradeContext">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.TypesMovementsAutoDetection">
            <summary>
            Determines whether handler is enabled autodetect of types, which moved from one namespace to another.
            <para>
            Detection is enabled by default.
            </para>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.SystemUpgradeHandler.OnStage">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.SystemUpgradeHandler.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.TypeConversionVerifier">
            <summary>
            Verifies whether the conversion between types is allowed or not.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.TypeConversionVerifier.CanConvert(Xtensive.Orm.Upgrade.Model.StorageTypeInfo,Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <summary>
            Verifies whether the source type can be converted to the target type. 
            Loss of data is allowed.
            </summary>
            <param name="from">The source type.</param>
            <param name="to">The target type.</param>
            <returns>
            <see langword="true"/> if the source type can be converted to the 
            target type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.TypeConversionVerifier.CanConvertSafely(Xtensive.Orm.Upgrade.Model.StorageTypeInfo,Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <summary>
            Verifies whether the source type can be converted to the target 
            type without loss of data.
            </summary>
            <param name="from">The source type.</param>
            <param name="to">The target type.</param>
            <returns>
            <see langword="true"/> if the source type can be converted to the 
            target type without loss of data; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.AssemblyInfoAttribute">
            <summary>
            An attribute providing persistence-related information for the assembly.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The name of the assembly.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="version">The version of the assembly.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.Name">
            <summary>
            Gets or sets the name of the assembly to use in <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.Version">
            <summary>
            Gets or sets the version of the assembly to use in <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.UpgradeStage">
            <summary>
            Upgrade stages enumeration.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Initializing">
            <summary>
            This stage no longer occurs. It's kept for compatibility with previous versions.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Upgrading">
            <summary>
            The second upgrade stage.
            All the types are visible, including upgrade-only types;
            schema is upgraded; 
            <see cref="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnStage"/> events are raised at the beginning of this stage;
            <see cref="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnUpgrade"/> events are raised at the end of this stage.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Final">
            <summary>
            The final upgrade stage.
            Only runtime types are visible; upgrade-only types are invisible;
            schema is upgraded once more (upgrade-only types are removed); 
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.UpgradingDomainBuilder.PerformUpgrade(Xtensive.Orm.Domain,Xtensive.Orm.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>context.Stage</c> is out of range.</exception>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.SchemaUpgradeMode">
            <summary>
            Schema upgrade modes.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.ValidateExact">
            <summary>
            Validate schema to be equal to the domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.ValidateCompatible">
            <summary>
            Validate schema to be compatible (equal or greater) with the domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.ValidateLegacy">
            <summary>
            Validate schema to be compatible with the domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.Perform">
            <summary>
            Upgrade schema to domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.PerformSafely">
            <summary>
            Upgrade schema to domain model safely - 
            i.e. without any operations leading to data lost.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.Recreate">
            <summary>
            Completely recreate the schema.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.SchemaUpgradeMode.Skip">
            <summary>
            Skip schema upgrade.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Internals.QueryCachingScope.ParameterizedQuery">
            <exception cref="T:System.NotSupportedException">Second attempt to set this property.</exception>
        </member>
        <member name="T:Xtensive.Orm.Configuration.SessionCacheType">
            <summary>
            Enumerates possible types of session caches.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionCacheType.Default">
            <summary>
            Default cache type.
            Value is <see cref="F:Xtensive.Orm.Configuration.SessionCacheType.LruWeak"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionCacheType.LruWeak">
            <summary>
            <see cref="T:Xtensive.Caching.LruCache`2"/> with chained <see cref="T:Xtensive.Caching.WeakCache`2"/>.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Configuration.SessionCacheType.Infinite">
            <summary>
            <see cref="T:Xtensive.Caching.InfiniteCache`2"/>.
            Value is <see langword="0x1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Serialization.DeserializationContext">
            <summary>
            Deserialization context.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.DeserializationContext"/>, 
            or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Serialization.DeserializationContext.Current"/> <see cref="T:Xtensive.Orm.Serialization.DeserializationContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationContext.InitializeEntity(Xtensive.Orm.Entity)">
            <summary>
            Initializes the <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Orm.Entity"/> to initialize.</param>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationContext.InitializeEntity(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the entity, i.e. deserializes or generates its <see cref="T:Xtensive.Orm.Key"/> and creates its <see cref="T:Xtensive.Orm.EntityState"/>.
            </summary>    
            <param name="entity">The entity to initialize.</param>
            <param name="serializationInfo">The information to populate the <see cref="P:Xtensive.Orm.Entity.Key"/>.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <remarks>
            Target <see cref="T:Xtensive.Orm.Entity"/> is not initialized on this step, therefore it is unable to get or set its field values.
            </remarks>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationContext.DeserializeEntities(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the <see cref="T:Xtensive.Orm.Entity"/>'s field values.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Orm.Entity"/> to deserialize.</param>
            <param name="serializationInfo">The information to populate the <see cref="T:Xtensive.Orm.Entity"/>'s field values.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <remarks>
            <see cref="P:Xtensive.Orm.Entity.Key"/> is already deserialized and all another <see cref="T:Xtensive.Orm.Entity">Entities</see> is already initialized on this step.
            </remarks>
        </member>
        <member name="P:Xtensive.Orm.Serialization.DeserializationContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.DeserializationContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Serialization.DeserializationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Serialization.DeserializationScope">
            <summary>
            Deserialization scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Serialization.DeserializationScope.#ctor(Xtensive.Orm.Serialization.DeserializationContext)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.Serialization.DeserializationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Serialization.EntityReference">
            <summary>
            Object to be serialized instead of <see cref="T:Xtensive.Orm.Entity"/> when serialization <see cref="F:Xtensive.Orm.Serialization.SerializationKind.ByReference"/> is used.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Serialization.SerializationContext">
            <summary>
            Serialization context.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.SerializationContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Orm.Serialization.SerializationContext.Current"/> <see cref="T:Xtensive.Orm.Serialization.SerializationContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetEntityValueData(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the entity value data, i.e. data which will be deserialized as a new <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Orm.Entity"/> to serialize.</param>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetEntityReferenceData(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the entity reference data, i.e. data which will be deserialized as a reference to existing <see cref="T:Xtensive.Orm.Entity"/>
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Orm.Entity"/> to serialize.</param>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetSerializationKind(Xtensive.Orm.Entity)">
            <summary>
            Gets the kind of serialization for the specified <see cref="T:Xtensive.Orm.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Orm.Entity"/> to be serialized.</param>
            <returns>Serialization kind.</returns>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.#ctor(Xtensive.Orm.Serialization.SerializationKind)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="serializationKind">Default <see cref="T:Xtensive.Orm.Serialization.SerializationKind"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationContext.#ctor(System.Func{Xtensive.Orm.Entity,Xtensive.Orm.Serialization.SerializationKind})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="serializationKindGetter">The <see cref="T:Xtensive.Orm.Serialization.SerializationKind"/> getter.</param>
        </member>
        <member name="P:Xtensive.Orm.Serialization.SerializationContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.SerializationContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Serialization.SerializationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Serialization.SerializationKind">
            <summary>
            Serialization kind (serialization by reference or by value).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Serialization.SerializationKind.ByReference">
            <summary>
            Serialization by reference.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Serialization.SerializationKind.ByValue">
            <summary>
            Serialization by value 
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Serialization.SerializationScope">
            <summary>
            Serialization scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Serialization.SerializationScope.#ctor(Xtensive.Orm.Serialization.SerializationContext)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Orm.Serialization.SerializationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RenameFieldHint">
            <summary>
            Rename field hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Equals(Xtensive.Orm.Upgrade.RenameFieldHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetType">The current type.</param>
            <param name="oldFieldName">Old name of the field.</param>
            <param name="newFieldName">New name of the field.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="oldFieldName">Old name of the field.</param>
            <param name="newFieldAccessExpression">The new field access expression.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.OldFieldName">
            <summary>
            Gets the old field name.
            </summary>    
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.NewFieldName">
            <summary>
            Gets new field name.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.RenameTypeHint">
            <summary>
            Rename type hint.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Equals(Xtensive.Orm.Upgrade.RenameTypeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="oldType">The old type.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Create``1(System.String)">
            <summary>
            Creates the instance of this hint.
            </summary>
            <typeparam name="T">The new type.</typeparam>
            <param name="oldName">The old type name.</param>
            <returns>The newly created instance of this hint.</returns>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RenameTypeHint.NewType">
            <summary>
            Gets the new type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.RenameTypeHint.OldType">
            <summary>
            Gets the name of old type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.VersionInfo">
            <summary>
            Contains information about entity version.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.Combine(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
            <summary>
            Combines this version with the specified key value tuple and specified version tuple.
            </summary>
            <param name="key">The key to combine.</param>
            <param name="versionInfo">The version info to combine.</param>
            <returns>Combined version info.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.ConflictsWith(Xtensive.Orm.VersionInfo)">
            <summary>
            Checks whether this <see cref="T:Xtensive.Orm.VersionInfo"/>
            conflicts with <paramref name="other"/> <see cref="T:Xtensive.Orm.VersionInfo"/>.
            There is no conflict, if all mutually available fields in
            <see cref="P:Xtensive.Orm.VersionInfo.Value"/>s are equal, and count of fields is the same.
            </summary>
            <param name="other">The other <see cref="T:Xtensive.Orm.VersionInfo"/>.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.Equals(Xtensive.Orm.VersionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.op_Equality(Xtensive.Orm.VersionInfo,Xtensive.Orm.VersionInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.op_Inequality(Xtensive.Orm.VersionInfo,Xtensive.Orm.VersionInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.VersionInfo.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="version">The version tuple.</param>
        </member>
        <member name="P:Xtensive.Orm.VersionInfo.Void">
            <summary>
            Gets the void <see cref="T:Xtensive.Orm.VersionInfo"/> object.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.VersionInfo.IsVoid">
            <summary>
            Gets a value indicating whether this instance is not contains version.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.DefaultNodeId">
            <summary>
            Default node identifier (empty string).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.DefaultConfigurationSection">
            <summary>
            Name of the default configuration section (Xtensive.Orm).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.KeyFieldName">
            <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.Key"/> field.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.TypeIdFieldName">
            <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.TypeId"/> field.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.PersistenceStatePropertyName">
            <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.PersistenceState"/> property.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.MasterFieldName">
            <summary>
            Name of the field that describes master in <see cref="F:Xtensive.Orm.Model.Multiplicity.ManyToMany"/>
            or <see cref="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany"/> association.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SlaveFieldName">
            <summary>
            Name of the field that describes slave in <see cref="F:Xtensive.Orm.Model.Multiplicity.ManyToMany"/>
            or <see cref="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany"/> association.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.DomainModelExtensionName">
            <summary>
            Name of the <see cref="T:Xtensive.Orm.Metadata.Extension"/> that describes domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.PartialIndexDefinitionsExtensionName">
            <summary>
            Name of the <see cref="T:Xtensive.Orm.Metadata.Extension"/> that describes partial indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.GeneratorColumnName">
            <summary>
            Name of column in key generator table.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.GeneratorFakeColumnName">
            <summary>
            Name of fake column in key generator table.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.MaxKeyFieldNumber">
            <summary>
            Max number of key fields.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.MaxGenericKeyLength">
            <summary>
            Maximal supported length (count of values) of purely generic keys.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.MaxNumberOfConditions">
            <summary>
            Maximal number of filtering values in an <see cref="T:Xtensive.Orm.Rse.Providers.IncludeProvider"/> 
            which are to be placed inside a resulted SQL command (as boolean predicate).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.EntitySetCacheSize">
            <summary>
            Maximum number of cached keys in <see cref="T:Xtensive.Orm.Internals.EntitySetState"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.EntitySetPreloadCount">
            <summary>
            Number of items that are preloaded on first <see cref="T:Xtensive.Orm.EntitySet`1"/> access.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SupportedIntegerTypes">
            <summary>
            Gets a read-only hash set containing all supported integer types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SupportedNumericTypes">
            <summary>
            Gets a read-only hash set containing all supported numeric types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SupportedPrimitiveTypes">
            <summary>
            Gets a read-only hash set containing all supported primitive types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SupportedNullableTypes">
            <summary>
            Gets a read-only hash set containing all supported nullable types.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.SupportedPrimitiveAndNullableTypes">
            <summary>
            Gets a read-only hash set containing all supported primitive and nullable types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.WellKnown.Provider">
            <summary>
            Well-known storage protocol names.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.SqlServer">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.SqlServerCe">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.PostgreSql">
            <summary>
            PostgreSQL.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.MySql">
            <summary>
            MySQL.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.Firebird">
            <summary>
            Firebird.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.Sqlite">
            <summary>
            SQLite.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Provider.All">
            <summary>
            All supported protocols (for exception messages, etc).
            </summary>
        </member>
        <member name="T:Xtensive.Orm.WellKnown.Sessions">
            <summary>
            Well-known session configuration names.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Sessions.Default">
            <summary>
            Name of default session configuration.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Sessions.System">
            <summary>
            System session name.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Sessions.Service">
            <summary>
            Service session name.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.WellKnown.Sessions.KeyGenerator">
            <summary>
            Generator session name.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.AttributeHelper">
            <summary>
            <see cref="T:System.Attribute"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            This method does not inherit the attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <returns>An attribute of specified type, or <see langword="null"/>, if none.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            This method does not inherit the attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <returns>An array of attributes of specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            </summary>
            <typeparam name="TAttribute">The type of attributes to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <param name="options">Attribute search options.</param>
            <returns>An array of attributes of specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)">
            <summary>
            A version of <see cref="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)"/> 
            returning just one attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attribute of.</param>
            <param name="options">Attribute search options.</param>
            <returns>An attribute of specified type;
            <see langword="null"/>, if there is no such attribute;
            throws <see cref="T:System.InvalidOperationException"/>, if there is more then one attribute of specified type found.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is more then one attribute of specified type found.</exception>
        </member>
        <member name="T:Xtensive.Reflection.AttributeSearchOptions">
            <summary>
            Search options for <see cref="T:Xtensive.Reflection.AttributeHelper"/> methods.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.Default">
            <summary>
            Default options.
            The same as <see cref="F:Xtensive.Reflection.AttributeSearchOptions.InheritNone"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritNone">
            <summary>
            Nothing should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromBase">
            <summary>
            If no attributes are found on the specified member,
            attributes from its base should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromAllBase">
            <summary>
            Attributes from all the bases should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromPropertyOrEvent">
            <summary>
            If no attributes are found on the specified method,
            attributes from the property or event it belongs to should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritAll">
            <summary>
            All inheritance options.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.DelegateHelper">
            <summary>
            Delegate helper \ extension methods. 
            Simplifies various delegate creation.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedPrivateFieldGetterPrefix">
            <summary>
            Aspected private field getter prefix.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedPrivateFieldSetterPrefix">
            <summary>
            Aspected private field setter prefix.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName">
            <summary>
            Aspected factory method name.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateGetMemberDelegate``2(System.String)">
            <summary>
            Creates get member delegate.
            </summary>
            <typeparam name="TObject">Declaring type.</typeparam>
            <typeparam name="TValue">Member type.</typeparam>
            <param name="memberName">Member name.</param>
            <returns><see cref="T:System.Func`2"/> delegate 
            that gets member value.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateSetMemberDelegate``2(System.String)">
            <summary>
            Creates property \ member setter delegate.
            </summary>
            <typeparam name="TObject">Declaring type.</typeparam>
            <typeparam name="TValue">Member type.</typeparam>
            <param name="memberName">Member name.</param>
            <returns><see cref="T:System.Action`2"/> delegate 
            that sets member value.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreatePrimitiveCastDelegate``2">
            <summary>
            Creates primitive type cast delegate - e.g. <see cref="T:System.Enum"/> to <see cref="T:System.SByte"/>.
            </summary>
            <typeparam name="TSource">The type to cast.</typeparam>
            <typeparam name="TTarget">Target type.</typeparam>
            <returns>A delegate allowing to cast <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.</returns>
            <exception cref="T:System.InvalidCastException"><c>InvalidCastException</c>.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateDelegate``1(System.Object,System.Type,System.String,System.Type[])">
            <summary>
            Creates (generic) method invocation delegate with specified generic argument types.
            </summary>
            <param name="callTarget">The delegate call target. <see langword="Null"/>, if static method should be called.</param>
            <param name="type">Type, which method should be called by delegate.</param>
            <param name="methodName">The name of the method to call by delegate.</param>
            <param name="genericArgumentTypes">Generic method arguments.</param>
            <returns>New delegate allowing to call specified generic method on <paramref name="callTarget"/>.</returns>
            <typeparam name="TDelegate">Type of delegate to create.</typeparam>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateDelegates``1(System.Object,System.Type,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an array of generic method invocation delegates matching the method instance 
            with specified generic argument variants.
            </summary>
            <param name="callTarget">The delegate call target. <see langword="Null"/>, if static method should be called.</param>
            <param name="type">Type, which method should be called by delegate.</param>
            <param name="methodName">The name of the method to call by delegate.</param>
            <param name="genericArgumentVariants">Generic method argument variants.</param>
            <returns>An array of delegate allowing to call specified generic method instances on <paramref name="callTarget"/>.</returns>
            <typeparam name="TDelegate">Type of delegate to create.</typeparam>
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.ExecuteDelegates``1(Xtensive.Reflection.ExecutionSequenceHandler{``0}[],``0@,Xtensive.Core.Direction)">
            <summary>
            Executes sequence of <see cref="T:Xtensive.Reflection.ExecutionSequenceHandler`1"/>s.
            Stops when the executed delegate returns <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of argument to pass to each delegate.</typeparam>
            <param name="delegates">Delegates to execute.</param>
            <param name="argument">Argument to pass to each delegate.</param>
            <param name="direction">Direction of execution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid <paramref name="direction"/> value.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.MakeDelegateType(System.Type,System.Type[])">
            <summary>
            Creates a delegate type that represents a delegate that calls a method with specified signature.
            </summary>
            <param name="returnType">Type of return value.</param>
            <param name="parameterTypes">Types of parameters.</param>
            <returns>Created delegate type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.MakeDelegateType(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a delegate type that represents a delegate that calls a method with specified signature.
            </summary>
            <param name="returnType">Type of return value.</param>
            <param name="parameterTypes">Types of parameters.</param>
            <returns>Created delegate type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.GetDelegateSignature(System.Type)">
            <summary>
            Gets signature of a delegate of a <paramref name="delegateType"/>.
            </summary>
            <param name="delegateType">Type of the delegate.</param>
            <returns>A pair that contains return type as first element and parameter types as second arguments.</returns>
        </member>
        <member name="T:Xtensive.Reflection.ExecutionSequenceHandler`1">
            <summary>
            Execution sequence handler - a delegate that can be passed to 
            <see cref="M:Xtensive.Reflection.DelegateHelper.ExecuteDelegates``1(Xtensive.Reflection.ExecutionSequenceHandler{``0}[],``0@,Xtensive.Core.Direction)"/> method.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="argument">Argument value.</param>
            <param name="index">Index of executed delegate in sequence.</param>
            <returns><see langword="True"/>, if execution of sequence should be stopped;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Xtensive.Reflection.InterfaceMapping">
            <summary>
            Faster <see cref="T:System.Reflection.InterfaceMapping"/> analogue.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.InterfaceMapping.#ctor(System.Reflection.InterfaceMapping)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source mapping.</param>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.TargetType">
            <summary>
            Gets the target type of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.InterfaceType">
            <summary>
            Gets the interface type of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.TargetMethods">
            <summary>
            Gets the type members of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.InterfaceMethods">
            <summary>
            Gets the interface members of this mapping.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.MemberHelper">
            <summary>
            <see cref="T:System.Reflection.MemberInfo"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetBindingFlags(System.Reflection.MemberInfo)">
            <summary>
            Gets the binding flags for the specified member.
            </summary>
            <param name="member">The member to get binding flags for.</param>
            <returns>Binding flags for the specified member.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetBaseMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the base member for the specified <paramref name="member"/>.
            </summary>
            <param name="member">The member to get base member for.</param>
            <returns>Base member;
            <see langword="null" />, if it does not exist.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.IsExplicitImplementation(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified <paramref name="member"/>
            is explicit implementation of some interface member.
            </summary>
            <param name="member">The member to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetImplementation(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the interface member implementation in its implementor.
            </summary>
            <param name="member">The member to get the implementation member for.</param>
            <returns>Implementation member;
            <see langword="null" />, if no implementation member maps to the specified one.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetInterfaceMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the interface member for its explicit or implicit implementor.
            </summary>
            <param name="member">The member to get the interface member for.</param>
            <returns>Interface member;
            <see langword="null" />, if no interface member maps to the specified one,
            or the member itself is declared in interface.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetFullName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Builds correct full generic type and member name.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> object which name is built.</param>
            <param name="includeTypeName">Indicates whether type name must be included or not.</param>
            <returns>Full member name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetShortName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Builds correct short generic type and member name.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> object which name is built.</param>
            <param name="includeTypeName">Indicates whether type name must be included or not.</param>
            <returns>Short member name.</returns>
        </member>
        <member name="T:Xtensive.Reflection.MethodHelper">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.String[],System.Object[])">
            <summary>
            Gets generic method by names \ types of its arguments.
            </summary>
            <param name="type">Type to search the method in.</param>
            <param name="name">Method name.</param>
            <param name="bindingFlags">Binding attributes.</param>
            <param name="genericArgumentNames">Generic arguments of the method.</param>
            <param name="parameterTypes">Either strings or <see cref="T:System.Type"/>s of parameters (mixing is allowed).</param>
            <returns>Found method, if match was found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Gets constructor by names \ types of its parameters.
            </summary>
            <param name="type">Type to search constructor in.</param>
            <param name="bindingFlags">Binding attributes.</param>
            <param name="parameterTypes">Either strings or <see cref="T:System.Type"/>s of parameters (mixing is allowed).</param>
            <returns>Found constructor, if match was found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Gets the types of method parameters.
            </summary>
            <param name="method">The method to get the types of parameters of.</param>
            <returns>The array of types of method parameters.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsPropertyAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property accessor.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is property accessor; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsGetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property getter.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is getter; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property setter.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is setter; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetProperty(System.Reflection.MethodInfo)">
            <summary>
            Gets the property to which <paramref name="method"/> belongs.
            </summary>
            <param name="method">The method to get the property for.</param>
            <returns>Found property;
            <see langword="null" />, if no property is associated with the method.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsEventAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is an event accessor.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is event accessor; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsAddEventHandler(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is "add event handler" method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is "add event handler" method; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsRemoveEventHandler(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is "remove event handler" method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is "remove event handler" method; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetEvent(System.Reflection.MethodInfo)">
            <summary>
            Gets the event to which <paramref name="method"/> belongs.
            </summary>
            <param name="method">The method to get the event for.</param>
            <returns>Found event;
            <see langword="null" />, if no event is associated with the method.</returns>
        </member>
        <member name="T:Xtensive.Reflection.MethodHelper.AnyArrayPlaceholder">
            <summary>
            This class is used internally by <see cref="T:Xtensive.Reflection.MethodHelper"/> to denote
            an array of any type when matching parameter types
            in <see cref="M:Xtensive.Reflection.MethodHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.String[],System.Object[])"/> and <see cref="M:Xtensive.Reflection.MethodHelper.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.SequenceHelper">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> helper methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.SequenceHelper.GetSequenceType(System.Type)">
            <summary>
            Gets the generic type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> where <paramref name="elementType"/> is generic argument.
            </summary>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:Xtensive.Reflection.SequenceHelper.GetElementType(System.Type)">
            <summary>
            Gets element type of the sequence.
            </summary>
            <param name="sequenceType">Type of the sequence.</param>
        </member>
        <member name="T:Xtensive.Reflection.TypeHelper">
            <summary>
            <see cref="T:System.Type"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[])">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[],System.Collections.Generic.IEnumerable{Xtensive.Core.Pair{System.Reflection.Assembly,System.String}})">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="highPriorityLocations">High-priority search locations (assembly + namespace pairs).</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[],System.Collections.Generic.IEnumerable{Xtensive.Core.Pair{System.Reflection.Assembly,System.String}},System.Boolean)">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="highPriorityLocations">High-priority search locations (assembly + namespace pairs).</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
            <param name="exactTypeMatch">If <see langword="false"/> tries to create associates for base class, interfaces, arrays and <see cref="T:System.Nullable`1"/>(if struct) too.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="forType"/> is generic type definition.</exception>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateDummyType(System.String,System.Type,System.Boolean)">
            <summary>
            Creates new dummy type. Such types can be used
            as generic arguments (to instantiate unique generic
            instances).
            </summary>
            <param name="namePrefix">Prefix to include into type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <param name="implementProtectedConstructorAccessor">If <see langword="true"/>, static method with name <see cref="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName"/> will be created for each constructor.</param>
            <returns><see cref="T:System.Type"/> object of newly created type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateInheritedDummyType(System.String,System.Type,System.Boolean)">
            <summary>
            Creates new dummy type inherited from another type.
            </summary>
            <param name="typeName">Type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <param name="implementProtectedConstructorAccessor">If <see langword="true"/>, static method with name <see cref="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName"/> will be created for each constructor.</param>
            <returns>New type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.AddSuffix(System.String,System.String)">
            <summary>
            Adds suffix to specified generic type name.
            </summary>
            <param name="typeName">Type name to add suffix for.</param>
            <param name="suffix">Suffix to add.</param>
            <returns>Specified generic type name with its suffix.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.Activate(System.Reflection.Assembly,System.String,System.Type[],System.Object[])">
            <summary>
            Instantiates specified generic type; returns <see langword="null"/>, if either no such a type,
            or an error has occurred.
            </summary>
            <param name="assembly">Assembly where the type is located.</param>
            <param name="typeName">Name of the type to instantiate.</param>
            <param name="genericArguments">Generic arguments for the type to instantiate 
            (<see langword="null"/> means type isn't a generic type definition).</param>
            <param name="arguments">Arguments to pass to the type constructor.</param>
            <returns>An instance of specified type; <see langword="null"/>, if either no such a type,
            or an error has occurred.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.Activate(System.Type,System.Type[],System.Object[])">
            <summary>
            Instantiates specified generic type; returns <see langword="null"/>, if either no such a type,
            or an error has occurred.
            </summary>
            <param name="type">Generic type definition to instantiate.</param>
            <param name="genericArguments">Generic arguments for the type to instantiate 
            (<see langword="null"/> means <paramref name="type"/> isn't a generic type definition).</param>
            <param name="arguments">Arguments to pass to the type constructor.</param>
            <returns>An instance of specified type; <see langword="null"/>, if either no such a type,
            or an error has occurred.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetConstructor(System.Type,System.Object[])">
            <summary>
            Gets the public constructor of type <paramref name="type"/> 
            accepting specified <paramref name="arguments"/>.
            </summary>
            <param name="type">The type to get the constructor for.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Appropriate constructor, if a single match is found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.OrderByInheritance(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Orders the specified <paramref name="types"/> by their inheritance
            (very base go first).
            </summary>
            <param name="types">The types to sort.</param>
            <returns>The list of <paramref name="types"/> ordered by their inheritance.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInterfaceMapFast(System.Type,System.Type)">
            <summary>
            Fast analogue of <see cref="M:System.Type.GetInterfaceMap(System.Type)"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="targetInterface">The target interface.</param>
            <returns>Interface map for the specified interface.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces of the specified type.
            Interfaces will be ordered from the very base ones to ancestors.
            </summary>
            <param name="type">The type to get the interfaces of.</param>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetCompatibles(System.Type)">
            <summary>
            Gets the sequence of type itself, all its base types and interfaces.
            Types will be ordered from the very base ones to ancestors with the specified type in the end of sequence.
            </summary>
            <param name="type">The type to get compatible types for.</param>
            <returns>The interfaces of the specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetFullName(System.Type)">
            <summary>
            Builds correct full generic type name.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> which name is built.</param>
            <returns>Full type name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetShortName(System.Type)">
            <summary>
            Builds correct short generic type name (without namespaces).
            </summary>
            <param name="type">A <see cref="T:System.Type"/> which name is built.</param>
            <returns>Short type name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetCodeTypeReference(System.Type)">
            <summary>
            Gets the <see cref="T:System.CodeDom.CodeTypeReference"/> to the specified <paramref name="type"/>.
            </summary>
            <param name="type">A referenced <see cref="T:System.Type"/>.</param>
            <returns><see cref="T:System.CodeDom.CodeTypeReference"/> to given type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsNullable(System.Type)">
            <summary>
            Indicates whether <paramref name="type"/> is a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">Type to check.</param>
            <returns><see langword="True"/> if type is nullable type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsNullable``1">
            <summary>
            Indicates whether <typeparamref name="T"/> type is a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <returns><see langword="True"/> if type is nullable type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsFinal(System.Type)">
            <summary>
            Indicates whether <paramref name="type"/> is a final type.
            </summary>
            <param name="type">Type to check.</param>
            <returns><see langword="True"/> if type is final type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsFinal``1">
            <summary>
            Indicates whether <typeparamref name="T"/> type is a final type.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <returns><see langword="True"/> if type is final type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInvokeMethod(System.Type)">
            <summary>
            Gets the delegate "Invoke" method (describing the delegate) for 
            the specified <paramref name="delegateType"/>.
            </summary>
            <param name="delegateType">Type of the delegate to get the "Invoke" method of.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> object describing the delegate "Invoke" method.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">Type of the generic.</param>
            <returns>
            <see langword="true"/> if the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> inherits 
            the generic <paramref name="baseType"/> and returns direct inheritor of generic <paramref name="baseType"/> if any.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">Type of the generic.</param>
            <returns>
            Generic <see cref="T:System.Type"/> that directly inherits <paramref name="baseType"/> if the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsOfGenericInterface(System.Type,System.Type)">
            <summary>
            Determines whether <paramref name="type"/> implements the <paramref name="_interface"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="_interface">The <see langword="interface"/>.</param>
            <returns>
             <see langword="true"/> if the specified <paramref name="type"/> implements the <paramref name="_interface"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.ToNullable(System.Type)">
            <summary>
            Converts <paramref name="type"/> to type that can assign both values of <paramref name="type"/> and <see landword="null"/>.
            This method is a reverse for <see cref="M:Xtensive.Reflection.TypeHelper.StripNullable(System.Type)"/> method.
            </summary>
            <param name="type">A type to convert.</param>
            <returns>
            If <paramref name="type"/> is a reference type or a <see cref="T:System.Nullable`1"/> instance returns <paramref name="type"/>.
            Otherwise returns <see cref="T:System.Nullable`1"/> of <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.StripNullable(System.Type)">
            <summary>
            Converts <paramref name="type"/> to <see cref="T:System.Nullable`1"/> if <paramref name="type"/> is a value type.
            Otherwise returns just <paramref name="type"/>.
            This method is a reverse for <see cref="M:Xtensive.Reflection.TypeHelper.ToNullable(System.Type)"/> method.
            </summary>
            <param name="type">The type to process.</param>
            <returns>
            <see cref="T:System.Nullable`1"/> of <paramref name="type"/> is specified type is a value type.
            Otherwise return just <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsAnonymous(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> is anonymous type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <see langword="true" /> if the specified type is anonymous; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsClosure(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> is closure type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <see langword="true" /> if the specified type is anonymous; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsPublicNonAbstractInheritorOf(System.Type,System.Type)">
            <summary>
            Determines whether <paramref name="type"/> is a public non-abstract inheritor of <paramref name="baseType"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">The base type.</param>
            <returns>
            <see langword="true"/> if type is a public non-abstract inheritor of specified base type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.TryGetFieldInfoFromClosure(System.Type,System.Type)">
            <summary>
            Gets information about field in closure.
            </summary>
            <param name="closureType">Closure type.</param>
            <param name="typeOfField">Type of field in closure.</param>
            <returns>If field of <paramref name="typeOfField"/> is exist then return <see cref="T:System.Reflection.MemberInfo"/> of field in closure, overwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.CtorName">
            <summary>
            Returns ".ctor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.CctorName">
            <summary>
            Returns ".cctor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.GetterPrefix">
            <summary>
            Returns "get_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.SetterPrefix">
            <summary>
            Returns "set_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.IndexerPropertyName">
            <summary>
            Returns "Item"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.AddEventHandlerPrefix">
            <summary>
            Returns "add_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.RemoveEventHandlerPrefix">
            <summary>
            Returns "remove_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.RuntimeMethodInfoName">
            <summary>
            Returns "System.Reflection.RuntimeMethodInfo".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Object">
            <summary>
             Various well-known constants related to <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.Clone">
            <summary>
            Returns "Clone".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.Equals">
            <summary>
            Returns "Equals".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.GetHashCode">
            <summary>
            Returns "GetHashCode".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Operator">
            <summary>
             Well-known method names related to operator overloading
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Addition">
            <summary>
            Returns "op_Addition".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Subtraction">
            <summary>
            Returns "op_Subtraction".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Multiply">
            <summary>
            Returns "op_Multiply".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Division">
            <summary>
            Returns "op_Division".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Modulus">
            <summary>
            Returns "op_Modulus".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Increment">
            <summary>
            Returns "op_Increment".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Decrement">
            <summary>
            Returns "op_Decrement".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.UnaryNegation">
            <summary>
            Returns "op_UnaryNegation".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.UnaryPlus">
            <summary>
            Returns "op_UnaryPlus".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.BitwiseOr">
            <summary>
            Returns "op_BitwiseOr".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.BitwiseAnd">
            <summary>
            Returns "op_BitwiseAnd".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.ExclusiveOr">
            <summary>
            Returns "op_ExclusiveOr".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.OnesComplement">
            <summary>
            Returns "op_OnesComplement".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LeftShift">
            <summary>
            Returns "op_LeftShift"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.RightShift">
            <summary>
            Returns "op_RightShift
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LogicalNot">
            <summary>
            Returns "op_LogicalNot".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.True">
            <summary>
            Returns "op_True".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.False">
            <summary>
            Returns "op_False".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Explicit">
            <summary>
            Returns "op_Explicit"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Implicit">
            <summary>
            Returns "op_Implicit".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Equality">
            <summary>
            Returns "op_Equality".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Inequality">
            <summary>
            Returns "op_Inequality".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.GreaterThan">
            <summary>
            Returns "op_GreaterThan".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.GreaterThanOrEqual">
            <summary>
            Returns "op_GreaterThanOrEqual".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LessThan">
            <summary>
            Returns "op_LessThan".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LessThanOrEqual">
            <summary>
            Returns "op_LessThanOrEqual".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Queryable">
            <summary>
             Various well-known constants related to <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Aggregate">
            <summary>
            Returns "Aggregate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.All">
            <summary>
            Returns "All".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Any">
            <summary>
            Returns "Any".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.AsEnumerable">
            <summary>
            Returns "AsEnumerable".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.AsQueryable">
            <summary>
            Returns "AsQueryable".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Average">
            <summary>
            Returns "Average".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Cast">
            <summary>
            Returns "Cast".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Concat">
            <summary>
            Returns "Concat".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Contains">
            <summary>
            Returns "All".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Count">
            <summary>
            Returns "Count".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.DefaultIfEmpty">
            <summary>
            Returns "DefaultIfEmpty".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Distinct">
            <summary>
            Returns "Distinct".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ElementAt">
            <summary>
            Returns "ElementAt".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ElementAtOrDefault">
            <summary>
            Returns "ElementAtOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Except">
            <summary>
            Returns "Except".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.First">
            <summary>
            Returns "First".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.FirstOrDefault">
            <summary>
            Returns "FirstOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.GroupBy">
            <summary>
            Returns "GroupBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.GroupJoin">
            <summary>
            Returns "GroupJoin".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Intersect">
            <summary>
            Returns "Intersect".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Join">
            <summary>
            Returns "Join".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Last">
            <summary>
            Returns "Last".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.LastOrDefault">
            <summary>
            Returns "LastOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.LongCount">
            <summary>
            Returns "LongCount".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Max">
            <summary>
            Returns "Max".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Min">
            <summary>
            Returns "Min".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OfType">
            <summary>
            Returns "OfType".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OrderBy">
            <summary>
            Returns "OrderBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OrderByDescending">
            <summary>
            Returns "OrderByDescending".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Reverse">
            <summary>
            Returns "Reverse".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Select">
            <summary>
            Returns "Select".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SelectMany">
            <summary>
            Returns "SelectMany".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SequenceEqual">
            <summary>
            Returns "SequenceEqual".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Single">
            <summary>
            Returns "Single".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SingleOrDefault">
            <summary>
            Returns "SingleOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Skip">
            <summary>
            Returns "Skip".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SkipWhile">
            <summary>
            Returns "SkipWhile".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Sum">
            <summary>
            Returns "Sum".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Take">
            <summary>
            Returns "Take".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.TakeWhile">
            <summary>
            Returns "TakeWhile".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ThenBy">
            <summary>
            Returns "ThenBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ThenByDescending">
            <summary>
            Returns "ThenByDescending".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ToArray">
            <summary>
            Returns "ToArray".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ToList">
            <summary>
            Returns "ToList".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Union">
            <summary>
            Returns "Union".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Where">
            <summary>
            Returns "Where".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Tuple">
            <summary>
             Various well-known constants related to <see cref="T:Xtensive.Reflection.WellKnown.Tuple"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueOrDefault">
            <summary>
            Returns "GetValueOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValue">
            <summary>
            Returns "GetValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValue">
            <summary>
            Returns "SetValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.HasValue">
            <summary>
            Returns "HasValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetFieldState">
            <summary>
            Returns "GetFieldState".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetFieldState">
            <summary>
            Returns "SetFieldState".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.DescriptorFieldName">
            <summary>
            Returns "descriptor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueX">
            <summary>
            Returns "GetValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetNullableValueX">
            <summary>
            Returns "GetNullableValueOrDefault{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValueX">
            <summary>
            Returns "SetValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetNullableValueX">
            <summary>
            Returns "SetNullableValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueDelegatesFieldName">
            <summary>
            Returns "getValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetNullableValueDelegatesFieldName">
            <summary>
            Returns "getNullableValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValueDelegatesFieldName">
            <summary>
            Returns "setValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetNullableValueDelegatesFieldName">
            <summary>
            Returns "setNullableValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetGetValueDelegate">
            <summary>
            Returns "GetGetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetGetNullableValueDelegate">
            <summary>
            Returns "GetGetNullableValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetSetValueDelegate">
            <summary>
            Returns "GetSetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetSetNullableValueDelegate">
            <summary>
            Returns "GetSetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Descriptor">
            <summary>
            Returns "Descriptor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Count">
            <summary>
            Returns "Count".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Create">
            <summary>
            Returns "Create".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.CreateNew">
            <summary>
            Returns "CreateNew".
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.ConnectionType">
            <summary>
            Type of <see cref="T:Xtensive.Sorting.NodeConnection`2"/> connection.
            </summary>
        </member>
        <member name="F:Xtensive.Sorting.ConnectionType.Breakable">
            <summary>
            Connection may be breaked by topological sorter.
            </summary>
        </member>
        <member name="F:Xtensive.Sorting.ConnectionType.Permanent">
            <summary>
            Connection cannot be breaked by topological sorter.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.Node`2">
            <summary>
            Sorting node. 
            </summary>
            <typeparam name="TNodeItem">Type of node item.</typeparam>
            <typeparam name="TConnectionItem">Type of connection item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.AddConnection(Xtensive.Sorting.Node{`0,`1},`1)">
            <summary>
            Adds new outgoing connection to node.
            </summary>
            <param name="node">Paired node.</param>
            <param name="connectionItem">Item of connection.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.AddConnection(Xtensive.Sorting.Node{`0,`1},`1,Xtensive.Sorting.ConnectionType)">
            <summary>
            Adds new outgoing connection to node.
            </summary>
            <param name="node">Paired node.</param>
            <param name="connectionItem">Item of connection.</param>
            <param name="connectionType">Type of connection.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.RemoveConnections(Xtensive.Sorting.Node{`0,`1})">
            <summary>
            Removes outgoing connections from node.
            </summary>
            <param name="destination">Paired node.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.#ctor(`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.Item">
            <summary>
            Gets node item.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.IncomingConnections">
            <summary>
            Gets <see cref="T:System.Collections.Generic.HashSet`1"/> of incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.OutgoingConnections">
            <summary>
            Gets <see cref="T:System.Collections.Generic.HashSet`1"/> of outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.OutgoingConnectionCount">
            <summary>
            Gets count of outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.BreakableOutgoingConnectionCount">
            <summary>
            Gets count of breakable outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.PermanentOutgoingConnectionCount">
            <summary>
            Gets count of permanent outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.BreakableIncomingConnectionCount">
            <summary>
            Gets count of breakable incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.IncomingConnectionCount">
            <summary>
            Gets count of breakable incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.PermanentIncomingConnectionCount">
            <summary>
            Gets count of permanent incoming connections.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.NodeConnection`2">
            <summary>
            Connection between two <see cref="T:Xtensive.Sorting.Node`2"/>s.
            </summary>
            <typeparam name="TNodeItem">Type of node item.</typeparam>
            <typeparam name="TConnectionItem">Type of connection item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.NodeConnection`2.#ctor(Xtensive.Sorting.Node{`0,`1},Xtensive.Sorting.Node{`0,`1},`1)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="connectionItem">The connection item.</param>
        </member>
        <member name="M:Xtensive.Sorting.NodeConnection`2.#ctor(Xtensive.Sorting.Node{`0,`1},Xtensive.Sorting.Node{`0,`1},`1,Xtensive.Sorting.ConnectionType)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="connectionItem">The connection item.</param>
            <param name="connectionType">Connection type.</param>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.ConnectionItem">
            <summary>
            Gets connection item.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.Source">
            <summary>
            Gets connection source.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.Destination">
            <summary>
            Gets connection destination.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.ConnectionType">
            <summary>
            Gets connection type.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSorter">
            <summary>
            Topological sorter for oriented graph of the items.
            </summary>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0})">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true" />
            if there is outgoing connection between the first and the second node.</param>
            <returns>
            Sorting result, if there were no loops;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.Node{``0,System.Object}}@)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="loops">The loops, if found.</param>
            <returns>
            Sorting result, if there were no loops;
            otherwise, <see langword="null"/>.
            In this case <paramref name="loops"/> will contain only the loop edges.
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,System.Object}}@)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <returns>
            Sorting result
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,System.Object}}@,System.Boolean)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <param name="removeWholeNode">If <see langword="true"/> removes whole node in the case of loop, otherwise removes only one edge.</param>
            <returns>
            Sorting result
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.List{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.Node{``0,``1}}@)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="loops">The loops, if found.</param>
            <returns>Sorting result, if there were no loops;
            otherwise, <see langword="null" />. 
            In this case <paramref name="nodes"/> will contain only the loop edges.</returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.IEnumerable{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,``1}}@)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <returns>Sorting result.</returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.IEnumerable{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,``1}}@,System.Boolean)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <param name="removeWholeNode">If <see langword="true"/> removes whole node in the case of loop, otherwise removes only one edge.</param>
            <returns>Sorting result.</returns>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSortResult`2">
            <summary>
            Describes result of <see cref="T:Xtensive.Sorting.TopologicalSorter"/> operations.
            </summary>
            <typeparam name="TNodeItem">The type of the node item.</typeparam>
            <typeparam name="TConnectionItem">The type of the connection item.</typeparam>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSortResult`1">
            <summary>
            Base type for <see cref="T:Xtensive.Sorting.TopologicalSortResult`2"/>.
            </summary>
            <typeparam name="TNodeItem">The type of the node item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSortResult`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="result">The sorting result.</param>
        </member>
        <member name="P:Xtensive.Sorting.TopologicalSortResult`1.Result">
            <summary>
            Gets or sets the sorting result.
            </summary>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSortResult`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{Xtensive.Sorting.Node{`0,`1}})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="result">The sorting result.</param>
            <param name="loops">The found loops.</param>
        </member>
        <member name="P:Xtensive.Sorting.TopologicalSortResult`2.Loops">
            <summary>
            Gets or sets the found loops.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.ContainerNode">
            <summary>
            Container node in SQL DOM query model.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.Node">
            <summary>
            Node in SQL DOM query model.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilationResult">
            <summary>
            Represents a <see cref="T:Xtensive.Sql.Compiler.SqlCompiler"/> compilation results.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetParameterName(System.Object)">
            <summary>
            Gets the name of the <paramref name="parameter"/> assigned during compilation.
            All explicitly named parameters are not searched by this method.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Assigned name.</returns>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText">
            <summary>
            Gets the textual representation of SQL DOM statement compilation.
            </summary>
            <value>The SQL text command.</value>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText(Xtensive.Sql.Compiler.SqlPostCompilerConfiguration)">
            <summary>
            Gets the textual representation of SQL DOM statement compilation.
            Query is postprocessed using the specified <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The postcompiler configuration.</param>
            <returns>The SQL text command.</returns>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompiler">
            <summary>
            Base class for any SQL compiler.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlDriverBound">
            <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver"/> bound object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverBound.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="P:Xtensive.Sql.SqlDriverBound.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompiler.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilerConfiguration">
            <summary>
            A various options for <see cref="T:Xtensive.Sql.Compiler.SqlCompiler"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilerConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.ParameterNamePrefix">
            <summary>
            Gets or sets the parameter prefix.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.DatabaseQualifiedObjects">
            <summary>
            Always use database-qualified objects in generated SQL.
            This option could be enabled if and only if
            server supports <see cref="F:Xtensive.Sql.Info.QueryFeatures.MultidatabaseQueries"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilerContext">
            <summary>
            SQL compiler context.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilerException">
            <summary>
            An <see cref="T:Xtensive.Sql.Compiler.SqlCompiler"/> exception.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilerNamingScope">
            <summary>
            SQL compiler naming scope.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilerNamingScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlCompilerOutputScope">
            <summary>
            SQL compiler output scope.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlCompilerOutputScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlParameterNameProvider">
            <summary>
            SQL parameter name provider.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.GetName(System.Object)">
            <summary>
            Gets the name for the specified <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Name for the specified parameter.</returns>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.#ctor(Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlPostCompilerConfiguration">
            <summary>
            <see cref="T:Xtensive.Sql.Compiler.PostCompiler"/> configuration.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlTableNameProvider">
            <summary>
            Table name provider.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Compiler.SqlTranslator">
            <summary>
            SQL translator.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlTranslator.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteString(System.String)">
            <summary>
            Returns quoted string.
            </summary>
            <param name="str">Unquoted string.</param>
            <returns>Quoted string.</returns>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteIdentifier(System.String[])">
            <summary>
            Returns string holding quoted identifier name.
            </summary>
            <param name="names">An <see cref="T:System.Array"/> of unquoted identifier name parts.</param>
            <returns>Quoted identifier name.</returns>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlTranslator.BuildBatch(System.String[])">
            <summary>
            Builds the batch from specified SQL statements.
            </summary>
            <param name="statements">The statements.</param>
            <returns>String containing the whole batch.</returns>
        </member>
        <member name="M:Xtensive.Sql.Compiler.SqlTranslator.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator"/> class.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlTranslator.FloatFormatString">
            <summary>
            Gets the float format string.
            See <see cref="M:System.Double.ToString(System.String)"/> for details.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DoubleFormatString">
            <summary>
            Gets the double format string.
            See <see cref="M:System.Double.ToString(System.String)"/> for details.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DateTimeFormatString">
            <summary>
            Gets the date time format string.
            See <see cref="M:System.DateTime.ToString(System.String)"/> for details.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlTranslator.TimeSpanFormatString">
            <summary>
            Gets the time span format string.
            See <see cref="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)"/> for details.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Compiler.SqlTranslator.ParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlNode">
            <summary>
            Represents any node in Sql expression tree.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ISqlNode">
            <summary>
            A contract for server-independent node in SQL DOM query model.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Xtensive.Sql.SqlNode.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="T:Xtensive.Sql.SqlStatement">
            <summary>
            Base class for SQL statements.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ISqlCompileUnit">
            <summary>
            A contract for server-independent  SQL compilation unit.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlColumnCollection">
            <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlColumn})">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlOrderCollection">
            <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlOrder"/>s.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlTableColumnCollection">
            <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlTableColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlTableColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlTableColumnCollection"/> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">list is null.</exception>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTableColumnCollection.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlExpression">
            <summary>
            Defines base class for any sql expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCustomFunctionCall.FunctionType">
            <summary>
            Gets the custom function type.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCustomFunctionCall.Arguments">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlAggregate.Distinct">
            <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlAggregate"/> is distinct.
            </summary>
            <value><see langword="true"/> if distinct; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlAggregate.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlArray`1">
            <summary>
            Represents generic array expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlArray`1.Values">
            <summary>
            Gets the values.
            </summary>
            <values>The values.</values>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlBetween">
            <summary>
            Represents between expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBetween.Left">
            <summary>
            Gets the left boundary of the between predicate.
            </summary>
            <value>The left boundary of the between predicate.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBetween.Right">
            <summary>
            Gets the right boundary of the between predicate.
            </summary>
            <value>The right boundary of the between predicate.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBetween.Expression">
            <summary>
            Gets the expression to compare.
            </summary>
            <value>The expression to compare.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlBinary">
            <summary>
            Represents binary expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBinary.Left">
            <summary>
            Gets the left operand of the binary operator.
            </summary>
            <value>The left operand of the binary operator.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBinary.Right">
            <summary>
            Gets the right operand of the binary operator.
            </summary>
            <value>The right operand of the binary operator.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCollate.Collation">
            <summary>
            Gets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCollate.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlColumn.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlColumn.SqlTable">
            <summary>
            Gets the table reference.
            </summary>
            <value>The table reference.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlColumnRef">
            <summary>
            Represents a reference to a SQL column.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlColumnRef.SqlColumn">
            <summary>
            Gets the SQL column.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Add(Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Contains(Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.CopyTo(Xtensive.Sql.Dml.SqlExpression[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.IndexOf(Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Insert(System.Int32,Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Remove(Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlExpressionList.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlExpressionList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlContainer">
            <summary>
            Represents a container that can hold any value.
            An attempt to its translation leads to an error.
            This class can be used to store temporary values inside <see cref="T:Xtensive.Sql.Dml.SqlExpression"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlContainer.Value">
            <summary>
            Gets the value contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.Name">
            <summary>
            Gets the name of the cursor.
            </summary>
            <value>The name of the cursor.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.Insensitive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor"/>
            makes a temporary copy of the data to be used.
            </summary>
            <value><see langword="true"/> if this <see cref="T:Xtensive.Sql.Dml.SqlCursor"/> makes a temporary
            copy of the data to be used; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.Scroll">
            <summary>
            Gets or sets a value indicating whether all fetch options are available for this cursor.
            </summary>
            <value><see langword="true"/> if all fetch options are available; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.Query">
            <summary>
            Gets or sets the select statement that defines the result set of the cursor.
            </summary>
            <value>The select statement that defines the result set of the cursor.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether cursor is read only.
            </summary>
            <value><see langword="true"/> if cursor is read only; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.Columns">
            <summary>
            Gets updatable columns within the cursor.
            </summary>
            <value>Updatable columns within the cursor.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.WithHold">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor"/> is holdable cursor.
            </summary>
            <value>
              <see langword="true"/> if this instance is a holdable cursor; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCursor.WithReturn">
            <summary>
            Gets or sets a value indicating whether this instance is result set cursor.
            </summary>
            <value>
            <see langword="true"/> if this instance is result set cursor; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.Arguments">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.FunctionType">
            <summary>
            Gets the function type.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlLike">
            <summary>
            Represents LIKE predicat.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlLike.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlLike.Pattern">
            <summary>
            Gets the pattern expression.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlLike.Escape">
            <summary>
            Gets the escape character expression.
            </summary>
            <value>The escape.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlLiteral`1">
            <summary>
            Represents literal value expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlLiteral`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlMatch">
            <summary>
            Represents MATCH SQL statement.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlMatch.Value">
            <summary>
            Gets the value which will be tested for matching.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlMatch.SubQuery">
            <summary>
            Gets the sub query to search of matching.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlMatch.Unique">
            <summary>
            Gets a value indicating whether unique sub query rows for search matching will be used only.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlMatch.MatchType">
            <summary>
            Gets the type of the match.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"></see> for this instance.
            </summary>
            
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"></see> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.Decimal"></see> number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"></see> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.DateTime"></see> instance equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"></see> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> instance equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"></see> of the specified <see cref="T:System.Type"></see> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> instance of type conversionType whose value is equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
            <param name="conversionType">The <see cref="T:System.Type"></see> to which the value of this instance is converted. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlNative.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlNextValue">
            <summary>
            Represents NEXT VALUE FOR expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlNextValue.Increment">
            <summary>
            Gets the increment.
            </summary>
            <value>The increment.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlNextValue.Sequence">
            <summary>
            Gets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlParameterRef">
            <summary>
            Represents a Sql parameter.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ISqlCursorFetchTarget">
            <summary>
            A contract for server-independent cursor fetch target.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ISqlLValue">
            <summary>
            A contract for server-independent LValue in SQL DOM query model.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlSubQuery">
            <summary>
            Represents sub query expression.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlSubQuery.ReplaceWith(Xtensive.Sql.Dml.SqlExpression)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSubQuery.Query">
            <summary>
            Gets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlTableColumn">
            <summary>
            Defines a reference to <see cref="T:Xtensive.Sql.Model.DataTableColumn"/> object
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlTrim">
            <summary>
            Represents Trim function call.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTrim.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTrim.TrimCharacters">
            <summary>
            Gets the trim characters.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlUnary">
            <summary>
            Represents unary expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUnary.Operand">
            <summary>
            Gets the operand of the unary operator.
            </summary>
            <value>The operand of the unary operator.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUserColumn.Expression">
            <summary>
            Gets the column expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUserFunctionCall.Name">
            <summary>
            Gets the function name.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlVariable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlVariable.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.Extensions">
            <summary>
            Various extension methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.Extensions.IsNullReference(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Determines whether the specified expression is a null reference.
            Use this method instead of comparison with null,
            because equality operator is overloaded for <see cref="T:Xtensive.Sql.Dml.SqlExpression"/>
            to yield equality comparison expression.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns>
            <see langword="true"/> if argument is a null reference; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlHint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlHint"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFastFirstRowsHint.Amount">
            <summary>
            Gets the rows amount.
            </summary>
            <value>The row amount.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlForceJoinOrderHint.Tables">
            <summary>
            Gets the corresponding tables.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlJoinHint">
            <summary>
            Represents a join option (hint) for a query optimizer.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Method">
            <summary>
            Gets the join method.
            </summary>
            <value>The join method.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Table">
            <summary>
            Gets the table.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlJoinMethod">
            <summary>
            A list of available join methods for a table.
            </summary>
            <remarks>
            MS SQL Server supports only <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop"/>, <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge"/>,
            <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash"/> and <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote"/> methods.
            Oracle supports all methods except <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote"/> method.
            </remarks>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Default">
            <summary>
            Join method is selected by query optimizer.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop">
            <summary>
            Instructs the optimizer to join each specified table to another row source with a nested loops join,
            using the specified table as the inner table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.LoopWithIndex">
            <summary>
            Instructs the optimizer to join the specified table to another row source with a nested loops join
            using the specified table as the inner table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoLoop">
            <summary>
            Instructs the optimizer to exclude nested loops joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge">
            <summary>
            Instructs the optimizer to join each specified table with another row source using a sort-merge join.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoMerge">
            <summary>
            Instructs the optimizer to exclude sort-merge joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash">
            <summary>
            Instructs the optimizer to join each specified table with another row source using a hash join.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoHash">
            <summary>
            Instructs the optimizer to exclude hash joins when joining each specified table to another row source using
            the specified table as the inner table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote">
            <summary>
            Specifies that the join operation is performed on the site of the right table. This is useful
            when the left table is a local table and the right table is a remote table. This method should be used
            only when the left table has fewer rows than the right table.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlNativeHint.HintText">
            <summary>
            Gets the hint text.
            </summary>
            <value>The hint text.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlTable">
            <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table"/> object;
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlTable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTable.Name">
            <summary>
            Gets the name of the instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTable.Columns">
            <summary>
            Gets the collection of columns.
            </summary>
            <value>The collection of column references.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Sql.Dml.SqlColumn"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Sql.ISqlQueryExpression">
            <summary>
            A contract for server-independent expression in SQL DOM query model.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlJoinedTable.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.JoinExpression">
            <summary>
            Gets the join expression.
            </summary>
            <value>The join expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.AliasedColumns">
            <summary>
            Gets or sets the aliased columns.
            </summary>
            <value>Aliased columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.JoinType">
            <summary>
            Gets the type of the join.
            </summary>
            <value>The type of the join.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlMatchType">
            <summary>
            Enums types of search of matching in MATCH SQL statement.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlMatchType.None">
            <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value"/> then the MATCH
            SQL statement is true.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery"/> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value"/> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlMatchType.Partial">
            <summary>
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery"/> such that each
            non-null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value"/> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Dml.SqlMatchType.Full">
            <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value"/> then the MATCH
            SQL statement is false.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery"/> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value"/> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlOrder">
            <summary>
            Represents order specification.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlOrder.Expression">
            <summary>
            Gets the expression to sort by.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlOrder.Position">
            <summary>
            Gets the position of column to sort by.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlOrder.Ascending">
            <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlOrder"/> is ascending.
            </summary>
            <value><see langword="true"/> if ascending; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlQueryRef.Query">
            <summary>
            Gets the query statement.
            </summary>
            <value>The query statement.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlTableRef">
            <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table"/> object;
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTableRef.Name">
            <summary>
            Gets the name of the instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlTableRef.DataTable">
            <summary>
            Gets the referenced table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlAssignment.Left">
            <summary>
            Gets the left operand of the assign statement.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlAssignment.Right">
            <summary>
            Gets the right operand of the assign statement.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.Add(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.Contains(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.Remove(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.IndexOf(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.System#Collections#Generic#IEnumerable{Xtensive#Sql#SqlStatement}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlBatch.AcceptVisitor(Xtensive.Sql.ISqlVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBatch.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBatch.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlBatch.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlCloseCursor.Cursor">
            <summary>
            Gets the cursor.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlDeclareVariable.Variable">
            <summary>
            Gets the variable.
            </summary>
            <value>The variable.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlDelete">
            <summary>
            Describes SQL DELETE statement.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlQueryStatement">
            <summary>
            Base class for DML statements.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlQueryStatement.Hints">
            <summary>
            Gets the collection of join hints.
            </summary>
            <value>The collection of join hints.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlDelete.Delete">
            <summary>
            Gets or sets the table.
            </summary>
            <value>The table to change.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlDelete.Where">
            <summary>
            Gets or sets the WHERE clause expression.
            </summary>
            <value>The WHERE clause expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlDelete.From">
            <summary>
            Gets or sets the FROM clause expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFetch.Cursor">
            <summary>
            Gets the cursor.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFetch.Option">
            <summary>
            Gets the fetch option.
            </summary>
            <value>The fetch option.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFetch.RowCount">
            <summary>
            Gets the row count.
            </summary>
            <value>The row count.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlFetch.Targets">
            <summary>
            Gets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlIf">
            <summary>
            Represents SQL IF...ELSE statement.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlIf.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlIf.True">
            <summary>
            Gets or sets SQL statement which is carried out if the condition is true.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlIf.False">
            <summary>
            Gets or sets SQL statement which is carried out if the condition is false.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlInsert.Into">
            <summary>
            Gets or sets the table.
            </summary>
            <value>The table to change.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlInsert.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlInsert.From">
            <summary>
            Gets or sets the FROM clause expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlOpenCursor.Cursor">
            <summary>
            Gets the cursor.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlSelect">
            <summary>
            Represents SQL SELECT statement.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlSelect.ShallowClone">
            <summary>
            Makes a shallow clone of the instance.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Columns">
            <summary>
            Gets the collection of columns to select.
            </summary>
            <value>The collection of columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their index.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.From">
            <summary>
            Gets or sets from clause.
            </summary>
            <value>The from clause.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Where">
            <summary>
            Gets or sets the where clause.
            </summary>
            <value>The where clause.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.GroupBy">
            <summary>
            Gets the collection of columns to group by.
            </summary>
            <value>The collection of columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Having">
            <summary>
            Gets or sets the having clause.
            </summary>
            <value>The having clause.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.OrderBy">
            <summary>
            Gets the order by clause.
            </summary>
            <value>The order by clause.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Distinct">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlSelect"/> is distinct.
            </summary>
            <value><see langword="true"/> if distinct is set; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.HasLimit">
            <summary>
            Gets value indicating if <see cref="P:Xtensive.Sql.Dml.SqlSelect.Limit"/> is specified.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlSelect.HasOffset">
            <summary>
            Gets value indicating if <see cref="P:Xtensive.Sql.Dml.SqlSelect.Offset"/> is specified.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Add(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Contains(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Remove(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.IndexOf(Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.System#Collections#Generic#IEnumerable{Xtensive#Sql#SqlStatement}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUpdate.Update">
            <summary>
            Gets or sets the table.
            </summary>
            <value>The table to change.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUpdate.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUpdate.Where">
            <summary>
            Gets or sets the WHERE clause expression.
            </summary>
            <value>The WHERE clause expression.</value>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlUpdate.From">
            <summary>
            Gets or sets the FROM clause expression.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Dml.SqlWhile">
            <summary>
            Represents SQL while loop.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlWhile.Statement">
            <summary>
            Gets or sets the statement to execute.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Dml.SqlWhile.Condition">
            <summary>
            Gets or sets the condition for the repeated execution
            of an SQL statement or statement block.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlDriver">
            <summary>
            Declares a base functionality of any <see cref="T:Xtensive.Sql.SqlDriver"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.GetConnectionString(Xtensive.Orm.ConnectionInfo)">
            <summary>
            Gets connection string for the specified <see cref="T:Xtensive.Orm.ConnectionInfo"/>.
            </summary>
            <param name="connectionInfo"><see cref="T:Xtensive.Orm.ConnectionInfo"/> to convert.</param>
            <returns>Connection string.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
            <param name="statement">The Sql.Dom statement.</param>
            <returns>Result of compilation.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit,Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
            <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
            <param name="statement">The Sql.Dom statement.</param>
            <param name="configuration">The options of compilation.</param>
            <returns>Result of compilation.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.GetDefaultSchema(Xtensive.Sql.SqlConnection)">
            <summary>
            Gets <see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.
            </summary>
            <param name="connection"><see cref="T:Xtensive.Sql.SqlConnection"/> to use.</param>
            <returns><see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.Extract(Xtensive.Sql.SqlConnection,System.Collections.Generic.IEnumerable{Xtensive.Sql.SqlExtractionTask})">
            <summary>
            Extracts catalogs/schemas according to the specified <paramref name="tasks"/>.
            </summary>
            <param name="connection">Extraction tasks.</param>
            <param name="tasks">Connection to use.</param>
            <returns>Extracted catalogs.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.ExtractCatalog(Xtensive.Sql.SqlConnection)">
            <summary>
            Extracts all schemas from the database.
            </summary>
            <param name="connection">The connection.</param>
            <returns>
            <see cref="T:Xtensive.Sql.Model.Catalog"/> that holds all schemas in the database.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.ExtractDefaultSchema(Xtensive.Sql.SqlConnection)">
            <summary>
            Extracts the default schema from the database.
            </summary>
            <param name="connection">The connection.</param>
            <returns>
            <see cref="T:Xtensive.Sql.Model.Catalog"/> that holds just the default schema in the database.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.ExtractSchema(Xtensive.Sql.SqlConnection,System.String)">
            <summary>
            Extracts the specified schema from the database.
            </summary>
            <param name="connection">The connection.</param>
            <returns>
            Extracted <see cref="T:Xtensive.Sql.Model.Schema"/> instance.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateConnection">
            <summary>
            Creates the connection using default connection information.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateConnection(Xtensive.Orm.ConnectionInfo)">
            <summary>
            Creates the connection using specified connection information.
            </summary>
            <param name="connectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.GetExceptionType(System.Exception)">
            <summary>
            Gets the type of the exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Type of the exception.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.GetExceptionInfo(System.Exception)">
            <summary>
            Gets information about exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Information about exception.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateCompiler">
            <summary>
            Creates the SQL DOM compiler.
            </summary>
            <returns>Created compiler.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateTranslator">
            <summary>
            Creates the SQL DOM translator.
            </summary>
            <returns>Created translator</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateExtractor">
            <summary>
            Creates the extractor.
            </summary>
            <returns>Created extractor.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateTypeMapper">
            <summary>
            Creates the type mapper.
            </summary>
            <returns>Created type mapper.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.CreateServerInfoProvider">
            <summary>
            Creates the server info provider.
            </summary>
            <returns>Created server info provider.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriver.DoCreateConnection">
            <summary>
            Creates connection.
            </summary>
            <returns>Created connection.</returns>
        </member>
        <member name="P:Xtensive.Sql.SqlDriver.CoreServerInfo">
            <summary>
            Gets an instance that provides the most essential information about underlying RDBMS.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriver.ServerInfo">
            <summary>
            Gets an instance that provides complete information about underlying RDBMS.
            <seealso cref="P:Xtensive.Sql.SqlDriver.ServerInfo"/>
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriver.TypeMappings">
            <summary>
            Gets the type mappings.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriver.Translator">
            <summary>
            Gets the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Extractor">
            <summary>
            Builds <see cref="T:Xtensive.Sql.Model.Catalog"/> by extracting the metadata from existing database.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.ExtractCatalog(System.String)">
            <summary>
            Extracts all schemes from the database.
            </summary>
            <param name="catalogName">Catalog to extract.</param>
            <returns><see cref="T:Xtensive.Sql.Model.Catalog"/> that holds all schemes in the database.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.ExtractSchema(System.String,System.String)">
            <summary>
            Extracts the specified schema from the database.
            </summary>
            <returns>Extracted <see cref="T:Xtensive.Sql.Model.Schema"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)">
            <summary>
            Initializes the translator with specified <see cref="T:Xtensive.Sql.SqlConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.Initialize">
            <summary>
            Performs custom initialization.
            Called within <see cref="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Executes the reader againts the command created from the specified <paramref name="statement"/>.
            </summary>
            <param name="statement">The statement to execute.</param>
            <returns>Executed reader.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(System.String)">
            <summary>
            Executes the reader againts the command created from the specified <paramref name="commandText"/>.
            </summary>
            <param name="commandText">The command text to execute.</param>
            <returns>Executed reader.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Extractor.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Extractor.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Extractor.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ServerInfoProvider">
            <summary>
            Describes <see cref="T:Xtensive.Sql.Info.ServerInfo"/> provider interface.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCollationInfo">
            <summary>
            Gets the collation info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCharacterSetInfo">
            <summary>
            Gets the character set info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTranslationInfo">
            <summary>
            Gets the translation info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTriggerInfo">
            <summary>
            Gets the trigger info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStoredProcedureInfo">
            <summary>
            Gets the stored procedure info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSequenceInfo">
            <summary>
            Gets the sequence info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDatabaseInfo">
            <summary>
            Gets the database info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetColumnInfo">
            <summary>
            Gets the column info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetViewInfo">
            <summary>
            Gets the view info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSchemaInfo">
            <summary>
            Gets the schema info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTableInfo">
            <summary>
            Gets the table info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTemporaryTableInfo">
            <summary>
            Gets the temporary table info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCheckConstraintInfo">
            <summary>
            Gets the check constraint info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetUniqueConstraintInfo">
            <summary>
            Gets the unique constraint info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetPrimaryKeyInfo">
            <summary>
            Gets the primary key info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetFullTextInfo">
            <summary>
            Gets the referential constraint info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetForeignKeyConstraintInfo">
            <summary>
            Gets the referential constraint info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIndexInfo">
            <summary>
            Gets the index info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetQueryInfo">
            <summary>
            Gets the query info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIdentityInfo">
            <summary>
            Gets the identity info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDataTypesInfo">
            <summary>
            Gets the collection of supported data types.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIsolationLevels">
            <summary>
            Gets the supported isolation levels.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDomainInfo">
            <summary>
            Gets the domain info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetAssertionInfo">
            <summary>
            Gets the assertion info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetServerFeatures">
            <summary>
            Gets the server features.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStringIndexingBase">
            <summary>
            Gets the string indexing base.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfoProvider.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfoProvider.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlConnection">
            <summary>
            A connection to a database.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object associated with the current connection.
            </summary>
            <returns>Created command.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(Xtensive.Sql.ISqlCompileUnit)">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object with specified <paramref name="statement"/>.
            Created command will be associated with the current connection.
            </summary>
            <returns>Created command.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(System.String)">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object with specified <paramref name="commandText"/>.
            Created command will be associated with the current connection.
            </summary>
            <returns>Created command.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateParameter">
            <summary>
            Creates the parameter.
            </summary>
            <returns>Created parameter.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateCursorParameter">
            <summary>
            Creates the cursor parameter.
            </summary>
            <returns>Created parameter.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateCharacterLargeObject">
            <summary>
            Creates the character large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull"/> returns <see langword="true"/>)
            </summary>
            <returns>Created CLOB.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateBinaryLargeObject">
            <summary>
            Creates the binary large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull"/> returns <see langword="true"/>)
            </summary>
            <returns>Created BLOB.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.Rollback">
            <summary>
            Rollbacks the current transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.MakeSavepoint(System.String)">
            <summary>
            Makes the transaction savepoint.
            </summary>
            <param name="name">The name of the savepoint.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.RollbackToSavepoint(System.String)">
            <summary>
            Rollbacks current transaction to the specified savepoint.
            </summary>
            <param name="name">The name of the savepoint.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.ReleaseSavepoint(System.String)">
            <summary>
            Releases the savepoint with the specfied name.
            </summary>
            <param name="name">The name of the savepoint.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.ClearActiveTransaction">
            <summary>
            Clears the active transaction (i.e. sets <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction"/> to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.CreateNativeCommand">
            <summary>
            Creates the native command.
            </summary>
            <returns>Created command.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.EnsureTransactionIsActive">
            <summary>
            Ensures the transaction is active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction"/> is not <see langword="null"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlConnection.EnsureTrasactionIsNotActive">
            <summary>
            Ensures the trasaction is not active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction"/> is <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.UnderlyingConnection">
            <summary>
            Gets the underlying connection.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.ActiveTransaction">
            <summary>
            Gets the active transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.Extensions">
            <summary>
            Gets <see cref="T:Xtensive.Collections.IExtensionCollection"/> associated with this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.ConnectionInfo">
            <summary>
            Gets or sets <see cref="P:Xtensive.Sql.SqlConnection.ConnectionInfo"/> to use.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.CommandTimeout">
            <summary>
            Gets or sets the command timeout.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlConnection.State">
            <summary>
            Gets the state of the connection.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.CreateParameter">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.BeginTransaction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.BeginTransaction(System.Data.IsolationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.MakeSavepoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.RollbackToSavepoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.ReleaseSavepoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.Connection.ClearActiveTransaction">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Drivers.SqlServer.Connection.UnderlyingConnection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Drivers.SqlServer.Connection.ActiveTransaction">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Drivers.SqlServer.DriverFactory">
            <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver"/> factory for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlDriverFactory">
            <summary>
            Creates drivers from the specified connection info.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.GetDriver(Xtensive.Orm.ConnectionInfo)">
            <summary>
            Gets driver for the specified <see cref="T:Xtensive.Orm.ConnectionInfo"/>.
            </summary>
            <param name="connectionInfo">Connection information to use.</param>
            <returns>Driver for <paramref name="connectionInfo"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.GetDriver(Xtensive.Orm.ConnectionInfo,System.String)">
            <summary>
            Creates driver from the specified <paramref name="connectionInfo"/>.
            </summary>
            <param name="connectionInfo">The connection info to create driver from.</param>
            <param name="forcedVersion">Forced server version.</param>
            <returns>Created driver.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.GetDriver(Xtensive.Orm.ConnectionInfo,Xtensive.Sql.SqlDriverConfiguration)">
            <summary>
            Create driver from the specified <paramref name="connectionInfo"/>
            and <paramref name="configuration"/>.
            </summary>
            <param name="connectionInfo">The connection info to create driver from.</param>
            <param name="configuration">Additional configuration options for the driver.</param>
            <returns>Created driver.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.GetConnectionString(Xtensive.Orm.ConnectionInfo)">
            <summary>
            Gets connection string for the specified <see cref="T:Xtensive.Orm.ConnectionInfo"/>.
            </summary>
            <param name="connectionInfo">Connection information to process.</param>
            <returns>Connection string for <paramref name="connectionInfo"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.GetDefaultSchema(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets <see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.
            </summary>
            <param name="connection"><see cref="T:System.Data.Common.DbConnection"/> to use.</param>
            <param name="transaction"><see cref="T:System.Data.Common.DbTransaction"/> to use.</param>
            <returns><see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.ReadDefaultSchema(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Reads <see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.
            </summary>
            <param name="connection"><see cref="T:System.Data.Common.DbConnection"/> to use.</param>
            <param name="transaction"><see cref="T:System.Data.Common.DbTransaction"/> to use.</param>
            <returns><see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> for the specified <paramref name="connection"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.CreateDriver(System.String,Xtensive.Sql.SqlDriverConfiguration)">
            <summary>
            Creates the driver from the specified <paramref name="connectionString"/>.
            </summary>
            <param name="connectionString">The connection string to create driver from.</param>
            <param name="configuration">Additional configuration for the driver.</param>
            <returns>Created driver.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverFactory.BuildConnectionString(Xtensive.Orm.UrlInfo)">
            <summary>
            Builds the connection string from the specified URL.
            </summary>
            <param name="connectionUrl">The connection URL.</param>
            <returns>Built connection string</returns>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.DriverFactory.BuildConnectionString(Xtensive.Orm.UrlInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.DriverFactory.CreateDriver(System.String,Xtensive.Sql.SqlDriverConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.DriverFactory.ReadDefaultSchema(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Sql.Drivers.SqlServer.ErrorMessageParser">
            <summary>
            Parser of SQL Server error messages.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.ErrorMessageParser.Parse(System.Int32,System.String)">
            <summary>
            Parses the specified <paramref name="message"/> according to its template
            and returns formatting arguments.
            Template is chosen by <paramref name="code"/>.
            This method acts as a reverse for internal string formatting routines in SQL Server.
            </summary>
            <param name="code">Message code to identify pattern.</param>
            <param name="message">Message to parse.</param>
            <returns>All placeholder values taken from message with their position numbers.</returns>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.ErrorMessageParser.ExtractQuotedText(System.String)">
            <summary>
            Helper method for parsing error messsages.
            It extracts anything found in single or double quotes.
            </summary>
            <returns>Text within the quotes if quotes are present,
            otherwise original <paramref name="text"/>.</returns>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.ErrorMessageParser.CutSchemaPrefix(System.String)">
            <summary>
            Helper method for parsing error messages.
            It cuts leading schema prefix (i.e. dbo) from table name.
            </summary>
            <param name="table">Table name</param>
            <returns><paramref name="table"/> with schema prefix removed.</returns>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.ErrorMessageParser.CutDatabaseAndSchemaPrefix(System.String)">
            <summary>
            Helper method for parsing error messages.
            It cuts leading database and schema prefix (i.e. master.dbo) from table name.
            </summary>
            <param name="table">Table name</param>
            <returns><paramref name="table"/> with database and schema prefix removed.</returns>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.v09.Compiler.Visit(Xtensive.Sql.Ddl.SqlAlterTable)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.v09.Compiler.Visit(Xtensive.Sql.Dml.SqlFunctionCall)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.v09.Compiler.#ctor(Xtensive.Sql.SqlDriver)">
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.v09.Translator.#ctor(Xtensive.Sql.SqlDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Drivers.SqlServer.v09.Translator"/> class.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="T:Xtensive.Sql.TypeMapper">
            <summary>
            Abstract base class for any value (data) type mapper.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.TypeMapper.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Drivers.SqlServer.v10.Compiler.Visit(Xtensive.Sql.Dml.SqlFunctionCall)">
            <inheritdoc/>
        </member>
        <member name="F:Xtensive.Sql.Drivers.SqlServer.v10.CustomSqlType.Geometry">
            <summary>
            Geometry, like in Microsoft.SqlServer.Types
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Drivers.SqlServer.v10.CustomSqlType.Geography">
            <summary>
            Geography, like in Microsoft.SqlServer.Types
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ColumnFeatures">
            <summary>
            <para>Defines possible column categories.</para>
            <para>This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute 
            that allows a bitwise combination of its member values.</para>
            </summary>
            <remarks>
            <para>It is well known that RDBMS servers stores data at table columns.
            Most of columns requires that their values have been specified by user
            but there are some exceptions of that rule (e.g. <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Identity"/>
            or <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Computed"/> columns).</para>
            <para>If you working on your own <see cref="T:Xtensive.Sql.SqlDriver">RDBMS driver</see> 
            implementation you have to provide correct <see cref="T:Xtensive.Sql.Info.ServerInfo">information</see>
            about RDBMS capabilities. As a consequence you have to specify what 
            column categories are supported (see example below).</para>
            </remarks>
            <example>
            </example>
        </member>
        <member name="F:Xtensive.Sql.Info.ColumnFeatures.None">
            <summary>
            RDBMS server does not support any special columns.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ColumnFeatures.Identity">
            <summary>
            RDBMS server supports identity columns.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ColumnFeatures.Computed">
            <summary>
            RDBMS server supports computed columns.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ColumnInfo">
            <summary>
            Describes a table column.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.EntityInfo">
            <summary>
            Describes a common database entity.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.EntityInfo.MaxIdentifierLength">
            <summary>
            Gets or sets maximal identifier length.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.EntityInfo.AllowedDdlStatements">
            <summary>
            Gets or sets allowed DDL statements for this instance.
            </summary>
            <value>Allowed DDL statements.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ColumnInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.AssertConstraintInfo">
            <summary>
            Describes assert constaint capabilities.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.CheckConstraintFeatures">
            <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.CheckConstraintInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.None">
            <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.Deferrable">
            <summary>
            Indicates that RDBMS supports deferrable check constraints.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.CheckConstraintInfo">
            <summary>
            Describes a check constraint capabilities.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.MaxExpressionLength">
            <summary>
            Gets or sets the maximal length of the check expression.
            </summary>
            <value>The maximal length of the check expression.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintActions">
            <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.None">
            <summary>
            No actions are supported.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.NoAction">
            <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Restrict">
            <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Cascade">
            <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetDefault">
            <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetNull">
            <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintFeatures">
            <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.None">
            <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.Deferrable">
            <summary>
            Indicates that RDBMS supports deferrable foreign key constraints.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo">
            <summary>
            Describes a reference constraint capabilities.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Actions">
            <summary>
            Gets or sets the constraint rules.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures">
            <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.None">
            <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Clustered">
            <summary>
            Indicates that primary key constraints can be declared clustered.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Nullable">
            <summary>
            Indicates that primary key constraints can be applied to nullable columns.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo">
            <summary>
            Describes a primary key constraint capabilities.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.PrimaryKeyConstraintInfo.ConstantName">
            <summary>
            Gets or sets the constant name of the primary key constraint.
            </summary>
            <remarks>This is done for mysql support only. Its' primary keys have always 'PRIMARY' name.</remarks>
            <value>The constant name of the primary key constraint.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.PrimaryKeyConstraintInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.UniqueConstraintFeatures">
            <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.UniqueConstraintInfo"/>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.None">
            <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Clustered">
            <summary>
            Indicates that unique key constraints can be declared clustered.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Nullable">
            <summary>
            Indicates that unique key constraints can be applied to nullable columns.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.UniqueConstraintInfo">
            <summary>
            Describes a unique constaint capabilities
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.UniqueConstraintInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.CoreServerInfo">
            <summary>
            A information required for creating a driver.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CoreServerInfo.ServerVersion">
            <summary>
            Gets or sets the server version.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CoreServerInfo.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CoreServerInfo.DatabaseName">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CoreServerInfo.DefaultSchemaName">
            <summary>
            Gets or sets the default name of the schema.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.CoreServerInfo.MultipleActiveResultSets">
            <summary>
            Gets or sets a value indicating whether multiple active result sets are supported.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.DataTypeCollection">
            <summary>
            Represents a collection of <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/> objects that describes all data types existing in database.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeCollection.Add(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeInfo)">
            <summary>
            Adds the specified type SqlType and the corresponding him to dataTypeInfo to the list of supported types in a specific version of the DBMS.
            </summary>
            <param name="sqlType">The sqlType to add.</param>
            <param name="dataTypeInfo">The dataTypeInfo to add.</param>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeCollection.System#Collections#Generic#IEnumerable{Xtensive#Sql#Info#DataTypeInfo}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/> by the specified native type name.
            </summary>
            <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/> instance.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(Xtensive.Sql.SqlType)">
            <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/> by the specified <see cref="T:Xtensive.Sql.SqlType"/>.
            </summary>
            <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/> instance.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Boolean">
            <summary>
            Boolean (bit).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int8">
            <summary>
            Signed Byte (8 bit integer).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt8">
            <summary>
            Unsigned byte.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int16">
            <summary>
            Small integer (16 bit integer).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt16">
            <summary>
            Unsigned small integer (word).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int32">
            <summary>
            Integer (32 bit integer).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt32">
            <summary>
            Unsigned integer.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int64">
            <summary>
            Long integer (64 bit integer).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt64">
            <summary>
            Unsigned long integer.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Decimal">
            <summary>
            Numeric data type with fixed precision and scale.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Float">
            <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Double">
            <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.DateTime">
            <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.DateTimeOffset">
            <summary>
            Date and time data from January 1,1 A.D. through December 31, 9999 A.D., 
            to an accuracy of 100 nanoseconds.
            Storage size is 8 to 10 bytes. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Interval">
            <summary>
            A representation of the interval data type.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Char">
            <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarChar">
            <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarCharMax">
            <summary>
            Variable-length Unicode data with a maximum length of 230 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Binary">
            <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinary">
            <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinaryMax">
            <summary>
            Variable-length binary data from 0 through 231-1 (2,147,483,647) bytes. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeCollection.Guid">
            <summary>
            A globally unique identifier (GUID). 
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.DataTypeFeatures">
            <summary>
            Defines a list of features those are allows to describe
            RDBMS capabilities concerning a certain data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.None">
            <summary>
            Indicates that RDBMS supports nothing additional
            for the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.FillFactor">
            <summary>
            Indicates that RDBMS supports fill factor property
            for the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.KeyConstraint">
            <summary>
            Indicates that RDBMS allows key constraints
            for the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Multiple">
            <summary>
            Indicates that RDBMS allows multiple columns
            of the mentioned data type in a single table.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Nullable">
            <summary>
            Indicates that RDBMS allows null values
            for the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Identity">
            <summary>
            Indicates that RDBMS allows to declare identity
            column of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Default">
            <summary>
            Indicates that RDBMS allows to specify default value
            for a column of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Grouping">
            <summary>
            Indicates that RDBMS supports grouping operations
            by columns of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Ordering">
            <summary>
            Indicates that RDBMS supports ordering operations
            by columns of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Clustering">
            <summary>
            Indicates that RDBMS allows to build clustered index
            which includes key columns of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Indexing">
            <summary>
            Indicates that RDBMS allows to build index
            which includes key columns of the mentioned data type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.NonKeyIndexing">
            <summary>
            Indicates that RDBMS allows to include column of the 
            mentioned data type as non-key part of some index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.ZeroLengthValueIsNull">
            <summary>
            Indicates that RDBMS treats zero length value as NULL.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Spatial">
            <summary>
            Indicates that RDBMS allows to build spatial index.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.DataTypeInfo">
            <summary>
            Describes a data type.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeInfo.Fractional(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.Int32,System.String[])">
            <summary>
            Creates a fractional <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeInfo.Range(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.String[])">
            <summary>
            Ranges a range <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeInfo.Stream(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.Int32,System.String[])">
            <summary>
            Creates a stream <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DataTypeInfo.Regular(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.String[])">
            <summary>
            Creates a regular <see cref="T:Xtensive.Sql.Info.DataTypeInfo"/>
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.Type">
            <summary>
            Gets the SQL type
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.Features">
            <summary>
            Gets the features of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.NativeTypes">
            <summary>
            Gets the native database type names.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxLength">
            <summary>
            Gets the maximum length of this data type.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxPrecision">
            <summary>
            Gets the maximum precision of this data type.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DataTypeInfo.ValueRange">
            <summary>
            Gets the range.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.DdlStatements">
            <summary>
            Enumerates possible Data Definition Language(DDL) statements
            in accordance with SQL92 standard.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.None">
            <summary>
            Indicates that RDBMS does not support any DDL statement
            for the mentioned database entity.
            </summary>
            <value>0x0</value>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.Create">
            <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Create"/> statement
            for the mentioned database entity.
            For constraints this indicates that RDBMS supports ADD statement.
            </summary>
            <value>0x1</value>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.Alter">
            <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Alter"/> statement
            for the mentioned database entity.
            </summary>
            <value>0x2</value>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.Drop">
            <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Drop"/> statement
            for the mentioned database entity.
            </summary>
            <value>0x4</value>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.Rename">
            <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Rename"/> statement
            for the mentioned database entity.
            </summary>
            <value>0x4</value>
        </member>
        <member name="F:Xtensive.Sql.Info.DdlStatements.All">
            <summary>
            Indicates that RDBMS supports all DDL statements
            for the mentioned database entity.
            </summary>
            <value>0x7</value>
        </member>
        <member name="T:Xtensive.Sql.Info.DefaultSchemaInfo">
            <summary>
            Default schema information for a particular connection.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.DefaultSchemaInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="database">Value for <see cref="P:Xtensive.Sql.Info.DefaultSchemaInfo.Database"/>.</param>
            <param name="schema">Value for <see cref="P:Xtensive.Sql.Info.DefaultSchemaInfo.Schema"/>.</param>
        </member>
        <member name="P:Xtensive.Sql.Info.DefaultSchemaInfo.Database">
            <summary>
            Gets default database.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.DefaultSchemaInfo.Schema">
            <summary>
            Gets default schema.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.FeaturesExtensions">
            <summary>
            Various extension methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.QueryFeatures,Xtensive.Sql.Info.QueryFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.IndexFeatures,Xtensive.Sql.Info.IndexFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.DataTypeFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ForeignKeyConstraintFeatures,Xtensive.Sql.Info.ForeignKeyConstraintFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ColumnFeatures,Xtensive.Sql.Info.ColumnFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ServerFeatures,Xtensive.Sql.Info.ServerFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.IdentityFeatures,Xtensive.Sql.Info.IdentityFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.UniqueConstraintFeatures,Xtensive.Sql.Info.UniqueConstraintFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.PrimaryKeyConstraintFeatures,Xtensive.Sql.Info.PrimaryKeyConstraintFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.TemporaryTableFeatures,Xtensive.Sql.Info.TemporaryTableFeatures)">
            <summary>
            Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.DdlStatements,Xtensive.Sql.Info.DdlStatements)">
            <summary>
             Determines whether the specified active features is supported.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.FullTextSearchFeatures">
            <summary>
            Defines full-text options.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.None">
            <summary>
            Indicates that RDBMS doesn't support full-text at all.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.SingleKeyRankTable">
            <summary>
            Indicates that RDBMS uses table with 'KEY' and 'RANK' columns.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.Full">
            <summary>
            Indicates that RDBMS supports column functions to calculate full-text rank.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.FullTextSearchInfo">
            <summary>
            Describes a full-text capabilities of a database server.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.FullTextSearchInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.IdentityFeatures">
            <summary>
            <para>Defines a list of typical features of identity columns.</para>
            <para>You can combine this features to describe certain RDBMS capabilities.</para>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IdentityFeatures.None">
            <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IdentityFeatures.Seed">
            <summary>
            Indicates that RDBMS allows to specify seed value
            for identity columns.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IdentityFeatures.Increment">
            <summary>
            Indicates that RDBMS allows to specify increment value
            for identity columns.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IdentityFeatures.AutoIncrement">
            <summary>
            Indicates that RDBMS supports automatically incrementing
            identity columns.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.IdentityInfo">
            <summary>
            Describes an identity source.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.IdentityInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.IndexFeatures">
            <summary>
            <para>Defines a list of possible index features.</para>
            <para>You can combine this features to describe certain RDBMS capabilities.</para>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.None">
            <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.Clustered">
            <summary>
            Indicates that RDBMS supports clustered indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.NonKeyColumns">
            <summary>
            Indicates that RDBMS allows to include some columns as
            non key part of an index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.FillFactor">
            <summary>
            Indicates that RDBMS allows to specify fill factor for an index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.Unique">
            <summary>
            Indicates that RDBMS supports unique indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.MaxDop">
            <summary>
            Indicates that RDBMS allows to specify max degree of parallelism
            parameter for an index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.FullText">
            <summary>
            Indicates that RDBMS supports full-text indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.SortOrder">
            <summary>
            Indicates that RDBMS supports specifying sort order (i.e. asc or desc) for each column in index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.Filtered">
            <summary>
            Indicates that RDBMS supports filtered/partial indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IndexFeatures.Expressions">
            <summary>
            Indicates that RDBMS supports indexes, based on expressions.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.IndexInfo">
            <summary>
            Describes an index.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.IndexInfo.MaxLength">
            <summary>
            Gets or sets the maximal index length in bytes.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.IndexInfo.MaxNumberOfColumns">
            <summary>
            Gets or sets the maximum number of columns per index.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.IndexInfo.PartitionMethods">
            <summary>
            Gets or sets supported partition methods.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.IndexInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.IsolationLevels">
            <summary>
            <para>Defines a list of possible transaction isolation levels.</para>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.None">
            <summary>
            Indicates that RDBMS does not support transaction isolation.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadUncommitted">
            <summary>
            Indicates that RDBMS allows to execute transactions without isolation.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted">
            <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted"/> isolation level.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead">
            <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead"/> isolation level.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.Serializable">
            <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Serializable"/> isolation level.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.IsolationLevels.Snapshot">
            <summary>
            Indicates that RDBMS allows to execute transactions with
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Snapshot"/> isolation level.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.PartitionMethods">
            <summary>
            <para>Defines a list of possible horisontal partitioning types.</para>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PartitionMethods.None">
            <summary>
            Indicates that RDBMS does not support partitioning.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PartitionMethods.List">
            <summary>
            Indicates that RDBMS supports list partitioning.
            List partitioning enables you to explicitly control how rows map to partitions
            by specifying a list of discrete values in the description for each partition.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PartitionMethods.Range">
            <summary>
            Indicates that RDBMS supports range partitioning.
            Range partitioning maps data to partitions
            based on ranges of partition key values that you establish for each partition.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PartitionMethods.Hash">
            <summary>
            Indicates that RDBMS supports hash partitioning.
            Hash partitioning maps data to partitions
            based on a hashing algorithm that evenly distributes rows among partitions,
            giving partitions approximately the same size.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.PartitionMethods.Interval">
            <summary>
            Indicates that RDBMS supports interval partitioning.
            Interval partitioning is an extension of range partitioning
            which instructs the database to automatically create partitions
            of a specified interval when data inserted into the table exceeds all of the range partitions.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.QueryFeatures">
            <summary>
            Defines a list of features which affects query generation.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.None">
            <summary>
            There are no features affecting query generation.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters">
            <summary>
            Indicates that it is possible to use named query parameters.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.ParameterPrefix">
            <summary>
            Indicates that parameter prefix should be used for parameter names
            (in the case when <see cref="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters"/> option is active).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.ExplicitJoinOrder">
            <summary>
            Indicates that RDBMS requires multi-table joins to have explicit order.
            (like "(a join b) join c")
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.DdlBatches">
            <summary>
            Indicates that RDBMS supports batch query execution for DDL statements.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.DmlBatches">
            <summary>
            Indicates that RDBMS supports batch query execution for DML statements.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.Hints">
            <summary>
            Indicates that RDBMS supports query optimizer hints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.CrossApply">
            <summary>
            Indicates that RDBMS supports CROSS APPLY and OUTER APPLY operators.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.FullBooleanExpressionSupport">
            <summary>
            Indicates that RDBMS allows boolean expressions in equality/inequality comparisons,
            inside CASE and COALESCE operators.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.UpdateFrom">
            <summary>
            Indicates that RDBMS supports UPDATE ... FROM statements.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.DeleteFrom">
            <summary>
            Indicates that RDBMS supports DELETE ... FROM statements.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.Limit">
            <summary>
            Indicates that RDBMS supports result limiting operator (LIMIT and TOP).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.Offset">
            <summary>
            Indicates that RDBMS supports result skipping operator (OFFSET and SKIP).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.MulticolumnIn">
            <summary>
            Indicates that RDBMS supports multicolumn IN operator.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.RowNumber">
            <summary>
            Indicates whether RDBMS supports ROW_NUMBER window function.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.ScalarSubquery">
            <summary>
            Indicates whether RDBMS supports subqueries that return a scalar result.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.InsertDefaultValues">
            <summary>
            Indicates whether RDBMS supports INSERT INTO Table DEFAULT VALUES syntax.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.UpdateDefaultValues">
            <summary>
            Indicates whether RDBMS supports UPDATE Table SET COLUMN = DEFAULT syntax.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.MultischemaQueries">
            <summary>
            Indicates whether RDBMS supports accessing multiple schemasin single statement.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.MultidatabaseQueries">
            <summary>
            Indicates whether RDBMS supports accessing multiple databases in single statement.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.PagingRequiresOrderBy">
            <summary>
            Indicates whether RDBMS requires "order by" clause when "limit" or "offset" is used.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.ZeroLimitIsError">
            <summary>
            Indicates whether RDBMS raises error when "limit 0" clause is provided.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.StrictJoinSyntax">
            <summary>
            Indicates whether RDBMS is strict about join syntax.
            This means recursive syntax "A join B join C on B.b = C.c on A.a = B.b" could not be used.
            Linear syntax "A join B on A.a = B.b join C on B.b = C.c" should be used instead.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.SelfReferencingRowRemovalIsError">
            <summary>
            Indicates whether RDBMS does not support removal of rows, which have reference to itself.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.Paging">
            <summary>
            Indicates that RDBMS supports paging operators (<see cref="F:Xtensive.Sql.Info.QueryFeatures.Limit"/> and <see cref="F:Xtensive.Sql.Info.QueryFeatures.Offset"/>).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.QueryFeatures.Batches">
            <summary>
            Indicates that RDBMS supports batches for both DDL and DML statements.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.QueryInfo">
            <summary>
            Describes a query.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.QueryInfo.MaxLength">
            <summary>
            Gets or sets the maximal length of a query text in characters.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.QueryInfo.MaxComparisonOperations">
            <summary>
            Gets or sets the maximal number of comparison operations for a single query.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.QueryInfo.MaxNestedSubqueriesAmount">
            <summary>
            Gets or sets the nested subqueries amount.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.QueryInfo.ParameterPrefix">
            <summary>
            Gets or sets the Parameter prefix.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.QueryInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.SequenceFeatures">
            <summary>
            Defines a list of sequence related features.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.SequenceFeatures.None">
            <summary>
            Indicates that RDBMS server does not support anything special
            regarding sequences.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.SequenceFeatures.Cache">
            <summary>
            Indicates that RDBMS supports caching of sequence values
            (i.e. it would be possible to take several sequential values at a time
            and then use those values without access to sequence object).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.SequenceFeatures.Order">
            <summary>
            Indicates that RDBMS allows to specify for a sequence an 
            order of generated values (ascending or descending).
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.SequenceInfo">
            <summary>
            Describes a sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.SequenceInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.ServerFeatures">
            <summary>
            Features of RBMS.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.None">
            <summary>
            Empty option set.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.LargeObjects">
            <summary>
            Indicates that RDBMS uses large objects (LOBs) for manipulating large data chunks.
            <seealso cref="T:Xtensive.Sql.ICharacterLargeObject"/>.
            <seealso cref="T:Xtensive.Sql.IBinaryLargeObject"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters">
            <summary>
            Indicates that RDBMS supports cursor parameters.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.MultipleResultsViaCursorParameters">
            <summary>
            Indicates whether RDBMS supports returning multiple results via cursor parameters.
            Does matter only if <see cref="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters"/> feature is avaliable.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.Savepoints">
            <summary>
            Indicates whether RDBMS supports savepoints.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.TransactionalDdl">
            <summary>
            Indicates whether RDBMS supports transactional DDL
            (except full-text indexes which have separate option).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.TransactionalFullTextDdl">
            <summary>
            Indicates whether RDBMS supports transactional DDL for full-text indexes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.TransactionalKeyGenerators">
            <summary>
            Indicates whether RDBMS uses key generators that adhere to transaction boundaries.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.ExclusiveWriterConnection">
            <summary>
            Indicates whether RDBMS allows only one session to modify database.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.TemporaryTableEmulation">
            <summary>
            Indicates whether RDBMS will perform well if regular tables are used
            instead of temporary. This has effect only if database does not support
            local temporary tables.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.SingleConnection">
            <summary>
            Indicates whether RDBMS requires exactly one connection to be created.
            This is used for :memory: data source in SQLite provider.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.FullTextColumnDataTypeSpecification">
            <summary>
            Indicates whether RDBMS supports type of data specification for columns in full text index.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ServerFeatures.SingleSessionAccess">
            <summary>
            Obsolete name for <see cref="F:Xtensive.Sql.Info.ServerFeatures.ExclusiveWriterConnection"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ServerInfo">
            <summary>
            Represents a set of information concerning RDBMS capabilities.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfo.Build(Xtensive.Sql.Info.ServerInfoProvider)">
            <summary>
            Builds the server info using specified <see cref="T:Xtensive.Sql.Info.ServerInfoProvider"/>.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Xtensive.Sql.Info.ServerInfo.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.IsolationLevels">
            <summary>
            Gets the server supported isolation levels.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.FullTextSearch">
            <summary>
            Gets the server supported isolation levels.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Assertion">
            <summary>
            Gets the assertion constraint info.
            </summary>
            <value>The assertion constraint info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.CharacterSet">
            <summary>
            Gets the character set info.
            </summary>
            <value>The character set info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Collation">
            <summary>
            Gets the collation info.
            </summary>
            <value>The collation info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Column">
            <summary>
            Gets the column info.
            </summary>
            <value>The column info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.CheckConstraint">
            <summary>
            Gets the check constraint info.
            </summary>
            <value>The check constraint info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Database">
            <summary>
            Gets the database info.
            </summary>
            <value>The database info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Domain">
            <summary>
            Gets the domain info.
            </summary>
            <value>The domain info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Identity">
            <summary>
            Gets the identity info.
            </summary>
            <value>The identity info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Index">
            <summary>
            Gets the index info.
            </summary>
            <value>The index info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.PrimaryKey">
            <summary>
            Gets the primary key constraint info.
            </summary>
            <value>The primary key constraint info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Query">
            <summary>
            Gets the query info.
            </summary>
            <value>The query info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.ForeignKey">
            <summary>
            Gets the referential constraint info.
            </summary>
            <value>The referential constraint info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Schema">
            <summary>
            Gets the schema info.
            </summary>
            <value>The schema info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Sequence">
            <summary>
            Gets the sequence info.
            </summary>
            <value>The sequence info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.StoredProcedure">
            <summary>
            Gets the stored procedure info.
            </summary>
            <value>The stored procedure info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Table">
            <summary>
            Gets the table info.
            </summary>
            <value>The table info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.TemporaryTable">
            <summary>
            Gets the temporary table info.
            </summary>
            <value>The temporary table info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Translation">
            <summary>
            Gets the translation info.
            </summary>
            <value>The translation info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.Trigger">
            <summary>
            Gets the trigger info.
            </summary>
            <value>The trigger info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.UniqueConstraint">
            <summary>
            Gets the unique constraint info.
            </summary>
            <value>The unique constraint info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.View">
            <summary>
            Gets the view info.
            </summary>
            <value>The view info.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.DataTypes">
            <summary>
            Gets the data types.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.ServerFeatures">
            <summary>
            Gets the server features.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ServerInfo.StringIndexingBase">
            <summary>
            Gets the string indexing base. Normally is equal to 1.
            </summary>
            <value>The string indexing base.</value>
        </member>
        <member name="T:Xtensive.Sql.Info.TableInfo">
            <summary>
            Describes a table.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.TableInfo.PartitionMethods">
            <summary>
            Gets supported partition methods.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.TableInfo.MaxNumberOfColumns">
            <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.TemporaryTableFeatures">
            <summary>
            Defines a list of possible temporary table features.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.None">
            <summary>
            Indicates that RDBMS does not support temporary tables.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Global">
            <summary>
            Indicates that RDBMS supports globally visible temporary tables.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Local">
            <summary>
            Indicates that RDBMS supports temporary tables
            which are visible only in a local context.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.DeleteRowsOnCommit">
            <summary>
            Indicates that RDBMS allows to delete rows on commit.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.PreserveRowsOnCommit">
            <summary>
            Indicates that RDBMS allows to preserve rows on commit.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.TemporaryTableInfo">
            <summary>
            Describes a temporary table.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.Features">
            <summary>
            Gets or sets the features of this instance.
            </summary>
            <value>The features.</value>
        </member>
        <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.MaxNumberOfColumns">
            <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ValueRange">
            <summary>
            Represents a contiguous range of values.
            </summary>
            <summary>
            Provides a <see cref="T:Xtensive.Sql.Info.ValueRange`1"/>s for standard .Net struct types.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange.GetMinValue">
            <summary>
            Gets the min value.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange.GetMaxValue">
            <summary>
            Gets the max value.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange.HasDefaultValue">
            <summary>
            Determines whether default value has been specified.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Bool">
            <summary>
            Standard value range for <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Char">
            <summary>
            Standard value range for <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.SByte">
            <summary>
            Standard value range for <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Int16">
            <summary>
            Standard value range for <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Int32">
            <summary>
            Standard value range for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Int64">
            <summary>
            Standard value range for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Byte">
            <summary>
            Standard value range for <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.UInt16">
            <summary>
            Standard value range for <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.UInt32">
            <summary>
            Standard value range for <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.UInt64">
            <summary>
            Standard value range for <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Float">
            <summary>
            Standard value range for <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Double">
            <summary>
            Standard value range for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.Decimal">
            <summary>
            Standard value range for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.DateTime">
            <summary>
            Standard value range for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.DateTimeOffset">
            <summary>
            Standard value range for <see cref="T:System.DateTimeOffset"/>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ValueRange.TimeSpan">
            <summary>
            Standard value range for <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Info.ValueRange`1">
            <summary>
            Represents a strictly typed contiguous range of values.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0,System.Nullable{`0})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Xtensive.Sql.Info.ValueRange`1.MinValue">
            <summary>
            A minimum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ValueRange`1.MaxValue">
            <summary>
            A maximum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Info.ValueRange`1.DefaultValue">
            <summary>
            A default value from the <see cref="T:Xtensive.Sql.Info.ValueRange`1"/>.
            </summary>
            <value>
            A value belonging to the <see cref="T:Xtensive.Sql.Info.ValueRange`1"/>
            or <see langword="null"/> if not specified.
            </value>
        </member>
        <member name="T:Xtensive.Sql.Info.ViewFeatures">
            <summary>
            Defines a list of RDBMS dependent view features.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ViewFeatures.None">
            <summary>
            Indicates that RDBMS does not support features from this list.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ViewFeatures.Local">
            <summary>
            Indicates that RDBMS allows to create local views
            those are visible only in current execution context.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Info.ViewFeatures.Cascaded">
            <summary>
            Indicates that RDBMS allows to create views based on
            some other views instead of tables.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.IBinaryLargeObject">
            <summary>
            A contract for server-independent native binary large objects (BLOBs) query parameter.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ILargeObject">
            <summary>
            A contract for server-independent native large objects (LOBs) query parameter.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.ILargeObject.Nullify">
            <summary>
            Nullifies this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.ILargeObject.Erase">
            <summary>
            Erases this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.ILargeObject.BindTo(System.Data.Common.DbParameter)">
            <summary>
            Binds this LOB to the specified parameter.
            </summary>
            <param name="parameter">The parameter to bind to.</param>
        </member>
        <member name="P:Xtensive.Sql.ILargeObject.IsNull">
            <summary>
            Gets a value indicating whether this instance is null.
            </summary>
            <value>
            <see langword="true"/> if this instance is null; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.ILargeObject.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
            <see langword="true"/> if this instance is empty; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Xtensive.Sql.IBinaryLargeObject.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The length.</param>
        </member>
        <member name="T:Xtensive.Sql.ICharacterLargeObject">
            <summary>
            A contract for server-independent character large objects (CLOBs) query parameter.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.ICharacterLargeObject.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The length.</param>
        </member>
        <member name="T:Xtensive.Sql.BoundaryType">
            <summary>
            Specifies to which side of each boundary value interval, left or right, the boundary value
            belongs.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.BoundaryType.Default">
            <summary>
            Default value is equal to <see cref="F:Xtensive.Sql.BoundaryType.Left"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.BoundaryType.Left">
            <summary>
            Specifies that boundary value belongs to the left side of boundary value interval.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.BoundaryType.Right">
            <summary>
            Specifies that boundary value belongs to the right side of boundary value interval.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Catalog">
            <summary>
            Represents a single database catalog that can contain multiple database schemas.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Node">
            <summary>
            Represents base lockable named node.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Node.Name">
            <summary>
            Gets or sets a name of the node.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Node.DbName">
            <summary>
            Gets or sets a db name of the node.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Catalog.CreateSchema(System.String)">
            <summary>
            Creates a schema.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionFunction(System.String,Xtensive.Sql.SqlValueType,System.String[])">
            <summary>
            Creates the partition function.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the input parameter.</param>
            <param name="boundaryValues">The boundary values.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionSchema(System.String,Xtensive.Sql.Model.PartitionFunction,System.String[])">
            <summary>
            Creates the partition schema.
            </summary>
            <param name="name">The name.</param>
            <param name="partitionFunction">The partition function.</param>
            <param name="filegroups">The filegroups.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Catalog.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Catalog.DefaultSchema">
            <summary>
            Default <see cref="T:Xtensive.Sql.Model.Schema"/> of this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.Catalog.Schemas">
            <summary>
            Gets the schemas.
            </summary>
            <value>The schemas.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Catalog.PartitionFunctions">
            <summary>
            Gets the partition functions.
            </summary>
            <value>The partition functions.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Catalog.PartitionSchemas">
            <summary>
            Gets the partition schemes.
            </summary>
            <value>The partition schemes.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.CatalogNode">
            <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog"/> bound object.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.IPairedNode`1">
            <summary>
            Describes an object that is paired with some <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.IPairedNode`1.UpdatePairedProperty(System.String,`0)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.CatalogNode.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
            <summary>
            Changes the catalog.
            </summary>
            <param name="value">The new value of catalog property.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.CatalogNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Catalog}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Catalog)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.CatalogNode.#ctor(Xtensive.Sql.Model.Catalog,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.CatalogNode"/> class.
            </summary>
            <param name="catalog">The catalog.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.CatalogNode.Catalog">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog"/> this instance belongs to.
            </summary>
            <value>The catalog this instance belongs to.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.CharacterSet">
            <summary>
            Represents a character set object.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.SchemaNode">
            <summary>
            Represents any <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema"/> bound <see cref="T:Xtensive.Sql.Model.Node"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.SchemaNode.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SchemaNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Schema}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Schema)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SchemaNode.#ctor(Xtensive.Sql.Model.Schema,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SchemaNode"/> class.
            </summary>
            <param name="schema">The schema.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.SchemaNode.Schema">
            <summary>
            <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema"/> instance this instance belongs to.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.CharacterSet.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Xtensive.Sql.CheckOptions">
            <summary>
            Levels of checking to be done when inserting or updating data through a view.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.CheckOptions.Default">
            <summary>
            The same as <see cref="F:Xtensive.Sql.CheckOptions.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.CheckOptions.None">
            <summary>
            None check options are set.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.CheckOptions.Local">
            <summary>
            This option is identical to <see cref="F:Xtensive.Sql.CheckOptions.Cascaded"/> option except that you can update 
            a row so that it no longer can be retrieved through the view. 
            This can only happen when the view is directly or indirectly dependent on a view 
            that was defined with no WITH CHECK OPTION clause.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.CheckOptions.Cascaded">
            <summary>
            This option specifies that every row that is inserted or updated through the view 
            must conform to the definition of the view. In addition, the search conditions 
            of all dependent views are checked when a row is inserted or updated. If a row 
            does not conform to the definition of the view, that row cannot be retrieved using the view.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Collation">
            <summary>
            Represents a collation object thst specifies the rules for how strings 
            of character data are sorted and compared, based on the norms of 
            particular languages and locales.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Collation.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Xtensive.Sql.Model.Assertion">
            <summary>
            Represents a named constraint that may relate to the content
            of individual rows of a table, to the entire contents of a table,
            or to a state required to exist among a number of tables.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Assertion.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Assertion.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Assertion.Condition">
            <summary>
            Gets or sets the check condition for this instance.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Assertion.IsDeferrable">
            <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.Assertion.IsInitiallyDeferred">
            <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Sql.Model.CheckConstraint">
            <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table"/> check constraint.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.TableConstraint">
            <summary>
            Represents a base <see cref="P:Xtensive.Sql.Model.TableConstraint.Table"/> constraint object.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Constraint`1">
            <summary>
            Represents integrity constraint object.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Constraint">
            <summary>
            Represents integrity constraint object.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Constraint.IsDeferrable">
            <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.Constraint.IsInitiallyDeferred">
            <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.Constraint.Condition">
            <summary>
            Gets or sets the check condition for this instance.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.Constraint`1.ChangeOwner(`0)">
            <summary>
            Changes the owner.
            </summary>
            <param name="value">The owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Constraint`1.Xtensive#Sql#Model#IPairedNode{T}#UpdatePairedProperty(System.String,`0)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Constraint`1.Owner">
            <summary>
            Gets or sets the constraint owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.TableConstraint.ChangeOwner(Xtensive.Sql.Model.Table)">
            <summary>
            Changes the table.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="isDeferrable">Is constraint deferrable.</param>
            <param name="isInitiallyDeferred">Is constraint initially deferred.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.TableConstraint.Table">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableConstraint.Table"/> this instance belongs to.
            </summary>
            <value>The table.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.DefaultConstraint">
            <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table"/> default constraint.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.DefaultConstraint.Column">
            <summary>
            Gets the column.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.DefaultConstraint.NameIsStale">
            <summary>
            Gets or sets value indicates that name of constraint is stale.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.DomainConstraint">
            <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain"/> constraint object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.DomainConstraint.ChangeOwner(Xtensive.Sql.Model.Domain)">
            <summary>
            Changes the domain.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.DomainConstraint.Domain">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain"/> this instance belongs to.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.ForeignKey">
            <summary>
            Represents a foreign key constraint that provides referential integrity 
            for the data in the column or columns. <see cref="T:Xtensive.Sql.Model.ForeignKey"/> constraints require that 
            each value in the column exists in the corresponding referenced column or columns 
            in the referenced table.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.ForeignKey.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.Columns">
            <summary>
            Gets the referencing columns.
            </summary>
            <value>The referencing columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedColumns">
            <summary>
            Gets the referenced columns.
            </summary>
            <value>The referenced columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedTable">
            <summary>
            Gets or sets the referenced table.
            </summary>
            <value>The referenced table.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.MatchType">
            <summary>
            Match type.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.OnUpdate">
            <summary>
            Specifies what action happens to rows in the table
            when those rows have a referential relationship
            and the referenced row is updated in the parent table.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.ForeignKey.OnDelete">
            <summary>
            Specifies what action happens to rows in the table,
            if those rows have a referential relationship and
            the referenced row is deleted from the parent table.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Sql.Model.PrimaryKey">
            <summary>
            Represents primary key constraint.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.UniqueConstraint">
            <summary>
            Represents unique table constraint.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.UniqueConstraint.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.UniqueConstraint.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.DataTable">
            <summary>
            An base class for <see cref="T:Xtensive.Sql.Model.Table"/> and <see cref="T:Xtensive.Sql.Model.View"/> types.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTable.CreateIndex(System.String)">
            <summary>
            Creates the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTable.CreateFullTextIndex(System.String)">
            <summary>
            Creates the full-text index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTable.CreateSpatialIndex(System.String)">
            <summary>
            Creates the spatial index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTable.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTable.#ctor(Xtensive.Sql.Model.Schema,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTable"/> class.
            </summary>
            <param name="schema">The schema.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.DataTable.Indexes">
            <summary>
            Gets the indexes.
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.DataTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.DataTableColumn">
            <summary>
            Represent a <see cref="T:Xtensive.Sql.Model.DataTable"/> bound column.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.DataTableNode">
            <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable"/> bound object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTableNode.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
            <summary>
            Changes the data table.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTableNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#DataTable}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.DataTable)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTableNode.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableNode"/> class.
            </summary>
            <param name="dataTable">The dataTable.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.DataTableNode.DataTable">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable"/> this instance belongs to.
            </summary>
            <value>The dataTable this instance belongs to.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.DataTableColumn.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableColumn"/> class.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Xtensive.Sql.Model.Domain">
            <summary>
            Represents a domain object that is a set of permissible values. 
            A domain is defined in a schema and is identified by a domain name. 
            The purpose of a domain is to constrain the set of valid values 
            that can be stored in SQL-data by various operations.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.IConstrainable">
            <summary>
            Represents a node that is capable of being constrained.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.IConstrainable.Constraints">
            <summary>
            Gets the node constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.Domain.CreateConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Creates the domain constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Domain.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Domain.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Domain.DataType">
            <summary>
            Gets or sets the data type of the domain.
            </summary>
            <value>The data type.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Domain.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Domain.Collation">
            <summary>
            Gets or sets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Domain.DomainConstraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Domain.Xtensive#Sql#Model#IConstrainable#Constraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.FullTextIndex">
            <summary>
            Represents full-text index.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Index">
            <summary>
            Represents an index.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.IPartitionable">
            <summary>
            Defines an object that supports partitioning.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.IPartitionable.PartitionDescriptor">
            <summary>
            Gets or sets the partition descriptor.
            </summary>
            <value>The partition descriptor.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
            <summary>
            Creates the index column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn,System.Boolean)">
            <summary>
            Creates the index column.
            </summary>
            <param name="column">The column.</param>
            <param name="ascending">The sort direction.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Creates the index column.
            </summary>
            <param name="expression">The expression.</param>
            <returns><see cref="T:Xtensive.Sql.Model.IndexColumn"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression,System.Boolean)">
            <summary>
            Creates the index column.
            </summary>
            <param name="expression">The expression.</param>
            <returns><see cref="T:Xtensive.Sql.Model.IndexColumn"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
            <summary>
            Changes the data table.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Index.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.Columns">
            <summary>
            Columns, this instance is based on.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.NonkeyColumns">
            <summary>
            Non key columns to be added to the the index.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.Where">
            <summary>
            Gets or sets the index filter expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.IsUnique">
            <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.IsFullText">
            <summary>
            Gets or sets the value indicating that this index is full-text index.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.IsSpatial">
            <summary>
            Gets or sets the value indicating that this index is spatial index.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.IsBitmap">
            <summary>
            Gets or sets the value indicating that this index is bitmap index.
            A bitmap index is a special kind of index that stores the bulk of its data as bitmaps 
            and answers most queries by performing bitwise logical operations on these bitmaps.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.IsClustered">
            <summary>
            Gets or sets the value indicating that this index is clustered index.
            Clustered index is the index in which the logical order of the key values 
            determines the physical order of the corresponding rows in a table. 
            The bottom, or leaf, level of the clustered index contains the actual data rows 
            of the table. A table or view is allowed one clustered index at a time.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.FillFactor">
            <summary>
            Specifies a percentage that indicates how full the database server should make the leaf level 
            of each index page during index creation or rebuild. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.Filegroup">
            <summary>
            Gets or sets the value indicating that specified index will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the index uses the same filegroup 
            as the underlying table or view.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Index.PartitionDescriptor">
            <summary>
            Gets or sets the partition descriptor.
            </summary>
            <value>The partition descriptor.</value>
        </member>
        <member name="M:Xtensive.Sql.Model.FullTextIndex.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
            <summary>
            Creates the full-text index column.
            </summary>
            <param name="column">The column.</param>
            <returns>Newly created <see cref="T:Xtensive.Sql.Model.IndexColumn"/> object.</returns>
        </member>
        <member name="P:Xtensive.Sql.Model.FullTextIndex.IsFullText">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Sql.Model.FullTextIndex.FullTextCatalog">
            <summary>
            Gets or sets the full text catalog.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.FullTextIndex.UnderlyingUniqueIndex">
            <summary>
            Gets or sets the underlying unique index name.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.IndexColumn">
            <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.IndexColumn.Index"/> bound column.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.IndexColumn.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Model.IndexColumn.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Index}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Index)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.TypeColumn">
            <summary>
            Gets or sets column that contains type of data for <see cref="P:Xtensive.Sql.Model.IndexColumn.Column"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Ascending">
            <summary>
            Gets or sets a value indicating the ascending or descending sort direction for this instance.
             The default is <see langword="true"/>.
            </summary>
            <value>
              <see langword="true"/> if ascending; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Name">
            <summary>
            Gets or sets a name of the node.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.IndexColumn.Languages">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.ISequenceable">
            <summary>
            Defines an object that could be the source of a sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.ISequenceable.SequenceDescriptor">
            <summary>
            Gets or sets the sequence descriptor.
            </summary>
            <value>The sequence descriptor.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.NodeCollection`1">
            <summary>
            Represents lockable indexed by <see cref="P:Xtensive.Sql.Model.Node.Name"/> collection of <see cref="T:Xtensive.Sql.Model.Node"/>s.
            </summary>
            <typeparam name="TNode">Node type</typeparam>
        </member>
        <member name="M:Xtensive.Sql.Model.NodeCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="capacity">The initial collection capacity.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.NodeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read-only.
            </summary>
            <value></value>
            <returns><see langword="True"/> if this instance is read-only; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Xtensive.Sql.Model.NodeCollection`1.Item(System.String)">
            <summary>
            Gets the <typeparamref name="TNode"/> at the specified index.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.PairedNodeCollection`2">
            <summary>
            Represents paired collection of <see cref="T:Xtensive.Sql.Model.Node"/>s.
            </summary>
            <typeparam name="TOwner">Owner node type</typeparam>
            <typeparam name="TNode">Item node type</typeparam>
        </member>
        <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2"/> class.
            </summary>
            <param name="owner">The collectionowner.</param>
            <param name="property">Owner collection property.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2"/> class.
            </summary>
            <param name="owner">The collection owner.</param>
            <param name="property">Owner collection property.</param>
            <param name="capacity">The initial collection capacity.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.PairedNodeCollection`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns><see langword="True"/> if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Xtensive.Sql.Model.HashPartition">
            <summary>
            Represents a hash partition.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Partition">
            <summary>
            Represents a single partition object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Partition.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#PartitionDescriptor}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.PartitionDescriptor)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Partition.#ctor(Xtensive.Sql.Model.PartitionDescriptor,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Partition"/> class.
            </summary>
            <param name="partitionDescriptor">The partition descriptor.</param>
            <param name="filegroup">The filegroup.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Partition.Filegroup">
            <summary>
            Gets or sets the tablespace name or a filegroup name (according to RDBMS)
            that contains this instance.
            </summary>
            <value>The tablespace or a filegroup name.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Partition.PartitionDescriptor">
            <summary>
            Gets or sets the partitionDescriptor.
            </summary>
            <value>The partitionDescriptor.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.ListPartition">
            <summary>
            Represents a list partition.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.ListPartition.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.PartitionDescriptor">
            <summary>
            Represents a set of information concerning object partitioning.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateHashPartition(System.String)">
            <summary>
            Creates the hash partition.
            </summary>
            <param name="filegroup">The filegroup.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateListPartition(System.String,System.String[])">
            <summary>
            Creates the list partition.
            </summary>
            <param name="filegroup">The filegroup.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateRangePartition(System.String,System.String)">
            <summary>
            Creates the range partition.
            </summary>
            <param name="filegroup">The filegroup.</param>
            <param name="boundary">The boundary.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="column">The column.</param>
            <param name="partitionSchema">The partition schema.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="column">The column.</param>
            <param name="partitionMethod">The partition method.</param>
            <param name="partitionAmount">The partition amount.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="column">The column.</param>
            <param name="partitionMethod">The partition method.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Column">
            <summary>
            Gets or sets the column against which an object will be partitioned.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionAmount">
            <summary>
            Gets or sets the partition amount.
            </summary>
            <value>The partition amount.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Partitions">
            <summary>
            Gets the partitions.
            </summary>
            <value>The partitions.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionMethod">
            <summary>
            Gets or sets the partition method.
            </summary>
            <value>The partition method.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionSchema">
            <summary>
            Gets or sets the partition schema.
            </summary>
            <value>The partition schema.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.PartitionFunction">
            <summary>
            Represents a function in the current catalog that maps the rows of a table or index
            into partitions based on the values of a specified column.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionFunction.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
            <summary>
            Changes the catalog.
            </summary>
            <param name="value">The new value of catalog property.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionFunction.DataType">
            <summary>
            Gets or sets the data type of the column used for partitioning.
            </summary>
            <value>The data type of the column used for partitioning.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryType">
            <summary>
            Gets or sets the boundary type that affects the partitioning behavior.
            </summary>
            <value>The boundary type.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryValues">
            <summary>
            Gets or sets the boundary values for each partition of a partitioned table or index 
            that uses this partition function.
            </summary>
            <value>The boundary values.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.PartitionSchema">
            <summary>
            Represents a schema in the current <see cref="T:Xtensive.Sql.Model.Catalog"/> that maps the partitions of a 
            partitioned table or index to filegroups. The number and domain of the partitions of a 
            partitioned table or index are determined in a <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.PartitionSchema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
            <summary>
            Changes the catalog.
            </summary>
            <param name="value">The new value of catalog property.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionSchema.Filegroups">
            <summary>
            Specifies the names of the filegroups to hold the partitions specified
            by <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction"/>. Filegroup name must already exist in the <see cref="T:Xtensive.Sql.Model.Catalog"/>.
            </summary>
            <value>The filegroups.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction">
            <summary>
            Gets or sets the partition function.
            </summary>
            <value>The partition function.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.RangePartition">
            <summary>
            Represents a range partition.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.RangePartition.Boundary">
            <summary>
            Gets or sets the partition boundary.
            </summary>
            <value>The boundary.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.PartitionMethod">
            <summary>
            Enumeration of possible partitioning methods.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Model.PartitionMethod.None">
            <summary>
            None.
            Value is <see langword="0x00"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Model.PartitionMethod.Range">
            <summary>
            Indicates that table rows should be assigned to partitions 
            based on column values falling within a given range.
            Value is <see langword="0x01"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Model.PartitionMethod.List">
            <summary>
            Indicates that table rows should be assigned to partitions 
            based on columns values matching one of a set of discrete values.
            Value is <see langword="0x02"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.Model.PartitionMethod.Hash">
            <summary>
            Indicates that table rows should be assigned to partitions 
            based on the value returned by a user-defined expression 
            that operates on column values in rows to be inserted into the table.
            Value is <see langword="0x04"/>. 
            </summary>
        </member>
        <member name="T:Xtensive.Sql.ReferentialAction">
            <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.ReferentialAction.NoAction">
            <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.ReferentialAction.Restrict">
            <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.ReferentialAction.Cascade">
            <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.ReferentialAction.SetDefault">
            <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.ReferentialAction.SetNull">
            <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.Model.Schema">
            <summary>
            A schema is a persistent descriptor that includes the name of the SQL-schema,
            the  <see cref="T:Xtensive.Sql.Model.CharacterSet"> default character set</see> for the schema,
            and the descriptor of every component of the schema.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateSequence(System.String)">
            <summary>
            Creates the sequence.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateTemporaryTable(System.String)">
            <summary>
            Creates the temporary table.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateTable(System.String)">
            <summary>
            Creates the table.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String)">
            <summary>
            Creates the view.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative)">
            <summary>
            Creates the view.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The select statement.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative,Xtensive.Sql.CheckOptions)">
            <summary>
            Creates the view.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The select statement.</param>
            <param name="checkOptions">The check options.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates the assertion.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="isDeferrable">Is assertion deferrable.</param>
            <param name="isInitiallyDeferred">Is assertion initially deferred.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Creates the assertion.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateCharacterSet(System.String)">
            <summary>
            Creates the character set.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateTranslation(System.String)">
            <summary>
            Creates the translation.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateCollation(System.String)">
            <summary>
            Creates the collation.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Creates the domain.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Datatype.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType)">
            <summary>
            Creates the domain.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Datatype.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
            <summary>
            Changes the catalog.
            </summary>
            <param name="value">The new value of catalog property.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Schema.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Sequences">
            <summary>
            Gets the sequences.
            </summary>
            <value>The sequences.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Assertions">
            <summary>
            Gets the assertions.
            </summary>
            <value>The assertions.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Domains">
            <summary>
            Gets the domains.
            </summary>
            <value>The domains.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Collations">
            <summary>
            Gets the collations.
            </summary>
            <value>The collations.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.CharacterSets">
            <summary>
            Gets the character sets.
            </summary>
            <value>The character sets.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.DefaultCharacterSet">
            <summary>
            Gets or sets the default character set.
            </summary>
            <value>The default character set.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Translations">
            <summary>
            Gets the translations.
            </summary>
            <value>The translations.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Views">
            <summary>
            Gets the views.
            </summary>
            <value>The views.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Tables">
            <summary>
            Gets the tables.
            </summary>
            <value>The tables.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Schema.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.Sequence">
            <summary>
            Represents an object that generates unique numbers, mostly used for primary key values.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Sequence.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Sequence.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Sequence.SequenceDescriptor">
            <summary>
            Gets or sets the sequence descriptor.
            </summary>
            <value>The sequence descriptor.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.SequenceDescriptor">
            <summary>
            Represents a set of information concerning sequence.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="startValue">The start value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="startValue">The start value.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="startValue">The start value.</param>
            <param name="increment">The increment.</param>
            <param name="maxValue">The max value.</param>
            <param name="minValue">The min value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="startValue">The start value.</param>
            <param name="increment">The increment.</param>
            <param name="maxValue">The max value.</param>
            <param name="minValue">The min value.</param>
            <param name="isCyclic">The is cyclic.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.StartValue">
            <summary>
            Gets or sets the start value.
            </summary>
            <remarks>
            The start value must lie between the minimum and maximum value.
            </remarks>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Increment">
            <summary>
            Gets or sets the increment.
            </summary>
            <remarks>
            If increment is not specified, then an increment of 1 
            is implicit. Increment must not be 0.
            </remarks>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MaxValue">
            <summary>
            Gets or sets the max value.
            </summary>
            <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MinValue">
            <summary>
            Gets or sets the min value.
            </summary>
            <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.LastValue">
            <summary>
            Gets or sets the last value.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.SequenceDescriptor.IsCyclic">
            <summary>
            Gets or sets a value indicating whether this instance is isCyclic.
            </summary>
            <value><see langword="true"/> if isCyclic; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.Table">
            <summary>
            Represents a table object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String,Xtensive.Sql.SqlValueType)">
            <summary>
            Creates the table column.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Column datatype.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String)">
            <summary>
            Creates the table column.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateCheckConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Creates the check constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateDefaultConstraint(System.String,Xtensive.Sql.Model.TableColumn)">
            <summary>
            Creates the default constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
            <returns>Default constraint.</returns>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreatePrimaryKey(System.String,Xtensive.Sql.Model.TableColumn[])">
            <summary>
            Creates the primary key.
            </summary>
            <param name="name">The name.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateUniqueConstraint(System.String,Xtensive.Sql.Model.TableColumn[])">
            <summary>
            Creates the unique constraint.
            </summary>
            <param name="name">The name.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.CreateForeignKey(System.String)">
            <summary>
            Creates the foreign key.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.Table.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.TableColumns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.TableConstraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.PartitionDescriptor">
            <summary>
            Gets or sets the partitioning descriptor.
            </summary>
            <value>The partitioning descriptor.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.Filegroup">
            <summary>
            Gets or sets the value indicating that specified table will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the table will bw located at the 
            default filegroup.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.Table.Xtensive#Sql#Model#IConstrainable#Constraints">
            <summary>
            Gets the node constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.TableColumn">
            <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.TableColumn.Table"/> bound column.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.TableColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
            <summary>
            Changes the data table.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.TableColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.Table)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.TableColumn.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.DataType">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Sql.SqlValueType"/>.
            </summary>
            <value>The datatype.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.DefaultValue">
            <summary>
            Specifies the value provided for the column when a value is not explicitly supplied during an insert. 
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.SequenceDescriptor">
            <summary>
            Gets or sets the sequence descriptor.
            </summary>
            <value>The sequence descriptor.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.Expression">
            <summary>
            Gets or sets the computed expression that defines the value of a computed column.
            </summary>
            <value>The expression of a computed column.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.IsPersisted">
            <summary>
            Gets or sets a value indicating whether RDBMS will physically store the computed values in the table, 
            and update the values when any other columns on which the computed column depends are updated. .
            </summary>
            <value>
              <see langword="true"/> if this instance is persisted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.Collation">
            <summary>
            Gets or sets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.IsNullable">
            <summary>
            Gets or sets a value indicating whether null values are allowed in the column.
            </summary>
            <value>
              <see langword="true"/> if this instance is nullable; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Model.TableColumn.Table">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableColumn.Table"/> this instance belongs to.
            </summary>
            <value>The table.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.TemporaryTable">
            <summary>
            Represents a temporary table object.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.TemporaryTable.IsGlobal">
            <summary>
            Gets or sets a value indicating whether this instance is global. 
            If value is <see langword="false"/> the this instance is local.
            </summary>
            <value>
              <see langword="true"/> if this instance is global; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Sql.Model.TemporaryTable.PreserveRows">
            <summary>
            Gets or sets a value indicating whether rows are preserved on commit.
            </summary>
            <value>
              <see langword="true"/> if rows are preserved on commit; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Xtensive.Sql.Model.Translation">
            <summary>
            Represents a characher translation object.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.Translation.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Xtensive.Sql.Model.View">
            <summary>
            Represents a View node.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.View.CreateColumn(System.String)">
            <summary>
            Creates the view column.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.View.ChangeSchema(Xtensive.Sql.Model.Schema)">
            <summary>
            Changes the schema.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.View.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked too.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.View.ViewColumns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Xtensive.Sql.Model.View.CheckOptions">
            <summary>
            Specifies the level of checking to be done when inserting or updating data through a view.
            If the option is specified, every row that is inserted or updated through the view must
            conform to the definition of that view.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.View.Definition">
            <summary>
            The statement that defines the view. The statement can use more than one table
            and other views.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.Model.View.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Xtensive.Sql.Model.ViewColumn">
            <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.ViewColumn.View"/> bound column.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.Model.ViewColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
            <summary>
            Changes the data table.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Sql.Model.ViewColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.View)">
            <summary>
            Updates the paired property.
            </summary>
            <param name="property">The collection property name.</param>
            <param name="value">The collection owner.</param>
        </member>
        <member name="P:Xtensive.Sql.Model.ViewColumn.View">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.ViewColumn.View"/> this instance belongs to.
            </summary>
            <value>The view.</value>
        </member>
        <member name="T:Xtensive.Sql.SqlDdl">
            <summary>
            A factory for SQL DDL operations.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlDml">
            <summary>
            A factory for SQL DML operations.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDml.RawConcat(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Concates underlying expression without any sign between.
            </summary>
            <param name="left">Left expression</param>
            <param name="right">Right expression</param>
            <returns>New <see cref="T:Xtensive.Sql.Dml.SqlBinary"/> expression.</returns>
        </member>
        <member name="T:Xtensive.Sql.SqlDriverConfiguration">
            <summary>
            Configuration for <see cref="T:Xtensive.Sql.SqlDriver"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlDriverConfiguration.#ctor">
            <summary>
            Creates new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriverConfiguration.ForcedServerVersion">
            <summary>
            Gets or sets forced server version.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriverConfiguration.NativeLibraryCacheFolder">
            <summary>
            Gets or sets native library cache folder.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlDriverConfiguration.ConnectionInitializationSql">
            <summary>
            Gets or sets connection initialization SQL script.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlExceptionInfo">
            <summary>
            Information about exception occurred while executing SQL query.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlExceptionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.SqlExceptionInfo.Create(Xtensive.Sql.SqlExceptionType)">
            <summary>
            Creates locked <see cref="T:Xtensive.Sql.SqlExceptionInfo"/> with only <see cref="P:Xtensive.Sql.SqlExceptionInfo.Type"/> specified.
            </summary>
            <param name="type">Type of exception.</param>
            <returns>Created <see cref="T:Xtensive.Sql.SqlExceptionInfo"/>.</returns>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Type">
            <summary>
            Type of error.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Database">
            <summary>
            Database in which error occurred (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Table">
            <summary>
            Table in which error occurred (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Column">
            <summary>
            Column in which error occurred (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Value">
            <summary>
            Value that caused error (if any).
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExceptionInfo.Constraint">
            <summary>
            Name of the constraint or unique index that caused error (if any).
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlExceptionType">
            <summary>
            Possible exeception types.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.Unknown">
            <summary>
            Reason of exception is unknown.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.ConnectionError">
            <summary>
            Connection error (such as timeout).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.SyntaxError">
            <summary>
            Syntax error in query.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.CheckConstraintViolation">
            <summary>
            Check constraint violation (including NOT NULL constraints)
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.UniqueConstraintViolation">
            <summary>
            Unique constraint violation (also denotes unique and primary index key duplication).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.ReferentialConstraintViolation">
            <summary>
            Referential constraint (aka foreign key) violation.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.Deadlock">
            <summary>
            Deadlock.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.SerializationFailure">
            <summary>
            Concurrent access serialization failure.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlExceptionType.OperationTimeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlExtensions">
            <summary>
            Various extension methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlExtensions.GetDatabase(Xtensive.Orm.UrlInfo)">
            <summary>
            Extracts the database component from the specified <see cref="T:Xtensive.Orm.UrlInfo"/>.
            </summary>
            <param name="url">The URL.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlExtensions.GetSchema(Xtensive.Orm.UrlInfo,System.String)">
            <summary>
            Extracts the schema component from the specified <see cref="T:Xtensive.Orm.UrlInfo"/>.
            If schema is not specified returns <paramref name="defaultValue"/>.
            </summary>
            <param name="url">The URL.</param>
            <param name="defaultValue">The default schema name.</param>
            <returns>Schema name.</returns>
        </member>
        <member name="T:Xtensive.Sql.SqlExtractionResult">
            <summary>
            Result of SQL schema extraction.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlExtractionTask">
            <summary>
            A task for <see cref="T:Xtensive.Sql.Model.Extractor"/>
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExtractionTask.Catalog">
            <summary>
            Gets catalog to extact.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExtractionTask.Schema">
            <summary>
            Gets schema to extract.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlExtractionTask.AllSchemas">
            <summary>
            Gets value indicating if all schemas in the specified catalog
            should be extracted.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.SqlHelper">
            <summary>
            Various helper methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.ValidateConnectionUrl(Xtensive.Orm.UrlInfo)">
            <summary>
            Validates the specified URL againts charactes that usually forbidden inside connection strings.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithQuotes(System.String[])">
            <summary>
            Quotes the specified identifier with quotes (i.e. "").
            </summary>
            <returns>Quoted identifier.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithBrackets(System.String[])">
            <summary>
            Quotes the specified identifier with square brackets (i.e. []).
            </summary>
            <returns>Quoted indentifier.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithBackTick(System.String[])">
            <summary>
            Quotes the specified identifier with square brackets (i.e. ``).
            </summary>
            <returns>Quoted indentifier.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.IntervalToMilliseconds(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Converts the specified interval expression to expression
            that represents number of milliseconds in that interval.
            This is a generic implementation via <see cref="T:Xtensive.Sql.Dml.SqlExtract"/>s.
            It's suitable for any server, but can be inefficient.
            </summary>
            <param name="interval">The interval to convert.</param>
            <returns>Result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.IntervalToNanoseconds(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Converts the specified interval expression to expression
            that represents number of milliseconds in that interval.
            This is a generic implementation via <see cref="T:Xtensive.Sql.Dml.SqlExtract"/>s.
            It's suitable for any server, but can be inefficient.
            </summary>
            <param name="interval">The interval to convert.</param>
            <returns>Result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.IntervalAbs(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Converts the specified interval expression to expression
            that represents absolute value (duration) of the specified interval.
            This is a generic implementation that uses comparison with zero interval.
            It's suitable for any server, but can be inefficient.
            </summary>
            <param name="source">The source.</param>
            <returns>Result of conversion.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Performs banker's rounding on the specified argument.
            </summary>
            <param name="value">The value to round.</param>
            <returns>Result of rounding.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Performs banker's rounding on the speicified argument
            to a specified number of fractional digits.
            </summary>
            <param name="value">The value to round.</param>
            <param name="digits">The digits.</param>
            <returns>Result of rounding.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Performs "rounding as tought in school" on the specified argument.
            </summary>
            <param name="value">The value to round.</param>
            <returns>Result of rounding.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
            <summary>
            Performs "rounding as tought in school" on the specified argument
            to a specified number of fractional digits.
            </summary>
            <param name="argument">The value to round.</param>
            <param name="digits">The digits.</param>
            <returns>Result of rounding.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)">
            <summary>
            Converts the specified <see cref="T:System.TimeSpan"/> to string using the specified format string.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The format string.</param>
            <returns>Formatted representation of the <paramref name="value"/>.</returns>
            <remarks>
            Format string can contain any of these placeholders:
            <list type="table">
            <item><term>{0}</term><description>negative sign, if argument represents a negative <see cref="T:System.TimeSpan"/>; <see cref="F:System.String.Empty"/>, otherwise.</description></item>
            <item><term>{1}</term><description>absolute value of <see cref="P:System.TimeSpan.Days"/> property.</description></item>
            <item><term>{2}</term><description>absolute value of <see cref="P:System.TimeSpan.Hours"/> property.</description></item>
            <item><term>{3}</term><description>absolute value of <see cref="P:System.TimeSpan.Minutes"/> property.</description></item>
            <item><term>{4}</term><description>absolute value of <see cref="P:System.TimeSpan.Seconds"/> property.</description></item>
            <item><term>{5}</term><description>absolute value of <see cref="P:System.TimeSpan.Milliseconds"/> property.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.ReadDatabaseAndSchema(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Reads the database and schema using the specified query.
            By contract query should return database in first column and schema in second.
            </summary>
            <param name="queryText">The query text.</param>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <returns><see cref="T:Xtensive.Sql.Info.DefaultSchemaInfo"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.ExecuteInitializationSql(System.Data.Common.DbConnection,Xtensive.Sql.SqlDriverConfiguration)">
            <summary>
            Executes <see cref="P:Xtensive.Sql.SqlDriverConfiguration.ConnectionInitializationSql"/> (if any).
            </summary>
            <param name="connection">Connection to initialize.</param>
            <param name="configuration">Driver configuration.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.ReduceIsolationLevel(System.Data.IsolationLevel)">
            <summary>
            Reduces the isolation level to the most commonly supported ones.
            </summary>
            <param name="level">The level.</param>
            <returns>Converted isolation level.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.QuoteString(System.String)">
            <summary>
            Quotes the string using standard SQL quoting rules.
            </summary>
            <param name="value">The value.</param>
            <returns>Quoted string.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.NotSupported(System.String)">
            <summary>
            Creates a <see cref="T:System.NotSupportedException"/> with message that says that <paramref name="feature"/>
            is not supported by current storage.
            </summary>
            <param name="feature">The feature.</param>
            <returns>Created exception.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.QueryFeatures)">
            <summary>
            Creates a <see cref="T:System.NotSupportedException"/> with message that says that <paramref name="feature"/>
            is not supported by current storage.
            </summary>
            <param name="feature">The feature.</param>
            <returns>Created exception.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.ServerFeatures)">
            <summary>
            Creates a <see cref="T:System.NotSupportedException"/> with message that says that <paramref name="feature"/>
            is not supported by current storage.
            </summary>
            <param name="feature">The feature.</param>
            <returns>Created exception.</returns>
        </member>
        <member name="T:Xtensive.Sql.SqlType">
            <summary>
            Enumerates supported SQL column types.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Unknown">
            <summary>
            An unknown type.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Int8">
            <summary>
            Signed byte (8 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.UInt8">
            <summary>
            Unsigned byte (8 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Int16">
            <summary>
            Small integer (16 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.UInt16">
            <summary>
            Unsigned small integer (16 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Int32">
            <summary>
            Integer (32 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.UInt32">
            <summary>
            Unsigned integer (32 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Int64">
            <summary>
            Long integer (64 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.UInt64">
            <summary>
            Unsigned long (64 bit).
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Decimal">
            <summary>
            Numeric data type with fixed precision and scale.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Float">
            <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Double">
            <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.DateTime">
            <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.DateTimeOffset">
            <summary>
            Date and time data from January 1,1 A.D. through December 31, 9999 A.D., 
            to an accuracy of 100 nanoseconds.
            Storage size is 8 to 10 bytes. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Interval">
            <summary>
            Datetime interval.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Char">
            <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.VarChar">
            <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.VarCharMax">
            <summary>
            Variable-length Unicode data with a maximum length of 2^30 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Binary">
            <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.VarBinary">
            <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.VarBinaryMax">
            <summary>
            <para>Variable-length binary data from 0 through 2^31-1 (2,147,483,647) bytes.</para>
            </summary>
        </member>
        <member name="F:Xtensive.Sql.SqlType.Guid">
            <summary>
            A globally unique identifier (GUID). 
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlType.op_Equality(Xtensive.Sql.SqlType,Xtensive.Sql.SqlType)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The first argument.</param>
            <param name="right">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlType.op_Inequality(Xtensive.Sql.SqlType,Xtensive.Sql.SqlType)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The first argument.</param>
            <param name="right">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Xtensive.Sql.SqlValueType">
            <summary>
            Represents an SQL type with specific <see cref="P:Xtensive.Sql.SqlValueType.Length"/>, <see cref="P:Xtensive.Sql.SqlValueType.Scale"/> and <see cref="P:Xtensive.Sql.SqlValueType.Precision"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.Equals(Xtensive.Sql.SqlValueType)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.op_Equality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.op_Inequality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="type">The type.</param>
            <param name="typeName">Name of the type.</param>
            <param name="length">The length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:Xtensive.Sql.SqlValueType.Type">
            <summary>
            Gets the <see cref="T:Xtensive.Sql.SqlType"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlValueType.TypeName">
            <summary>
            Gets the name of the type in case when <see cref="P:Xtensive.Sql.SqlValueType.Type"/> has value <see cref="F:Xtensive.Sql.SqlType.Unknown"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlValueType.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlValueType.Scale">
            <summary>
            Gets the scale.
            </summary>
        </member>
        <member name="P:Xtensive.Sql.SqlValueType.Precision">
            <summary>
            Gets the precision.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.TypeMapping">
            <summary>
            Value (data) type mapping.
            </summary>
        </member>
        <member name="T:Xtensive.Sql.TypeMappingRegistry">
            <summary>
            A collection of <see cref="T:Xtensive.Sql.TypeMapping"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.TypeMappingRegistry.MapSqlType(Xtensive.Sql.SqlType)">
            <summary>
            Converts the specified <see cref="T:Xtensive.Sql.SqlType"/> to corresponding .NET type.
            </summary>
            <param name="sqlType">The type to convert.</param>
            <returns>Converter type.</returns>
        </member>
        <member name="T:Xtensive.Sql.ValueRangeValidator">
            <summary>
            A range validator for primitive types.
            </summary>
        </member>
        <member name="M:Xtensive.Sql.ValueRangeValidator.Validate``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
            <summary>
            Ensures that the specified value is in <paramref name="allowedRange"/>.
            </summary>
            <typeparam name="T">Type of the value to validate.</typeparam>
            <param name="value">The value.</param>
            <param name="allowedRange">The allowed range.</param>
        </member>
        <member name="M:Xtensive.Sql.ValueRangeValidator.Correct``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
            <summary>
            Corrects the specified value to fall into the <paramref name="allowedRange"/>.
            </summary>
            <typeparam name="T">Type of the value to validate</typeparam>
            <param name="value">The value.</param>
            <param name="allowedRange">The allowed range.</param>
            <returns>Corrected value.</returns>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageColumnInfo">
            <summary>
            Column.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.NodeBase`1">
            <summary>
            A base class for all nodes in storage model.
            </summary>
            <typeparam name="TParent">The type of the parent node.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.NodeBase`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException">Validation error.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The parent table.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String,Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The parent table.</param>
            <param name="name">The column name.</param>
            <param name="type">Type of the column.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.Type">
            <summary>
            Gets or sets the type of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.DefaultValue">
            <summary>
            Gets or sets the default column value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.DefaultSqlExpression">
            <summary>
            Gets or sets arbitrary SQL expression as default value for this column.
            This default value has higher priority than <see cref="P:Xtensive.Orm.Upgrade.Model.StorageColumnInfo.DefaultValue"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ColumnInfoCollection">
            <summary>
            Column collection.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.NodeCollectionBase`2">
            <summary>
            An abstract base class for any collection of storage model nodes.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TParent">The type of the parent node.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.NodeCollectionBase`2.#ctor(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ColumnInfoCollection.#ctor(Xtensive.Modelling.Node)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ColumnInfoRef`1">
            <summary>
            An abstract base class for all columns refs.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.Ref`2">
            <summary>
            The reference to model node.
            </summary>
            <typeparam name="TTarget">The type of the target node.</typeparam>
            <typeparam name="TParent">The type of the parent node.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.Ref`2.#ctor(`1)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.Ref`2.Value">
            <summary>
            Gets or sets referenced node.
            </summary>
            <exception cref="T:System.NotSupportedException">Value is already initialized.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ColumnInfoRef`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ColumnInfoRef`1.#ctor(`0,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The column.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.IntegrityException">
            <summary>
            Describes errors detected during <see cref="T:Xtensive.Orm.Upgrade.Model.StorageModel"/>.<see cref="M:Xtensive.Modelling.Node.Validate"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IntegrityException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="nodePath">The path of the invalid node.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Upgrade.Model.IntegrityException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.IntegrityException.NodePath">
            <summary>
            Gets the path of the node which validation has failed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ValidationException">
            <summary>
            Describes errors detected during 
            <see cref="M:Xtensive.Modelling.Node.Validate"/>.<see cref="T:Xtensive.Modelling.Node"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="nodePath">The path of the invalid node.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Upgrade.Model.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.ValidationException.NodePath">
            <summary>
            Gets the path of the node which validation has failed.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ForeignKeyCollection">
            <summary>
            Foreign key collection.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyCollection.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnCollection.Set(Xtensive.Orm.Upgrade.Model.StorageIndexInfo)">
            <summary>
            Replaces all column references to references to columns of 
            specified <paramref name="source"/> index.
            </summary>
            <param name="source">The index to use.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnCollection.#ctor(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnRef">
            <summary>
            References to foreign key column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.ForeignKeyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.ForeignKeyInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The foreign key.</param>
            <param name="column">The column.</param>
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo">
            <summary>
            Foreign key.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException">Validations errors.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="name">The name of foreign key.</param>
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.PrimaryKey">
            <summary>
            Gets or sets the foreign index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.ForeignKeyColumns">
            <summary>
            Gets foreign key columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.OnRemoveAction">
            <summary>
            Gets or sets the "on remove" action.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.ForeignKeyInfo.OnUpdateAction">
            <summary>
            Gets or sets the "on update" action.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.FullTextColumnRef">
            <summary>
            Reference to full-text column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.FullTextColumnRefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.FullTextColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextColumnRefCollection.#ctor(Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo">
            <summary>
            Full-text index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo.ValidateState">
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException"></exception>
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="name">The index.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageFullTextIndexInfo.Columns">
            <summary>
            Gets columns.
            </summary> 
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.FullTextIndexInfoCollection">
            <summary>
            A collection of full-text indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.FullTextIndexInfoCollection.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.IncludedColumnRef">
            <summary>
            References to included column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IncludedColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IncludedColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IncludedColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.IncludedColumnRefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.IncludedColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.IncludedColumnRefCollection.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageIndexInfo">
            <summary>
            The base abstract class for all indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent table.</param>
            <param name="name">The index.</param>
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.IsUnique">
            <summary>
            Gets a value indicating whether this instance is unique.
            </summary>
            <exception cref="T:System.NotSupportedException">Already initialized.</exception>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.IsPrimary">
            <summary>
            Gets a value indicating whether this instance is primary.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.KeyColumns">
            <summary>
            Gets key columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.IsClustered">
            <summary>
            Gets a value indicating whether this instance is clustered.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.KeyColumnRef">
            <summary>
            References to key column.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1">
            <summary>
            References to key column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException">Invalid <see cref="P:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.Direction"/> value 
            (<see cref="F:Xtensive.Core.Direction.None"/>).</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.#ctor(`0,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.#ctor(`0,Xtensive.Orm.Upgrade.Model.StorageColumnInfo,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.KeyColumnRef`1.Direction">
            <summary>
            Gets or sets the column direction.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.StorageIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.KeyColumnRefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.KeyColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.KeyColumnRefCollection.#ctor(Xtensive.Orm.Upgrade.Model.StorageIndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo">
            <summary>
            Primary index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.PopulateValueColumns">
            <summary>
            Populates <see cref="P:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.ValueColumns"/> collection by
            including all the columns except <see cref="P:Xtensive.Orm.Upgrade.Model.StorageIndexInfo.KeyColumns"/>
            into it.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException">Validation error.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The parent table.</param>
            <param name="name">The index name.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo.ValueColumns">
            <summary>
            Gets value columns.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef">
            <summary>
            References to key column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.PrimaryKeyColumnRefCollection.#ctor(Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ReferentialAction">
            <summary>
            Referential integrity maintenance actions.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.None">
            <summary>
            Do nothing to maintain referential integrity.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.Default">
            <summary>
            The same as <see cref="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.Restrict"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.Restrict">
            <summary>
            Restricts primary key update \ removal when it is referenced by some foreign key.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.Cascade">
            <summary>
            Cascades primary key update \ removal to its foreign key.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.ReferentialAction.Clear">
            <summary>
            Clears the foreign key on its primary key update \ removal.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo">
            <summary>
            Secondary index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.PopulatePrimaryKeyColumns">
            <summary>
            Populates <see cref="P:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.PrimaryKeyColumns"/> collection by
            copying them from primary index.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException">Empty secondary key columns collection.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The parent table.</param>
            <param name="name">The index name.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.PrimaryKeyColumns">
            <summary>
            Gets value columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.IncludedColumns">
            <summary>
            Gets included columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfo.Filter">
            <summary>
            Gets filter expression for partial index.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfoCollection">
            <summary>
            A collection of secondary indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SecondaryIndexInfoCollection.#ctor(Xtensive.Orm.Upgrade.Model.TableInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo">
            <summary>
            Sequence.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.ValidateState">
            <inheritdoc/>
            <exception cref="T:Xtensive.Orm.Upgrade.Model.ValidationException"><c>ValidationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.#ctor(Xtensive.Orm.Upgrade.Model.StorageModel,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.Seed">
            <summary>
            Gets or sets the start value.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.Increment">
            <summary>
            Gets or sets the increment.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo.Current">
            <summary>
            Gets or sets the current sequence value.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.SequenceInfoCollection">
            <summary>
            The collection of <see cref="T:Xtensive.Orm.Upgrade.Model.StorageSequenceInfo"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.SequenceInfoCollection.#ctor(Xtensive.Orm.Upgrade.Model.StorageModel)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The storage.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageModel">
            <summary>
            Storage schema.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Upgrade.Model.StorageModel.DefaultName">
            <summary>
            Default <see cref="T:Xtensive.Orm.Upgrade.Model.StorageModel"/> node name.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageModel.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageModel.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The storage name.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageModel.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageModel.Actions">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageModel.Tables">
            <summary>
            Gets tables.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageModel.Sequences">
            <summary>
            Gets sequences.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.TableInfo">
            <summary>
            Table.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.TableInfo.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.TableInfo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.TableInfo.#ctor(Xtensive.Orm.Upgrade.Model.StorageModel,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.Columns">
            <summary>
            Gets columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.PrimaryIndex">
            <summary>
            Gets or sets the primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.SecondaryIndexes">
            <summary>
            Gets secondary indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.ForeignKeys">
            <summary>
            Gets foreign keys.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.FullTextIndexes">
            <summary>
            Gets full-text indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.TableInfo.AllIndexes">
            <summary>
            Gets all indexes belongs to the table.
            </summary>
            <returns><see cref="T:Xtensive.Orm.Upgrade.Model.StorageIndexInfo"/> iterator.</returns>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.TableInfoCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.TableInfo"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.TableInfoCollection.#ctor(Xtensive.Orm.Upgrade.Model.StorageModel)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="storage">The storage.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.StorageTypeInfo">
            <summary>
            Type of table column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Equals(Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.op_Equality(Xtensive.Orm.Upgrade.Model.StorageTypeInfo,Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.op_Inequality(Xtensive.Orm.Upgrade.Model.StorageTypeInfo,Xtensive.Orm.Upgrade.Model.StorageTypeInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
            <param name="length">The length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType,System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
            <param name="isNullable">Indicates whether type is nullable.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
            <param name="isNullable">Indicates whether type is nullable.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.#ctor(System.Type,Xtensive.Sql.SqlValueType,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="type">Underlying data type.</param>
            <param name="nativeType">The native type.</param>
            <param name="isNullable">Indicates whether type is nullable.</param>
            <param name="length">The length.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Undefined">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Upgrade.Model.StorageTypeInfo"/> with undefined type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.IsTypeUndefined">
            <summary>
            Gets a value indicating whether type is undefined.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Type">
            <summary>
            Gets the type of the data.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.IsNullable">
            <summary>
            Indicates whether <see cref="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Type"/> is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Scale">
            <summary>
            Gets the scale.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.Precision">
            <summary>
            Gets the precision.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Upgrade.Model.StorageTypeInfo.NativeType">
            <summary>
            Gets the native type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ValueColumnRef">
            <summary>
            References to value column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValueColumnRef.CreateNesting">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValueColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValueColumnRef.#ctor(Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo,Xtensive.Orm.Upgrade.Model.StorageColumnInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
            <param name="column">The referenced column.</param>
        </member>
        <member name="T:Xtensive.Orm.Upgrade.Model.ValueColumnRefCollection">
            <summary>
            A collection of <see cref="T:Xtensive.Orm.Upgrade.Model.ValueColumnRef"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Upgrade.Model.ValueColumnRefCollection.#ctor(Xtensive.Orm.Upgrade.Model.PrimaryIndexInfo)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parent">The parent index.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.AggregateColumn">
            <summary>
            Aggregate column of the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Column">
            <summary>
            Base class for any column of the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.Equals(Xtensive.Orm.Rse.Column)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.op_Equality(Xtensive.Orm.Rse.Column,Xtensive.Orm.Rse.Column)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.op_Inequality(Xtensive.Orm.Rse.Column,Xtensive.Orm.Rse.Column)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.Clone(System.Int32)">
            <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Orm.Rse.Column.Index"/>.
            </summary>
            <param name="newIndex">The new index value.</param>
            <returns>Clone of the column, but with another <see cref="P:Xtensive.Orm.Rse.Column.Index"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.Clone(System.String)">
            <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Orm.Rse.Column.Name"/>.
            </summary>
            <param name="newName">The new name value.</param>
            <returns>Clone of the column, but with another <see cref="P:Xtensive.Orm.Rse.Column.Name"/>.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Column.#ctor(System.String,System.Int32,System.Type,Xtensive.Orm.Rse.Column)">
            <summary>
            Initializes a new instance of this class..
            </summary>
            <param name="name"><see cref="P:Xtensive.Orm.Rse.Column.Name"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
            <param name="originalColumn">Original column.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Column.Origin">
            <summary>
            Gets origin <see cref="T:Xtensive.Orm.Rse.Column"/> for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Column.Name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Column.Index">
            <summary>
            Gets the column index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Column.Type">
            <summary>
            Gets the column type.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumn.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumn.Clone(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumn.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumn.#ctor(Xtensive.Orm.Rse.AggregateColumnDescriptor,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="descriptor"><see cref="T:Xtensive.Orm.Rse.AggregateColumnDescriptor"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.AggregateColumn.SourceIndex"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumn.AggregateType">
            <summary>
            Gets the aggregate function.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumn.SourceIndex">
            <summary>
            Gets the source column index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumn.Descriptor">
            <summary>
            Gets column descriptor.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.AggregateColumnDescriptor">
            <summary>
            Descriptor of the calculated column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumnDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.AggregateColumnDescriptor.#ctor(System.String,System.Int32,Xtensive.Orm.Rse.AggregateType)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name"><see cref="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.Name"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.SourceIndex"/> property value.</param>
            <param name="aggregateType">The <see cref="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.AggregateType"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.Name">
            <summary>
            Gets the column index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.SourceIndex">
            <summary>
            Gets the column index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.AggregateColumnDescriptor.AggregateType">
            <summary>
            Gets the column type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.AggregateType">
            <summary>
            Defines the set of aggregate functions.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.AggregateType.Avg">
            <summary>
            Average of the values in a column.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.AggregateType.Count">
            <summary>
            A count of the values in a column.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.AggregateType.Max">
            <summary>
            Highest value in a column.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.AggregateType.Min">
            <summary>
            Lowest value in a column.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.AggregateType.Sum">
            <summary>
            Total of values in a column.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.ApplyParameter">
            <summary>
            A parameter for accessing current tuple of left (outer) <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/>
            within right (inner) <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.ApplyParameter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.ApplyParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">Value for <see cref="P:Xtensive.Orm.Rse.ApplyParameter.Name"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.ApplyParameter.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.ApplyParameter.Name">
            <summary>
            Gets the name of this parameter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Xtensive.Orm.Rse.ApplyParameter.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Xtensive.Orm.Rse.ApplySequenceType">
            <summary>
            Apply operation type.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.Default">
            <summary>
            <see cref="F:Xtensive.Orm.Rse.ApplySequenceType.All"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.All">
            <summary>
            All rows.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.First">
            <summary>
            Expects at least one row.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.Single">
            <summary>
            Expects single row.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.FirstOrDefault">
            <summary>
            Applies only first row if it exists; otherwise applies default row.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.ApplySequenceType.SingleOrDefault">
            <summary>
            Applies single row if it exists; otherwise applies default row.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.CalculatedColumn">
            <summary>
            Calculated column of the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumn.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumn.Clone(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumn.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumn.#ctor(Xtensive.Orm.Rse.CalculatedColumnDescriptor,System.Int32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="descriptor"><see cref="T:Xtensive.Orm.Rse.CalculatedColumnDescriptor"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.CalculatedColumn.Expression">
            <summary>
            Gets the column expression.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.CalculatedColumnDescriptor">
            <summary>
            Descriptor of the calculated column.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumnDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.CalculatedColumnDescriptor.#ctor(System.String,System.Type,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,System.Object}})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Name"/> property value.</param>
            <param name="type">The <see cref="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Type"/> property value.</param>
            <param name="expression">The <see cref="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Expression"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Type">
            <summary>
            Gets the column type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.CalculatedColumnDescriptor.Expression">
            <summary>
            Gets the column expression.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.ColumnCollection">
            <summary>
            Collection of <see cref="T:Xtensive.Orm.Rse.Column"/> items.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.ColumnCollection.Join(System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column})">
            <summary>
            Joins this collection with specified the column collection.
            </summary>
            <param name="joined">The joined.</param>
            <returns>The joined collection.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.ColumnCollection.Alias(System.String)">
            <summary>
            Aliases the specified <see cref="T:Xtensive.Orm.Rse.Column"/> collection.
            </summary>
            <param name="alias">The alias to add.</param>
            <returns>Aliased collection of columns.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.ColumnCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="collection">Collection of items to add.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.ColumnCollection.Item(System.String)">
            <summary>
            Gets <see cref="T:Xtensive.Orm.Rse.Column"/> by provided <paramref name="fullName"/>.
            </summary>
            <remarks>
            Returns <see cref="T:Xtensive.Orm.Rse.Column"/> if it was found; otherwise <see langword="null"/>.
            </remarks>
            <param name="fullName">Full name of the <see cref="T:Xtensive.Orm.Rse.Column"/> to find.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.ColumnGroupCollection">
            <summary>
            Read only collection of <see cref="T:Xtensive.Orm.Model.ColumnGroup"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.ColumnGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="items">The collection items.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.ColumnGroupCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.ColumnGroup"/> by specified group index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.ColumnGroupCollection.Empty">
            <summary>
            Gets the empty <see cref="T:Xtensive.Orm.Rse.ColumnGroupCollection"/>.
            </summary>    
        </member>
        <member name="T:Xtensive.Orm.Rse.Compilation.IPreCompiler">
            <summary>
            Provider's tree pre-compiler contract.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Compilation.IPreCompiler.Process(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Processes the specified provider's tree.
            </summary>
            <param name="rootProvider">The root provider.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ExecutableRawProvider">
            <summary>
            Enumerates specified array of <see cref="T:Xtensive.Tuples.Tuple"/> instances.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ExecutableProvider`1">
            <summary>
            Abstract base class for <typeparamref name="TOrigin"/>-typed executable providers.
            </summary>
            <typeparam name="TOrigin">The type of the <see cref="P:Xtensive.Orm.Rse.Providers.ExecutableProvider`1.Origin"/>.</typeparam>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableProvider`1.#ctor(`0,Xtensive.Orm.Rse.Providers.ExecutableProvider[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="origin">The <see cref="P:Xtensive.Orm.Rse.Providers.ExecutableProvider`1.Origin"/> property value.</param>
            <param name="sources">The <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Sources"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ExecutableProvider`1.Origin">
            <summary>
            Gets the provider this provider is compiled from.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableRawProvider.OnBeforeEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExecutableRawProvider.OnEnumerate(Xtensive.Orm.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer">
            <summary>
            An expression visitor specialized for finding tuple access expressions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression)">
            <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The predicate.</param>
            <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The predicate.</param>
            <param name="parameter">The tuple parameter to be considered.</param>
            <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessGatherer.#ctor(System.Action{Xtensive.Orm.Rse.ApplyParameter,System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="registerOuterColumn">A <see langword="delegate"/> invoked on each outer column usage.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter">
            <summary>
            An expression visitor specialized for rewriting tuple access expressions.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression)">
            <summary>
            Replaces column usages according to a specified map.
            </summary>
            <param name="expression">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Replaces column usages according to a specified map.
            </summary>
            <param name="expression">The predicate.</param>
            <param name="parameter">The tuple parameter to be considered.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.TupleAccessRewriter.#ctor(System.Collections.Generic.IList{System.Int32},System.Func{Xtensive.Orm.Rse.ApplyParameter,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="resolveOuterColumn">A <see langword="delegate"/> invoked when outer column usage is to be rewritten.</param>
            <param name="mappings">The mappings.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.TupleExpressionExtensions">
            <summary>
            Various extension methods for manipulating expressions with <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.IsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Checks if expression is access to tuple.
            </summary>
            <param name="expression">Expression to check.</param>
            <param name="tupleParameter">Tuple parameter that access must be on.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.IsTupleAccess(System.Linq.Expressions.Expression)">
            <summary>
            Checks if expression is access to tuple.
            </summary>
            <param name="expression">Expression to check.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.AsTupleAccess(System.Linq.Expressions.Expression)">
            <summary>
            If <paramref name="expression"/> is an access to tuple element
            returns <paramref name="expression"/> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            Otherwise returns <see langword="null"/>.
            </summary>
            <param name="expression">An expression to check.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.AsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            If <paramref name="expression"/> is an access to tuple element.
            returns <paramref name="expression"/> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            Otherwise returns <see langword="null"/>.
            This method only accepts access to specified parameter and access to outer parameters (<see cref="T:Xtensive.Orm.Rse.ApplyParameter"/>).
            </summary>
            <param name="expression">An expression to check.</param>
            <param name="currentParameter"><see cref="T:System.Linq.Expressions.ParameterExpression"/> considered as current parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.AsTupleAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            If <paramref name="expression"/> is an access to tuple element.
            returns <paramref name="expression"/> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            Otherwise returns <see langword="null"/>.
            This method only accepts access to specified parameters and access to outer parameters (<see cref="T:Xtensive.Orm.Rse.ApplyParameter"/>).
            </summary>
            <param name="expression">An expression to check.</param>
            <param name="currentParameters"><see cref="T:System.Linq.Expressions.ParameterExpression"/>s  considered as current parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.GetTupleAccessArgument(System.Linq.Expressions.Expression)">
            <summary>
            Gets the tuple access argument (column index).
            </summary>
            <param name="expression">An expression describing an access to tuple element.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.TupleExpressionExtensions.GetApplyParameter(System.Linq.Expressions.Expression)">
            <summary>
            Tries to extract apply parameter from <paramref name="expression"/>.
            If <paramref name="expression"/> is an access to column of outer tuple returns <see cref="T:Xtensive.Orm.Rse.ApplyParameter"/> instance.
            Otherwise returns <see langword="null"/>.
            </summary>
            <param name="expression">The expression describing an access to outer tuple.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Orm.IncludeAlgorithm">
            <summary>
            Include algorithm.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.IncludeAlgorithm.Auto">
            <summary>
            Inclusion algorithm must be automatically chosen based on filter data.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.IncludeAlgorithm.ComplexCondition">
            <summary>
            Inclusion is described as a complex condition (expression).
            </summary>
        </member>
        <member name="F:Xtensive.Orm.IncludeAlgorithm.TemporaryTable">
            <summary>
            Inclusion is described via temporary table.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.JoinType">
            <summary>
            Join operation type.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.JoinType.Inner">
            <summary>
            Inner join.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.JoinType.LeftOuter">
            <summary>
            Left outer join.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.JoinType.Default">
            <summary>
            Default join operation type.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.LockBehavior">
            <summary>
            Lock behavior.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockBehavior.Wait">
            <summary>
            Wait until a lock is released.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockBehavior.ThrowIfLocked">
            <summary>
            Throw exception if a lock is occupied.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockBehavior.Skip">
            <summary>
            Skip locked records.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockBehavior.Default">
            <summary>
            Default lock behavior. Equals to <see cref="F:Xtensive.Orm.LockBehavior.Wait"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.LockMode">
            <summary>
            Lock mode.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockMode.Shared">
            <summary>
            Shared lock.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockMode.Update">
            <summary>
            Lock for the following update.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockMode.Exclusive">
            <summary>
            Exclusive lock.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.LockMode.Default">
            <summary>
            Default lock mode. Equals to <see cref="F:Xtensive.Orm.LockMode.Shared"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.MappedColumn">
            <summary>
            Mapped column of the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.Clone(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name"><see cref="P:Xtensive.Orm.Rse.Column.Name"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.#ctor(Xtensive.Orm.Model.ColumnInfoRef,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="columnInfoRef"><see cref="P:Xtensive.Orm.Rse.MappedColumn.ColumnInfoRef"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.MappedColumn.#ctor(Xtensive.Orm.Model.ColumnInfoRef,System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="columnInfoRef"><see cref="P:Xtensive.Orm.Rse.MappedColumn.ColumnInfoRef"/> property value.</param>
            <param name="name"><see cref="P:Xtensive.Orm.Rse.Column.Name"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.MappedColumn.ColumnInfoRef">
            <summary>
            Gets the reference that describes a column.
            </summary>    
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.ApplyProviderCorrector">
            <summary>
            Converts <see cref="T:Xtensive.Orm.Rse.Providers.ApplyProvider"/> to <see cref="T:Xtensive.Orm.Rse.Providers.PredicateJoinProvider"/>, if possible.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.ApplyProviderCorrector.Process(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.ApplyProviderCorrector.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="throwOnCorrectionFault">if set to <see langword="true"/> 
            then <see cref="T:System.InvalidOperationException"/> will be thrown in case of 
            the correction's fault; otherwise the origin <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> 
            will be returned.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.OrderingCorrector">
            <summary>
            Corrects an ordering of records.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.OrderingCorrector.Xtensive#Orm#Rse#Compilation#IPreCompiler#Process(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.OrderingCorrector.#ctor(System.Func{Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="orderingDescriptorResolver">The resolver of
            <see cref="T:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor"/>.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor">
            <summary>
            Descriptor of a provider's ordering behavior.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.IsOrderSensitive">
            <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> 
            is sensitive to records order.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.PreservesOrder">
            <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> 
            preserves records order.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.BreaksOrder">
            <summary>
            Gets a value indicating whether the provider is order breaker,
            such as <see cref="T:Xtensive.Orm.Rse.Providers.UnionProvider"/> or <see cref="T:Xtensive.Orm.Rse.Providers.ConcatProvider"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.IsSorter">
            <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> 
            sorts records.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="isOrderSensitive">value of <see cref="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.IsOrderSensitive"/>.</param>
            <param name="preservesOrder">value of <see cref="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.PreservesOrder"/>.</param>
            <param name="isOrderingBoundary">value of <see cref="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.BreaksOrder"/>.</param>
            <param name="isSorter">value of <see cref="F:Xtensive.Orm.Rse.Transformation.ProviderOrderingDescriptor.IsSorter"/>.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.SkipTakeCorrector">
            <summary>
            Corrects an using of <see cref="T:Xtensive.Orm.Rse.Providers.SkipProvider"/> and <see cref="T:Xtensive.Orm.Rse.Providers.TakeProvider"/>
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.SkipTakeCorrector.Xtensive#Orm#Rse#Compilation#IPreCompiler#Process(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.ColumnMappingInspector.VisitFreeText(Xtensive.Orm.Rse.Providers.FreeTextProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Rse.Transformation.RedundantColumnOptimizer">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Compilation.IPreCompiler"/> implementation that removes redundant columns in tree.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Transformation.RedundantColumnOptimizer.Xtensive#Orm#Rse#Compilation#IPreCompiler#Process(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.AggregateProvider">
            <summary>
            Compilable provider that applies aggregate functions to grouped columns from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.UnaryProvider">
            <summary>
            Base class for unary operation provider over the <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.UnaryProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.UnaryProvider.#ctor(Xtensive.Orm.Rse.Providers.ProviderType,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="type">The type of the provider.</param>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source">
            <summary>
            Source provider.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AggregateProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AggregateProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AggregateProvider.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AggregateProvider.GetAggregateColumnType(System.Type,Xtensive.Orm.Rse.AggregateType)">
            <summary>
            Gets the type of the aggregate column according to a <see cref="T:Xtensive.Orm.Rse.AggregateType"/> and original column type.
            </summary>
            <param name="sourceColumnType">Type of the source column.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <returns>The type of aggregate column.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AggregateProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Int32[],Xtensive.Orm.Rse.AggregateColumnDescriptor[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Orm.Rse.Providers.AggregateProvider.AggregateColumns"/>.</param>
            <param name="groupIndexes">The column indexes to group by.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.AggregateProvider.AggregateColumns">
            <summary>
            Gets the aggregate columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.AggregateProvider.GroupColumnIndexes">
            <summary>
            Gets column indexes to group by.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.AggregateProvider.Transform">
            <summary>
            Gets header resize transform.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.AliasProvider">
            <summary>
            Aliases the <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> with specified <see cref="P:Xtensive.Orm.Rse.Providers.AliasProvider.Alias"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AliasProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AliasProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.AliasProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.String)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="alias">The <see cref="P:Xtensive.Orm.Rse.Providers.AliasProvider.Alias"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.AliasProvider.Alias">
            <summary>
            Alias of the result.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ApplyProvider">
            <summary>
            Compilable provider that iterates over <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> 
            provider result for each item from the <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> provider.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.BinaryProvider">
            <summary>
            Base class for binary operation provider over 
            the <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> providers.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.BinaryProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.BinaryProvider.#ctor(Xtensive.Orm.Rse.Providers.ProviderType,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="type">The type of provider.</param>
            <param name="left">The <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> provider.</param>
            <param name="right">The <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> provider.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left">
            <summary>
            Left source.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right">
            <summary>
            Right source.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.IInlinableProvider">
            <summary>
            A compilable provider, which columns can be inlined during translation to SQL.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IInlinableProvider.IsInlined">
            <summary>
            Gets a value indicating whether columns of a provider should be inlined.
            For non-SQL storages this property has no effect on compilation.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ApplyProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ApplyProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ApplyProvider.#ctor(Xtensive.Orm.Rse.ApplyParameter,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ApplyProvider.#ctor(Xtensive.Orm.Rse.ApplyParameter,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Orm.Rse.ApplySequenceType,Xtensive.Orm.Rse.JoinType)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ApplyProvider.ApplyParameter">
            <summary>
            Gets the apply parameter.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ApplyProvider.IsInlined">
            <summary>
            Gets a value indicating whether columns of this provider should be inlined.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ApplyProvider.ApplyType">
            <summary>
            Gets apply type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ApplyProvider.SequenceType">
            <summary>
            Gets a value indicating whether applying of single or first row expected.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.CalculateProvider">
            <summary>
            Compilable provider that calculates columns from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CalculateProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CalculateProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CalculateProvider.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CalculateProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.CalculatedColumnDescriptor[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Orm.Rse.Providers.CalculateProvider.CalculatedColumns"/>.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.CalculateProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Orm.Rse.CalculatedColumnDescriptor[])">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="isInlined">The <see cref="P:Xtensive.Orm.Rse.Providers.CalculateProvider.IsInlined"/> property value.</param>
            <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Orm.Rse.Providers.CalculateProvider.CalculatedColumns"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.CalculateProvider.IsInlined">
            <summary>
            Gets a value indicating whether calculated columns should be inlined.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.CalculateProvider.CalculatedColumns">
            <summary>
            Gets the calculated columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.CalculateProvider.ResizeTransform">
            <summary>
            Gets header resize transform.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ConcatProvider">
            <summary>
            Produces concatenation between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ConcatProvider.EnsureConcatIsPossible">
            <exception cref="T:System.InvalidOperationException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ConcatProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
             Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider to intersect.</param>
            <param name="right">The right provider to intersect.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.DistinctProvider">
            <summary>
            Distinct provider
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.DistinctProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ExceptProvider">
            <summary>
            Produces except operation between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExceptProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
             Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider to execute except operation.</param>
            <param name="right">The right provider to to execute except operation.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ExistenceProvider">
            <summary>
            Compilable provider that returns <see cref="T:System.Boolean"/> column. 
            Column value is <see langword="true"/> if <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> contains any result; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExistenceProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.ExistenceProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.ExistenceProvider.ExistenceColumnName">
            <summary>
            Gets the name of the existence column.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.FilterProvider">
            <summary>
            Compilable provider that declares filtering operation 
            over the <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.FilterProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.FilterProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,System.Boolean}})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The source provider.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.FilterProvider.Predicate">
            <summary>
            Filtering predicate expression.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.FilterProvider.CompiledPredicate">
            <summary>
            Gets the compiled <see cref="P:Xtensive.Orm.Rse.Providers.FilterProvider.Predicate"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.FreeTextProvider">
            <summary>
            Executes full-text search (free text query) against specified <see cref="P:Xtensive.Orm.Rse.Providers.FreeTextProvider.PrimaryIndex"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.IncludeProvider">
            <summary>
            Compilable provider that returns <see cref="T:System.Boolean"/> column. 
            Column value is <see langword="true"/> if source value equal to one of provided values; 
            otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.IncludeProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.IncludeProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.IncludeAlgorithm,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}}},System.String,System.Int32[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">A value for <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.</param>
            <param name="algorithm">A value for <see cref="P:Xtensive.Orm.Rse.Providers.IncludeProvider.Algorithm"/>.</param>
            <param name="isInlined">A value for <see cref="P:Xtensive.Orm.Rse.Providers.IncludeProvider.IsInlined"/>.</param>
            <param name="filterDataSource">A value for <see cref="P:Xtensive.Orm.Rse.Providers.IncludeProvider.FilterDataSource"/>.</param>
            <param name="resultColumnName">A value for <see cref="P:Xtensive.Orm.Rse.Providers.IncludeProvider.ResultColumnName"/>.</param>
            <param name="filteredColumns">A value for <see cref="P:Xtensive.Orm.Rse.Providers.IncludeProvider.FilteredColumns"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IncludeProvider.IsInlined">
            <summary>
            Gets a value indicating whether result column should be inlined.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IncludeProvider.ResultColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IncludeProvider.Algorithm">
            <summary>
            Gets the algorithm that performes filtering.
            For non-SQL storages value of this field has no effect.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IncludeProvider.FilteredColumns">
            <summary>
            Gets the filtered columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IncludeProvider.FilterDataSource">
            <summary>
            Gets filter data.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.IndexProvider">
            <summary>
            Gives access to the specified <see cref="P:Xtensive.Orm.Rse.Providers.IndexProvider.Index"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.IndexProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.IndexProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.IndexProvider.Index">
            <summary>
            Reference to the <see cref="T:Xtensive.Orm.Model.IndexInfo"/> instance within the domain.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.IntersectProvider">
            <summary>
            Produces intersect operation between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.IntersectProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
             Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider to intersect.</param>
            <param name="right">The right provider to intersect.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.JoinProvider">
            <summary>
            Produces equality join between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.JoinProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.JoinProvider.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.JoinProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.JoinType,Xtensive.Core.Pair{System.Int32}[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider to join.</param>
            <param name="right">The right provider to join.</param>
            <param name="joinType">The join operation type.</param>
            <param name="equalIndexes">The <see cref="P:Xtensive.Orm.Rse.Providers.JoinProvider.EqualIndexes"/> property value.</param>
            <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.JoinProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.JoinType,System.Int32[])">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider to join.</param>
            <param name="right">The right provider to join.</param>
            <param name="joinType">The join operation type.</param>
            <param name="equalIndexes">Transformed to the <see cref="P:Xtensive.Orm.Rse.Providers.JoinProvider.EqualIndexes"/> property value.</param>
            <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.JoinProvider.JoinType">
            <summary>
            Join operation type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.JoinProvider.EqualIndexes">
            <summary>
            Pairs of equal column indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.JoinProvider.EqualColumns">
            <summary>
            Pairs of equal columns.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.LockProvider">
            <summary>
            Acquires the lock for a data in a source provider.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Providers.LockProvider.LockMode">
            <summary>
            The delegate returning the mode of the lock to be acquired.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Providers.LockProvider.LockBehavior">
            <summary>
            The delegate returning the behavior of the lock.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.LockProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.LockMode,Xtensive.Orm.LockBehavior)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="lockMode">The mode of the lock to be acquired.</param>
            <param name="lockBehavior">The behavior of the lock.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.LockProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Func{Xtensive.Orm.LockMode},System.Func{Xtensive.Orm.LockBehavior})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="lockMode">The delegate returning the mode of the lock to be acquired.</param>
            <param name="lockBehavior">The delegate returning the behavior of the lock.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.OrderProviderBase">
            <summary>
            Base class for any compilable sorting providers (such as <see cref="T:Xtensive.Orm.Rse.Providers.SortProvider"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.OrderProviderBase.OrderKeyExtractor(Xtensive.Tuples.Tuple)">
            <summary>
            Extracts the key part from <paramref name="tuple"/> using <see cref="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.OrderKeyExtractorTransform"/>.
            </summary>
            <param name="tuple">The tuple to extract the key from.</param>
            <returns>A tuple containing extracted order key.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.OrderProviderBase.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.OrderProviderBase.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.OrderProviderBase.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.OrderProviderBase.#ctor(Xtensive.Orm.Rse.Providers.ProviderType,Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Collections.DirectionCollection{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="providerType">Provider type.</param>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="order">The <see cref="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.Order"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.Order">
            <summary>
            Sort order of the index.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.OrderKeyExtractorTransform">
            <summary>
            Gets the key extractor transform.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.PagingProvider">
            <summary>
            Compilable provider that skips X result records and takes Y result records from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.PagingProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.PagingProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Func{System.Int32},System.Func{System.Int32})">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="take">The <see cref="P:Xtensive.Orm.Rse.Providers.PagingProvider.Take"/> property value.</param>
            <param name="skip">The <see cref="P:Xtensive.Orm.Rse.Providers.PagingProvider.Skip"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.PagingProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Int32,System.Int32)">
            <summary>
            	Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="skip">The value for <see cref="P:Xtensive.Orm.Rse.Providers.PagingProvider.Skip"/> function property.</param>
            <param name="take">The value for <see cref="P:Xtensive.Orm.Rse.Providers.PagingProvider.Take"/> function property.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.PagingProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.PagingProvider)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="pagingProvider">The paging provider.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PagingProvider.From">
            <summary>
            From number function.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PagingProvider.To">
            <summary>
            To number function.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PagingProvider.Skip">
            <summary>
            Skip amount function.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PagingProvider.Take">
            <summary>
            Take amount function.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.PredicateJoinProvider">
            <summary>
            Produces join between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources by <see cref="P:Xtensive.Orm.Rse.Providers.PredicateJoinProvider.Predicate"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.PredicateJoinProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Boolean}},Xtensive.Orm.Rse.JoinType)">
            <summary>
            Initializes a new instance of this class.
            </summary>  
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PredicateJoinProvider.JoinType">
            <summary>
            Join operation type.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.PredicateJoinProvider.Predicate">
            <summary>
            Gets the predicate.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.RawProvider">
            <summary>
            Enumerates specified array of <see cref="T:Xtensive.Tuples.Tuple"/> instances.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RawProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RawProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RawProvider.#ctor(Xtensive.Orm.Rse.RecordSetHeader,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}}})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="header">The <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Header"/> property value.</param>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.RawProvider.Source"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.RawProvider.Source">
            <summary>
            Raw data source - an array of tuples.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.RawProvider.CompiledSource">
            <summary>
            Gets the compiled <see cref="P:Xtensive.Orm.Rse.Providers.RawProvider.Source"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.RowNumberProvider">
            <summary>
            Compilable provider that adds row number to <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RowNumberProvider.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RowNumberProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.RowNumberProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="columnName">The name of <see cref="P:Xtensive.Orm.Rse.Providers.RowNumberProvider.SystemColumn"/>.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.RowNumberProvider.SystemColumn">
            <summary>
            Gets the row number column.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.RowNumberProvider.ResizeTransform">
            <summary>
            Gets header resize transform.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.SeekProvider">
            <summary>
            Compilable provider that returns one record if it matches specified <see cref="P:Xtensive.Orm.Rse.Providers.SeekProvider.Key"/> from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SeekProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SeekProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Func{Xtensive.Tuples.Tuple})">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="key">The <see cref="P:Xtensive.Orm.Rse.Providers.SeekProvider.Key"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SeekProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Tuples.Tuple)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="key">Wrapped to <see cref="P:Xtensive.Orm.Rse.Providers.SeekProvider.Key"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.SeekProvider.Key">
            <summary>
            Seek parameter.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.SelectProvider">
            <summary>
            Compilable provider that declares select operator over the <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SelectProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SelectProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SelectProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Int32[])">
            <summary>
              Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.SelectProvider.ColumnIndexes">
            <summary>
            Indexes of columns that should be selected from the <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.SkipProvider">
            <summary>
            Compilable provider that skips result records from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>. Skip amount is specified using <see cref="P:Xtensive.Orm.Rse.Providers.SkipProvider.Count"/> property.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SkipProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SkipProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="count">The <see cref="P:Xtensive.Orm.Rse.Providers.SkipProvider.Count"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SkipProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Int32)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="count">The value for <see cref="P:Xtensive.Orm.Rse.Providers.SkipProvider.Count"/> function property.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.SkipProvider.Count">
            <summary>
            Skip amount function.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.SortProvider">
            <summary>
            Compilable provider that sorts the 
            <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> by <see cref="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.Order"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.SortProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Collections.DirectionCollection{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="order">The <see cref="P:Xtensive.Orm.Rse.Providers.OrderProviderBase.Order"/> property value.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.StoreProvider">
            <summary>
            Provides access to some previously stored named <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> 
            or stores the specified <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Source"/> with the specified <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Name"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.StoreProvider.BuildHeader">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.StoreProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.StoreProvider.#ctor(Xtensive.Orm.Rse.RecordSetHeader,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="header">The <see cref="P:Xtensive.Orm.Rse.Providers.Provider.Header"/> property value.</param>
            <param name="name">The <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.StoreProvider.#ctor(Xtensive.Orm.Rse.Providers.Provider,System.String)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Source"/> property value.</param>
            <param name="name">The <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.StoreProvider.#ctor(Xtensive.Orm.Rse.Providers.Provider)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="source">The <see cref="P:Xtensive.Orm.Rse.Providers.StoreProvider.Source"/> property value.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.StoreProvider.Name">
            <summary>
            Gets the name of saved data.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.StoreProvider.Source">
            <summary>
            Source provider.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.TakeProvider">
            <summary>
            Compilable provider that takes first N result records from <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/>. Amount of records is specified using <see cref="P:Xtensive.Orm.Rse.Providers.TakeProvider.Count"/> property.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.TakeProvider.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.TakeProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="count">The <see cref="P:Xtensive.Orm.Rse.Providers.TakeProvider.Count"/> property value.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.TakeProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,System.Int32)">
            <summary>
              Initializes a new instance of this class.
            </summary>
            <param name="provider">The <see cref="P:Xtensive.Orm.Rse.Providers.UnaryProvider.Source"/> property value.</param>
            <param name="count">The value for <see cref="P:Xtensive.Orm.Rse.Providers.TakeProvider.Count"/> function property.</param>
        </member>
        <member name="P:Xtensive.Orm.Rse.Providers.TakeProvider.Count">
            <summary>
            Take amount function.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.UnionProvider">
            <summary>
            Produces union between <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Left"/> and 
            <see cref="P:Xtensive.Orm.Rse.Providers.BinaryProvider.Right"/> sources.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.UnionProvider.EnsureUnionIsPossible">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Orm.Rse.Providers.UnionProvider.#ctor(Xtensive.Orm.Rse.Providers.CompilableProvider,Xtensive.Orm.Rse.Providers.CompilableProvider)">
            <summary>
             Initializes a new instance of this class.
            </summary>
            <param name="left">The left provider for union.</param>
            <param name="right">The right provider for union.</param>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.EnumerationContextOptions">
            <summary>
            Various options for <see cref="T:Xtensive.Orm.Rse.Providers.EnumerationContext"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Providers.EnumerationContextOptions.None">
            <summary>
            Empty option set.
            </summary>
        </member>
        <member name="F:Xtensive.Orm.Rse.Providers.EnumerationContextOptions.GreedyEnumerator">
            <summary>
            Indicates that <see cref="T:System.Collections.Generic.IEnumerator`1"/> of the root provider
            should be fully read before returning data to user.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.Providers.ProviderType">
            <summary>
            Enumerates all supported provider types.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.CompilableProviderExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.Providers.CompilableProvider"/> related extension methods.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.RecordSet">
            <summary>
            Provides access to a sequence of <see cref="T:Xtensive.Tuples.Tuple"/>s
            exposed by its <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.GetGreedyEnumerator">
            <summary>
              Way 1: preloading all the data into memory and returning it inside this scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.GetBatchedEnumerator">
            <summary>
              Way 2: batched enumeration with periodical context activation
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.GetGreedyEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Way 1: asynchroniously preloading all the data into memory and returning it inside this scope.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.GetBatchedEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Way 2: batched async enumeration.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Orm.Rse.RecordSetHeader">
            <summary>
            Header of <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Alias(System.String)">
            <summary>
            Aliases the header.
            </summary>
            <param name="alias">The alias to apply.</param>
            <returns>Aliased header.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Add(Xtensive.Orm.Rse.Column)">
            <summary>
            Adds the specified column to header.
            </summary>
            <param name="column">The column.</param>
            <returns>The constructed header.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Add(System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column})">
            <summary>
            Adds the specified columns to header.
            </summary>
            <param name="columns">The columns.</param>
            <returns>The constructed header.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Join(Xtensive.Orm.Rse.RecordSetHeader)">
            <summary>
            Joins the header with the specified one.
            </summary>
            <param name="joined">The header to join.</param>
            <returns>The joined header.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Select(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Selects the specified columns from the header.
            </summary>
            <param name="selectedColumns">The indexes of columns to select.</param>
            <returns>A new header containing only specified columns.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.Sort(Xtensive.Collections.DirectionCollection{System.Int32})">
            <summary>
            Sorts the header in the specified order.
            </summary>
            <param name="sortOrder">Order to sort this header in.</param>
            <returns>A new sorted header.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.GetHeader(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> object for the specified <paramref name="indexInfo"/>.
            </summary>
            <param name="indexInfo">The index info to get the header for.</param>
            <returns>The <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> object.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tupleDescriptor">Descriptor of the result item.</param>
            <param name="columns">Result columns.</param>    
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tupleDescriptor">Descriptor of the result item.</param>
            <param name="columns">Result columns.</param>    
            <param name="groups">Column groups.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column},Xtensive.Tuples.TupleDescriptor,Xtensive.Collections.DirectionCollection{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tupleDescriptor">Descriptor of the result item.</param>
            <param name="columns">Result columns.</param>    
            <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
            <param name="order">Result sort order.</param>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Orm.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup},Xtensive.Tuples.TupleDescriptor,Xtensive.Collections.DirectionCollection{System.Int32})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="tupleDescriptor">Descriptor of the result item.</param>
            <param name="columns">Result columns.</param>    
            <param name="groups">Column groups.</param>
            <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
            <param name="order">Result sort order.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>columns.Count</c> is out of range.</exception>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.Length">
            <summary>
            Gets the length of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.ColumnGroups">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.Columns">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> columns.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.TupleDescriptor">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> tuple descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.Order">
            <summary>
            Gets the indexes of columns <see cref="T:Xtensive.Orm.Rse.Providers.Provider"/> is ordered by.
            </summary>
        </member>
        <member name="P:Xtensive.Orm.Rse.RecordSetHeader.OrderTupleDescriptor">
            <summary>
            Gets the tuple descriptor describing 
            a set of <see cref="P:Xtensive.Orm.Rse.RecordSetHeader.Order"/> columns.
            </summary>
        </member>
        <member name="T:Xtensive.Orm.Rse.RecordSetHeaderExtensions">
            <summary>
            <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeaderExtensions.IndexOf(Xtensive.Orm.Rse.RecordSetHeader,System.String)">
            <summary>
            Gets index of column with specified name.
            </summary>
            <param name="header">The header to search in.</param>
            <param name="columnName">Name of the column to get.</param>
            <returns>Index of the specified column.
            <see langword="-1" />, if there is no column with specified name.</returns>
        </member>
        <member name="M:Xtensive.Orm.Rse.RecordSetHeaderExtensions.GetRecordSetHeader(Xtensive.Orm.Model.IndexInfo)">
            <summary>
            Gets the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> object for the specified <paramref name="indexInfo"/>.
            </summary>
            <param name="indexInfo">The index info to get the header for.</param>
            <returns>The <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/> object.</returns>
        </member>
        <member name="T:Xtensive.Orm.Rse.SystemColumn">
            <summary>
            System column of the <see cref="T:Xtensive.Orm.Rse.RecordSetHeader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Orm.Rse.SystemColumn.Clone(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.SystemColumn.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Orm.Rse.SystemColumn.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="name"><see cref="P:Xtensive.Orm.Rse.Column.Name"/> property value.</param>
            <param name="index"><see cref="P:Xtensive.Orm.Rse.Column.Index"/> property value.</param>
            <param name="type"><see cref="P:Xtensive.Orm.Rse.Column.Type"/> property value.</param>
        </member>
        <member name="T:Xtensive.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Strings._Culture">
            <summary>
              Looks up a localized string similar to Culture.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ActualModel">
            <summary>
              Looks up a localized string similar to Actual Model.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ActualTargetModel">
            <summary>
              Looks up a localized string similar to Actual target model.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AnyCulture">
            <summary>
              Looks up a localized string similar to *.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ApplyingRuleXToY">
            <summary>
              Looks up a localized string similar to Applying rule &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExApplyingXToPropertyYFailedZ">
            <summary>
              Looks up a localized string similar to Applying [{0}] to property &apos;{1}&apos; failed. {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExBothLocalizableMessageResourceAndNotLocalizableMessageCanNotBeSpecifiedAtOnceLocationX">
            <summary>
              Looks up a localized string similar to Both localizable message resource and not localizable message can not be specified at once (location: {0})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExFieldConstraintCanNotBeAppliedToReadOnlyPropertyX">
            <summary>
              Looks up a localized string similar to Field constraint can not be applied to read only property {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExMultipleAttributesOfTypeXAreNotAllowedHere">
            <summary>
              Looks up a localized string similar to {0}: multiple attributes of type &apos;{1}&apos; are not allowed here..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExNoComparer">
            <summary>
              Looks up a localized string similar to [{0}] attribute on &apos;{1}&apos; requires a comparer for type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExXAndYPropertiesMustBeUsedTogetherLocationZ">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; and &apos;{1}&apos; properties must be used together (location: {2})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.AspectExXDoesNotSupportYValueTypeLocationZ">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not support &apos;{1}&apos; value type (location: {2})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Associations">
            <summary>
              Looks up a localized string similar to Associations.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.BoxFormat">
            <summary>
              Looks up a localized string similar to Box({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CachedFormat">
            <summary>
              Looks up a localized string similar to Cached({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CantAccessMemberX">
            <summary>
              Looks up a localized string similar to Can&apos;t access member &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CantChangeTypeOfColumnX">
            <summary>
              Looks up a localized string similar to  (can&apos;t change type of column &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CantRemoveColumnX">
            <summary>
              Looks up a localized string similar to  (can&apos;t remove column &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CantRemoveTableX">
            <summary>
              Looks up a localized string similar to  (can&apos;t remove table &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Columns">
            <summary>
              Looks up a localized string similar to Columns.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ColumnX">
            <summary>
              Looks up a localized string similar to  Column: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Comma">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ComparisonRuleFormat">
            <summary>
              Looks up a localized string similar to ComparisonRule({0}, {1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ComparisonRulesFormat">
            <summary>
              Looks up a localized string similar to ComparisonRules({0}, [{1}]).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ComprehensiveLogFormat">
            <summary>
              Looks up a localized string similar to {0,6:F2}s @{1,-5} {2,5} {3,-24} {4}{5}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ConstraintX">
            <summary>
              Looks up a localized string similar to  Constraint: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.CustomDefinitions">
            <summary>
              Looks up a localized string similar to Custom Definitions.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.DatabaseX">
            <summary>
              Looks up a localized string similar to  Database: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.DateMustBeInThePast">
            <summary>
              Looks up a localized string similar to Date must be in the past..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Difference">
            <summary>
              Looks up a localized string similar to Difference.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.DifferenceFormat">
            <summary>
              Looks up a localized string similar to &quot;{1}&quot; != &quot;{2}&quot; ({0}): {3}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.DifferencePropertyNamePrefix">
            <summary>
              Looks up a localized string similar to +{0}: .
            </summary>
        </member>
        <member name="P:Xtensive.Strings.EmptyString">
            <summary>
              Looks up a localized string similar to &apos;&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.EntireFormat">
            <summary>
              Looks up a localized string similar to Entire({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.EntityStateFormat">
            <summary>
              Looks up a localized string similar to Key = &apos;{0}&apos;, Tuple = {1}, State = {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.EntityWithKeyXDoesNotExist">
            <summary>
              Looks up a localized string similar to Entity with Key = &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.EntityX">
            <summary>
              Looks up a localized string similar to Entity: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAccessedMemberIsNotProperty">
            <summary>
              Looks up a localized string similar to The accessed member is not a property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAccessToTypeMemberCanNotBeExtractedFromSpecifiedExpression">
            <summary>
              Looks up a localized string similar to The access to a type&apos;s member can not be extracted from the specified expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExActiveSerializationContextIsNotFound">
            <summary>
              Looks up a localized string similar to Active serialization context is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExActiveSessionIsRequiredForThisOperation">
            <summary>
              Looks up a localized string similar to Active Session is required for this operation. Use Session.Open(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExActiveTransactionIsRequiredForThisOperationUseSessionOpenTransactionToOpenIt">
            <summary>
              Looks up a localized string similar to Active Transaction is required for this operation. Use Session.OpenTransaction(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExActualConjunctionOperandCountGreaterThanExpected">
            <summary>
              Looks up a localized string similar to Actual conjunction operand count greater than MaxConjunctionOperandCount..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExActualSchemaVersionOfAssemblyXIsExpectedToBeYButCurrentlyItIsZ">
            <summary>
              Looks up a localized string similar to Actual schema version of assembly &apos;{0}&apos; is expected to be &apos;{1}&apos;, but currently it is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAggregateMethodXIsNotSupported">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; expression. Aggregate method &apos;{1} is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAggregatesForNonPrimitiveTypesAreNotSupported">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; expression. Aggregates for non primitive types are not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAggregateXIsNotSupportedForTypeY">
            <summary>
              Looks up a localized string similar to Aggregate &apos;{0}&apos; is not supported for type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAllMethodIsOnlySupportedForRootExpressionsOrSubqueries">
            <summary>
              Looks up a localized string similar to &apos;All&apos; method is only supported for root expressions or subqueries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAlreadyCompleted">
            <summary>
              Looks up a localized string similar to UndoDescriptor is already completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAlreadyDisposed">
            <summary>
              Looks up a localized string similar to Object is already disposed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAlreadyInitialized">
            <summary>
              Looks up a localized string similar to Instance is already initialized..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAnyMethodIsOnlySupportedForRootExpressionsOrSubqueries">
            <summary>
              Looks up a localized string similar to &apos;Any&apos; method is only supported for root expressions or subqueries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentCannotBeEmptyString">
            <summary>
              Looks up a localized string similar to Argument can&apos;t be an empty string..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentMustBeGreaterThanX">
            <summary>
              Looks up a localized string similar to Argument must be greater than &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentMustBeGreaterThatOrEqualX">
            <summary>
              Looks up a localized string similar to Argument must be greater that or equal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentMustBeLessThanOrEqualX">
            <summary>
              Looks up a localized string similar to Argument must be less than or equal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentMustBeLessThanX">
            <summary>
              Looks up a localized string similar to Argument must be less than &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentMustnotBeOfTypeX">
            <summary>
              Looks up a localized string similar to The argument must not be of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentShouldBeInRange">
            <summary>
              Looks up a localized string similar to Argument should be in range [{0}...{1}]..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentValueMustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Argument value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentValueMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Argument value must be greater than zero..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArgumentXIsLessThanArgumentY">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is less than the argument &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArrayDoesNotHaveZeroBasedIndexing">
            <summary>
              Looks up a localized string similar to Array does not have zero-based indexing..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExArrayIsMultidimensional">
            <summary>
              Looks up a localized string similar to Array is multidimentional..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExASetOfExceptionsIsCaught">
            <summary>
              Looks up a localized string similar to A set of exceptions is caught..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAsOperatorSupportsEntityOnly">
            <summary>
              Looks up a localized string similar to &apos;as&apos; operator supports casting only inside Entity hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAssemblyVersionMismatchMainAssemblyXYExtensionsAssemblyAB">
            <summary>
              Looks up a localized string similar to Assembly version mismatch: main assembly &apos;{0} {1}&apos;, extension assembly &apos;{2} {3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAssociationAttributeCanNotBeAppliedToXField">
            <summary>
              Looks up a localized string similar to &apos;AssociationAttribute&apos; can&apos;t be applied to &apos;{0}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAssociationMultiplicityIsNotValidForField">
            <summary>
              Looks up a localized string similar to Association multiplicity &apos;{0}&apos; is not valid for field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAtLeastOneColumnIndexPairMustBeSpecified">
            <summary>
              Looks up a localized string similar to At least one column index pair must be specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAtLeastOneLoopHaveBeenFoundInPersistentTypeDependenciesGraphSuspiciousTypesX">
            <summary>
              Looks up a localized string similar to At least one loop have been found in persistent type dependencies graph. Suspicious types: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAtomicContextIsSuspended">
            <summary>
              Looks up a localized string similar to AtomicContext is suspended..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExAttemptToAutomaticallyActivateSessionXInsideSessionYIsBlocked">
             <summary>
               Looks up a localized string similar to An attempt to automatically activate Session &apos;{0}&apos; inside Session &apos;{1}&apos; (Session switching) is blocked. 
            Most likely, mixed usage of objects from different Sessions is a result of a bug in your code. 
            Use manual Session activation (Session.Deactivate(), Session.Activate()) or 
            SessionOptions.AllowSwitching flag to avoid this exception, if this is intentional..
             </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBatchingCommandProcessorDoesNotSupportValidationOfNumberOfAffectedRows">
            <summary>
              Looks up a localized string similar to BatchingCommandProcessor does not support validation of number of affected rows..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBinaryExpressionsWithNodeTypeXAreNotSupported">
            <summary>
              Looks up a localized string similar to Binary expressions with NodeType = &apos;ExpressionType.{0}&apos; aren&apos;t supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBinaryExpressionXOfTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Binary expression &apos;{0}&apos; of type &apos;{1}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBindingFailedForX">
            <summary>
              Looks up a localized string similar to Binding has failed for {0}. Check property declaration..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotEntityExpressionEntityFieldExpression">
            <summary>
              Looks up a localized string similar to Both left and right part of binary expression &apos;{0}&apos; are NULL or not EntityExpression(EntityFieldExpression)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotKeyExpression">
            <summary>
              Looks up a localized string similar to Both left and right part of binary expression &apos;{0}&apos; are NULL or not KeyExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotStructureExpression">
            <summary>
              Looks up a localized string similar to Both left and right part of binary expression &apos;{0}&apos; are NULL or not StructureExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothMeasurementsHaveNoValue">
            <summary>
              Looks up a localized string similar to Both measurements have no value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothPartsOfBinaryExpressionXAreOfTheDifferentType">
            <summary>
              Looks up a localized string similar to Both parts of binary expression &apos;{0}&apos; are of the different type. Use type cast..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExBothSourceAndTargetAreNull">
            <summary>
              Looks up a localized string similar to Both Source and Target are null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotActivateServiceXErrorY">
            <summary>
              Looks up a localized string similar to Can&apos;t activate service &apos;{0}&apos;. Error: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotActivateServiceXWithKeyYErrorZ">
            <summary>
              Looks up a localized string similar to Can&apos;t activate service &apos;{0}&apos; with name &quot;{1}&quot;. Error: {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotAssociateNonEmptyEntityStateWithKeyOfUnknownType">
            <summary>
              Looks up a localized string similar to Attempt to associate non-empty EntityState with Key of unknown type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCommitATransactionEntitiesValidationFailed">
            <summary>
              Looks up a localized string similar to Can not commit a transaction. Entities validation failed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCommitATransactionValidationContextIsInInconsistentState">
            <summary>
              Looks up a localized string similar to Can not commit a transaction: ValidationContext is in inconsistent state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCommitATransactionValidationContextIsInInvalidState">
            <summary>
              Looks up a localized string similar to Can not commit a transaction. Validation context is in invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCompileNoCompiler">
            <summary>
              Looks up a localized string similar to Can&apos;t compile - active CompilationContext has no Compiler (Compiler is null)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCompileNoEnumerationContext">
            <summary>
              Looks up a localized string similar to Can&apos;t compile - no active EnumerationContext exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotCompleteOuterTransactionInnerTransactionIsActive">
            <summary>
              Looks up a localized string similar to Can not complete outer transaction: inner transaction is active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotExtractForeignKey">
            <summary>
              Looks up a localized string similar to Can&apos;t extract foreign key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotFindConstructorToExecuteX">
            <summary>
              Looks up a localized string similar to Can&apos;t find a constructor to execute {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotFindHandlerOfTypeX">
            <summary>
              Looks up a localized string similar to Cannot find a handler of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotFindReferenceToColumnX">
            <summary>
              Looks up a localized string similar to Can not find reference to column &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotGenerateNextVersionValueOfTypeX">
            <summary>
              Looks up a localized string similar to Can&apos;t generate next version value of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotGetValidationContextThereIsNoActiveTransaction">
            <summary>
              Looks up a localized string similar to Can not get validation context: there is no active transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotMarkStateAsModifiedItIsNotValidInCurrentTransaction">
            <summary>
              Looks up a localized string similar to Can not mark state as modified: it is not valid in current transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotMergeTheState">
            <summary>
              Looks up a localized string similar to Can&apos;t merge the state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotOpenMoreThanOneInnerTransaction">
            <summary>
              Looks up a localized string similar to Can not open more than one inner transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotOpenTransactionNoCurrentSession">
            <summary>
              Looks up a localized string similar to Can not open a transaction: there is no current Session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotParseCallToComparisonMethod">
            <summary>
              Looks up a localized string similar to Can&apos;t parse the call to the comparison method..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotPersistThereArePinnedEntities">
            <summary>
              Looks up a localized string similar to Can not persist: there are pinned entities..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotReadDatabaseAndSchemaNames">
            <summary>
              Looks up a localized string similar to Can not read database and schema names.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotResolveEntityWithKeyX">
            <summary>
              Looks up a localized string similar to Cannot resolve entity with key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotReuseOpenedTransactionRequestedIsolationLevelIsDifferent">
            <summary>
              Looks up a localized string similar to Can not reuse opened transaction: requested isolation level is different..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCanNotUpgradeSchemaSafely_DetailsX">
             <summary>
               Looks up a localized string similar to Cannot upgrade schema safely. Details:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCannotUseDefaultGeneratorForComplexKeys">
            <summary>
              Looks up a localized string similar to Cannot use default generator for complex (multicolumn) Keys..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantAccessMemberOfTypeEntitySet">
            <summary>
              Looks up a localized string similar to Can&apos;t access member of type &apos;EntitySet&lt;&gt;&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantCompileProviderX">
            <summary>
              Looks up a localized string similar to Can&apos;t compile the provider &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantConvertXToY">
            <summary>
              Looks up a localized string similar to Can&apos;t convert the {0} to the {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantCreateAssociateForGenericTypeDefinitions">
            <summary>
              Looks up a localized string similar to Can&apos;t create associates for generic type definitions (type &apos;{0}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantFindAssociate">
            <summary>
              Looks up a localized string similar to Can&apos;t find associated {0} of type &apos;{1}&apos; for type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantFindAssociate2">
            <summary>
              Looks up a localized string similar to Can&apos;t find associated {0} of type &apos;{1}&apos; for type &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantInvokeBlockingDescriptor">
            <summary>
              Looks up a localized string similar to Blocking descriptor can&apos;t be invoked..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantMergeState">
            <summary>
              Looks up a localized string similar to Can&apos;t merge state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantOpenEnumerationScopeSinceThereIsNoCurrentCompilationContext">
            <summary>
              Looks up a localized string similar to Can&apos;t open EnumerationScope, since there is no current CompilationContext..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantPassNoInfinityToThisConstructor">
            <summary>
              Looks up a localized string similar to InfinityType.None can&apos;t be passed to this constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCantRegisterState">
            <summary>
              Looks up a localized string similar to Can&apos;t register state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExChainedBufferRemoveMethodIsNotSupported">
            <summary>
              Looks up a localized string similar to ChainedBuffer.Remove() method is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCircularReferenceDetected">
            <summary>
              Looks up a localized string similar to Circular reference is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExClusteredIndexCanNotBeDeclaredInInterfaceX">
            <summary>
              Looks up a localized string similar to Clustered index can not be declared in interface &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionAlreadyContainsItemWithSpecifiedKey">
            <summary>
              Looks up a localized string similar to Collection already contains item with the specified key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionAlreadyContainsSpecifiedItem">
            <summary>
              Looks up a localized string similar to Collecton already contains specified item..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionHasBeenChanged">
            <summary>
              Looks up a localized string similar to Collection has been changed during the enumeration..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionHasBeenModified">
            <summary>
              Looks up a localized string similar to Collection has been modified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to Collection is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionOrCoutableExcpected">
            <summary>
              Looks up a localized string similar to Item should be either an ICollection or ICountable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCollectionPropertyXIsBoundToPropertyYThatIsNotCollection">
            <summary>
              Looks up a localized string similar to The collection property {0} is bound to the property {1} that isn&apos;t collection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnAlreadyHasSpecifiedName">
            <summary>
              Looks up a localized string similar to Column already has specified name..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnBelongsToOtherTable">
            <summary>
              Looks up a localized string similar to Column belongs to other table..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnGroupCouldNotBeFound">
            <summary>
              Looks up a localized string similar to Column group could not be found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnLength">
            <summary>
              Looks up a localized string similar to Value length {0} is greater than column length {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnNotNullable">
            <summary>
              Looks up a localized string similar to Unable to assign null to non-nullable column..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnsUsedByCalculatedColumnExpressionContainingApplyParameterAreRemoved">
            <summary>
              Looks up a localized string similar to Columns used by the CalculatedColumn&apos;s expression containing the ApplyParameter are removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnsUsedByPredicateContainingApplyParameterAreRemoved">
            <summary>
              Looks up a localized string similar to Columns used by the predicate containing ApplyParameter are removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnXContainsBothKeyAndValueCollections">
            <summary>
              Looks up a localized string similar to Column &quot;{0}&quot; contains both key and value collections..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnXIsNotFound">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExColumnXIsNotFoundInTableY">
            <summary>
              Looks up a localized string similar to Column with name &apos;{0}&apos; is not found in table &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCommandsAreAlreadyTranslated">
            <summary>
              Looks up a localized string similar to Commands are already translated..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExComparerForTypeIsNotAvailable">
            <summary>
              Looks up a localized string similar to Comparer for type &apos;{0}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerContainerAttributeIsNotAppliedToTypeX">
            <summary>
              Looks up a localized string similar to [CompilerContainer] attribute isn&apos;t applied to type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerForXIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Compiler for {0} is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXHasInvalidTargetMember">
            <summary>
              Looks up a localized string similar to Compiler {0} has invalid target member..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXHasInvalidTargetType">
            <summary>
              Looks up a localized string similar to Compiler {0} has invalid target type: target type should be either non-generic or generic type definition..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXHasTooManyParameters">
            <summary>
              Looks up a localized string similar to Compiler {0} has too many parameters..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXShouldHaveMemberInfoParameter">
            <summary>
              Looks up a localized string similar to Compiler {0} should have first parameter of type MemberInfo.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXShouldHaveParameterYOfTypeZ">
            <summary>
              Looks up a localized string similar to Compiler {0} should have parameter {1} of type {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXShouldHaveThisParameter">
            <summary>
              Looks up a localized string similar to Compiler {0} should have &quot;this&quot; parameter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompilerXShouldReturnY">
            <summary>
              Looks up a localized string similar to Compiler {0} should return {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCompleteMustBeCalledJustOnce">
            <summary>
              Looks up a localized string similar to Complete method must be called just once..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConcurrencyConflict">
            <summary>
              Looks up a localized string similar to Concurrency conflict..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile">
            <summary>
              Looks up a localized string similar to Configuration for Domain with name &apos;{0}&apos; is not found in application configuration file (section &apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConfigurationWithXNameAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Configuration with &apos;{0}&apos; name already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionInfoIsMissing">
            <summary>
              Looks up a localized string similar to ConnectionInfo is missing. If you are using configuration file you should specify either &apos;connectionUrl&apos; element or &apos;connectionString&apos; and &apos;provider&apos; elements.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrConnectionStringElement">
            <summary>
              Looks up a localized string similar to ConnectionInfo is wrong. You should set either  &apos;connectionUrl&apos; element or &apos;connectionString&apos; element..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrProviderAndConnectionStringElements">
            <summary>
              Looks up a localized string similar to ConnectionInfo is wrong. You should set either &apos;connectionUrl&apos; element or &apos;provider&apos; and &apos;connectionString&apos; elements..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionIsNotOpen">
            <summary>
              Looks up a localized string similar to Connection is not open..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionIsRequired">
            <summary>
              Looks up a localized string similar to Connection is required..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionStringWithNameXIsNotFound">
            <summary>
              Looks up a localized string similar to Connection string with name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConnectionStringWithNameXIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Connection string with name &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConstraintBelongsToOtherDomain">
            <summary>
              Looks up a localized string similar to Constraint belongs to other domain..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConstraintBelongsToOtherTable">
            <summary>
              Looks up a localized string similar to Constraint belongs to other table..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExConstraintViolation">
            <summary>
              Looks up a localized string similar to Constraint violation: constraint {0} on field &apos;{1}.{2}&apos; of object &apos;{3}&apos; failed on value {4}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExContainerTypeDoesNotProvideASuitableConstructor">
            <summary>
              Looks up a localized string similar to Container type does not provide a suitable constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExContainerTypeMustImplementX">
            <summary>
              Looks up a localized string similar to Container type must implement {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExContainsMethodIsOnlySupportedForRootExpressionsOrSubqueries">
            <summary>
              Looks up a localized string similar to &apos;Contains&apos; method is only supported for root expressions or subqueries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExContextMustBeActivated">
            <summary>
              Looks up a localized string similar to Context is not activated..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExContextRequired">
            <summary>
              Looks up a localized string similar to {0} is required. Use {1} to set it..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExControlCharacterUsedAsEscapeCharacter">
            <summary>
              Looks up a localized string similar to Control character used as escape character.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCopyToMustOperateWithDifferentStreams">
            <summary>
              Looks up a localized string similar to Unable to copy a part of the stream to itself. Use StreamExtensions.Copy method instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotConstructNewKeyInstanceTypeXIsNotAnEntity">
            <summary>
              Looks up a localized string similar to Could not construct new Key instance. Type &apos;{0}&apos; is not an entity..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotFindAnonymousMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find anonymous mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotFindEntityMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find entity mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotFindFieldSegmentForFieldX">
            <summary>
              Looks up a localized string similar to Could not find field segment for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotFindGroupingMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find grouping mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotFindSubqueryMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find subquery mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotGetMemberXFromExpression">
            <summary>
              Looks up a localized string similar to Could not get member {0} from expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotLoadTypesFromAssembly">
            <summary>
              Looks up a localized string similar to Could not load types from the assembly &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCouldNotResolveXYWithinDomain">
            <summary>
              Looks up a localized string similar to Could not resolve {0} &apos;{1}&apos; within the domain..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCultureOfAppliedRuleShouldBeEitherNullOrTheSameAsOnTarget">
            <summary>
              Looks up a localized string similar to Culture of the applied rule should either be undefined (null), or be the same as on target rule..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentCompilerIsNotSuitableForThisOperationMostLikelyThereIsNoActiveSession">
            <summary>
              Looks up a localized string similar to Current compiler is not suitable for this operation, most likely there is no active Session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentSessionGetterIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to Current session getter is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentStorageDoesNotSupportChangingColumnTypes">
            <summary>
              Looks up a localized string similar to Current storage does not support changing column types.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentStorageProviderDoesNotSupportSavepoints">
            <summary>
              Looks up a localized string similar to Current storage provider does not support savepoints (nested transactions)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentTypeOfExpressionXIsNotSupported">
            <summary>
              Looks up a localized string similar to Current type of expression &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCurrentTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Current type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCyclicDependencyBetweenDatabasesFoundX">
            <summary>
              Looks up a localized string similar to Cyclic dependency between databases found: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExCyclicDependencyInQueryPreprocessorGraphIsDetected">
            <summary>
              Looks up a localized string similar to Cyclic dependency in query preprocessor graph is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDatabaseMappingRequiresMultidatabaseDomainConfiguration">
            <summary>
              Looks up a localized string similar to Database mapping requires multidatabase domain configuration. Please provide at least DefaultDatabase and DefaultSchema settings..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDateTimeToStringMethodIsNotSupported">
            <summary>
              Looks up a localized string similar to DateTime.ToString() method is not supported, use the DateTime.ToString(&quot;s&quot;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDeadlock">
            <summary>
              Looks up a localized string similar to Deadlock was found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField">
            <summary>
              Looks up a localized string similar to Default generator can serve hierarchy with exactly one key field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDefaultSchemaAndDefaultDatabaseShouldBeSpecifiedWhenMultidatabaseModeIsActive">
            <summary>
              Looks up a localized string similar to DefaultSchema and DefaultDatabase should be specified when multi-database mode is active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDefaultSchemaShouldBeSpecifiedWhenMultischemaOrMultidatabaseModeIsActive">
            <summary>
              Looks up a localized string similar to DefaultSchema should be specified when multi-schema or multi-database mode is active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDefaultStorageNodeCanNotBeRemoved">
            <summary>
              Looks up a localized string similar to Default storage node can not be removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDefaultTypeIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Default type is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDependencyOperationIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Dependency operation with full name &quot;{0}&quot; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDescriptorIsInInvalidState">
            <summary>
              Looks up a localized string similar to Descriptor is in invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDeserializationErrorUnrecognizedSlotsAreFound">
            <summary>
              Looks up a localized string similar to Deserialization error: some SerializationData slots were not recognized, thus the format of the serialized data differs from the supported one..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDeserializationStreamLengthIncorrect">
            <summary>
              Looks up a localized string similar to Stream length not enough to deserialize object of specified type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDestionationArrayIsTooSmall">
            <summary>
              Looks up a localized string similar to Destionation array is too small..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDetectionOfChangesInUserStructureCollectionIsNotSupported">
            <summary>
              Looks up a localized string similar to The detection of changes in user structure collection isn&apos;t supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDifferenceRelatedToXTypeIsNotFoundOnTheUpgradeContextStack">
            <summary>
              Looks up a localized string similar to Difference related to {0} type is not found on the UpgradeContext stack..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDifferentTupleDescriptors">
            <summary>
              Looks up a localized string similar to Different TupleDescriptors are not valid here: {0} and {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDirectQueryingForEntitySetInCompiledQueriesIsNotSupportedUseQueryEndpointItemsInstead">
            <summary>
              Looks up a localized string similar to Direct querying for entity set in compiled queries is not supported, use QueryEndpoint.Items() instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDisconnectedStateIsAlreadyAttachedToSession">
            <summary>
              Looks up a localized string similar to DisconnectedState is already attached to session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDisconnectedStateIsDetached">
            <summary>
              Looks up a localized string similar to DisconnectedState is detached..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDowncastFromXToXNotSupportedUseOfTypeOrAsOperatorInstead">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; expression. Downcast from &apos;{1}&apos; to &apos;{2}&apos; not supported. Use &apos;OfType&apos; or &apos;as&apos; operator instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDuplicateAssemblyNameX">
            <summary>
              Looks up a localized string similar to Duplicate assembly name: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExDuplicateForOperationXIsFound">
            <summary>
              Looks up a localized string similar to The duplicate for the operation {0} is found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementAtDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to &apos;ElementAt&apos; does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementAtIndexMustBeGreaterOrEqualToZero">
            <summary>
              Looks up a localized string similar to ElementAt index must be greater or equal to zero..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementAtNotSupportedInCompiledQueries">
            <summary>
              Looks up a localized string similar to &apos;ElementAt({0})&apos; not supported in compiled queries (Query.Execute). Use &apos;ElementAt(Expression&lt;Func&lt;int&gt;&gt;)&apos; instead.For example use &apos;ElementAt(()=&gt;{0})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementAtOrDefaultDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to &apos;ElementAtOrDefault&apos; does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementAtOrDefaultNotSupportedInCompiledQueries">
            <summary>
              Looks up a localized string similar to &apos;ElementAtOrDefault({0})&apos; not supported in compiled queries (Query.Execute). Use &apos;ElementAtOrDefault(Expression&lt;Func&lt;int&gt;&gt;)&apos; instead.For example use &apos;ElementAtOrDefault(()=&gt;{0})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementWithNameContainedInThisInstanceAlready">
            <summary>
              Looks up a localized string similar to Element with name &apos;{0}&apos; is contained in this instance already..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExElementWithTypeIsContainedInThisInstanceAlready">
            <summary>
              Looks up a localized string similar to Element with type &apos;{0}&apos; is already contained in this instance..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEmptyColumnsCollection">
            <summary>
              Looks up a localized string similar to Columns collection is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEmptyKeyColumnsCollection">
            <summary>
              Looks up a localized string similar to KeyColumns collection is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEndPointOrderMustBeEqual">
            <summary>
              Looks up a localized string similar to EndPoints order of both ranges must be equal..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntitiesXAndXBelongToDifferentHierarchies">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos;. Entities &apos;{1}&apos; and &apos;{2}&apos; belong to different hierarchies..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityDoesNotHaveFullTextIndex">
            <summary>
              Looks up a localized string similar to Entity of type &apos;{0}&apos; does not have full-text index..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityIsAlreadyDetachedFromSession">
            <summary>
              Looks up a localized string similar to Entity is already detached from Session. Likely, this is result of creation of new Entity with the same Key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityIsInInconsistentState">
            <summary>
              Looks up a localized string similar to Entity is in inconsistent state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityIsRemoved">
            <summary>
              Looks up a localized string similar to Entity is removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityOfTypeXIsIncompatibleWithThisEntitySet">
            <summary>
              Looks up a localized string similar to Entity of type &apos;{0}&apos; is incompatible with this EntitySet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityRemoved">
            <summary>
              Looks up a localized string similar to Unable to modify removed entity..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntitySetCanTBeAssigned">
            <summary>
              Looks up a localized string similar to EntitySet can&apos;t be assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntitySetInvalidBecauseTransactionIsNotActive">
            <summary>
              Looks up a localized string similar to Entity set is invalid due to current transaction is not active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityWithKeyXAlreadyExists">
            <summary>
              Looks up a localized string similar to Entity with key &apos;{0}&apos; already exists.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEntityXIsBoundToAnotherSession">
            <summary>
              Looks up a localized string similar to Entity &apos;{0}&apos; is bound to another Session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEnumerationIsAlreadyFinished">
            <summary>
              Looks up a localized string similar to Enumeration is already finished..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEnumerationIsNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration is not started..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExErrorOnInsert">
            <summary>
              Looks up a localized string similar to Unable to insert instance of type &apos;{0}&apos; with specified key. Query affected {1} tables, but expected {2} tables..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExErrorOnUpdate">
            <summary>
              Looks up a localized string similar to Unable to update instance of type {0} with specified key. Query affected {1} tables, but expecrted {2} tables..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExErrorsDuringStorageBuild">
            <summary>
              Looks up a localized string similar to Some errors have been occurred during storage build. See error log for details..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExEscapeCharacterMustDifferFromDelimiterCharacter">
            <summary>
              Looks up a localized string similar to Escape character must differ from delimiter character..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExceptionHasBeenThrownByTheParameterValueAccessor">
            <summary>
              Looks up a localized string similar to Exception has been thrown by the parameter value accessor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExceptionHasBeenThrownByTheUserMemberCompiler">
            <summary>
              Looks up a localized string similar to Exception has been thrown by the user member compiler..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExceptionWasThrownDuringTaskExecution">
            <summary>
              Looks up a localized string similar to The exception was thrown during the task&apos;s execution..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExcludeFieldsDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to ExcludeFields does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpectedValueOfParameterIsAlreadySet">
            <summary>
              Looks up a localized string similar to The expected value of the parameter is already set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpression0MustReferenceField">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; must reference field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpression0MustReferenceProperty">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; must reference property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpressionDefinedOutsideOfCachingQueryClosure">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; defined outside of CachingQuery closure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpressionHavingDifferentNormalFormMustNotBeRoot">
            <summary>
              Looks up a localized string similar to The expression having the different normal form must not be a root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpressionHavingEqualNormalFormMustBeRoot">
            <summary>
              Looks up a localized string similar to The expression having the equal normal form must be a root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpressionMustReturnValueOfTypeX">
            <summary>
              Looks up a localized string similar to The expression must return a value of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExpressionXIsNotASequence">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; is not a sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExtractedSchemaIsNotCompatibleWithTheTargetSchema_DetailsX">
             <summary>
               Looks up a localized string similar to Extracted schema is not compatible with the target schema. Details:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.ExExtractedSchemaIsNotEqualToTheTargetSchema_DetailsX">
             <summary>
               Looks up a localized string similar to Extracted schema is not equal to the target schema. Details:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldBelongsToADifferentType">
            <summary>
              Looks up a localized string similar to Field belongs to a different type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldIsInfinite">
            <summary>
              Looks up a localized string similar to Field with index &apos;{0}&apos; is infinitу..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldIsNotAnEntityField">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an Entity field in Type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldIsNotStructure">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not structure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldMustBeOfEntitySetType">
            <summary>
              Looks up a localized string similar to Field must be of EntitySet&lt;&gt; type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldMustBePersistent">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; must be persistent (marked by [Field] attribute)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldNotFoundInModel">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not found in model..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldOfTypeXCannotBeNullableForValueTypesConsiderUsingNullableT">
            <summary>
              Looks up a localized string similar to Field of type &apos;{0}&apos; cannot be nullable. For value types consider using Nullable&lt;T&gt;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldWithNameAlreadyExistsInEntityFieldsCollection">
            <summary>
              Looks up a localized string similar to Field with name &apos;{0}&apos; already exists in EntityInfo.Fields collection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldWithNameXIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Field with name &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXCannotBeLazyLoadAsItIsIncludedInPrimaryKey">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; cannot be LazyLoad as it is included into primary key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXCannotBeNullableAsItIsIncludedInPrimaryKey">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; cannot be Nullable as it is included into primary key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXHasYTypeButIsMarkedAsNotNullable">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; has &apos;{1}&apos; type but is marked as not nullable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsAlreadyDefinedInTypeXOrItsAncestor">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is already defined in type &apos;{1}&apos; or in its ancestor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotAnEntityReferenceNorEntitySet">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an entity reference, nor entity set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotAnEntitySet">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an entity set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotAnEntitySetField">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an EntitySet field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotDeclaredInTypeYOrInOneOfItsAncestors">
            <summary>
              Looks up a localized string similar to The field {0} is not declared in the type {1} or in one of its ancestors..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotEntity">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not entity..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXIsNotPrimitive">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not primitive..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXNotFoundInTypeX">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; not found in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXYIsAlreadyPairedWithABRemoveCD">
            <summary>
              Looks up a localized string similar to Field &apos;{0}.{1}&apos; is already paired with &apos;{2}.{3}&apos;. Please remove [Association] attribute at &apos;{4}.{5}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFieldXYIsNotFound">
            <summary>
              Looks up a localized string similar to Field &apos;{0}.{1}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFilterTupleDescriptorMistmatchesWithSourceMappingDescriptor">
            <summary>
              Looks up a localized string similar to Filter tuple descriptor mistmatches with source mapping descriptor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExForeignKeyValueHaveNotBeenLoaded">
            <summary>
              Looks up a localized string similar to The foreign key&apos;s value have not been loaded..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFreeTextNotSupportedInCompiledQueries">
            <summary>
              Looks up a localized string similar to &apos;FreeText&lt;T&gt;({0})&apos; not supported in compiled queries (Query.Execute). Use &apos;FreeText&lt;T&gt;(Expression&lt;Func&lt;int&gt;&gt;)&apos; instead.For example use &apos;FreeText&lt;T&gt;(()=&gt;{0})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExFunctionXIsNotSupported">
            <summary>
              Looks up a localized string similar to Function &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExGenericParameterShouldBeOfTypeT">
            <summary>
              Looks up a localized string similar to Generic parameter &apos;{0}&apos; should be of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExGivenKeyNotPresent">
            <summary>
              Looks up a localized string similar to The given key was not present in the dictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExGroupByOverloadXIsNotSupported">
            <summary>
              Looks up a localized string similar to GroupBy overload &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExHierarchyIsNotFoundForTypeX">
            <summary>
              Looks up a localized string similar to Hierarchy is not found for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExHierarchyRootIsNotRegistered">
            <summary>
              Looks up a localized string similar to Hierarchy root is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExHierarchyXDoesntContainAnyKeyFields">
            <summary>
              Looks up a localized string similar to Hierarchy &apos;{0}&apos; doesn&apos;t contain any key fields..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExHintXIsConflictingWithHintY">
            <summary>
              Looks up a localized string similar to Hint &apos;{0}&apos; is conflicting with hint &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIgnoreRuleXMustBeAppliedToColumnOrTable">
            <summary>
              Looks up a localized string similar to Ignore rule &apos;{0}&apos; must be applied to column or table..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExImplementorsOfXInterfaceBelongToHierarchiesOneOfWhichIncludesTypeIdButAnotherDoesntYZ">
            <summary>
              Looks up a localized string similar to Implementors of {0} interface belong to hierarchies one of which includes TypeId, but another doesn&apos;t: {1} &amp; {2}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExImplementorsOfXInterfaceBelongToHierarchiesWithDifferentKeyStructureYZ">
            <summary>
              Looks up a localized string similar to Implementors of {0} interface belong to hierarchies with different key structure: {1} &amp; {2}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInadmissibleTypeConversion">
            <summary>
              Looks up a localized string similar to Conversion from type {0} to type {1} is inadmissible..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncludeFieldsDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to IncludeFields does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncompatibleArrayType">
            <summary>
              Looks up a localized string similar to Incompatible array type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInconsistentComparisons">
            <summary>
              Looks up a localized string similar to The two collections cannot be combined because they use different comparison operations..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncorrectCommandParameters">
            <summary>
              Looks up a localized string similar to Incorrect command parameters..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncorrectNamespaceSynonyms">
            <summary>
              Looks up a localized string similar to Incorrect namespace synonyms..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncorrectStageValue">
            <summary>
              Looks up a localized string similar to Incorrect Stage value: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIncrementMustNotBeZero">
            <summary>
              Looks up a localized string similar to Increment must not be 0..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexAlreadyContainsField">
            <summary>
              Looks up a localized string similar to Index already contains field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexedPropertiesAreNotSupported">
            <summary>
              Looks up a localized string similar to Indexed properties are not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexesOfColumnsToBeLoadedAreNotSpecified">
            <summary>
              Looks up a localized string similar to Indexes of columns to be loaded are not specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexFieldXIsIncorrect">
            <summary>
              Looks up a localized string similar to Index field &apos;{0}&apos; is incorrect..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexIsChanged">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; is changed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexMustContainAtLeastOneField">
            <summary>
              Looks up a localized string similar to Index must contain at least one field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexNameXIsInvalid">
            <summary>
              Looks up a localized string similar to Index name &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index is out of range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexShouldBeInNMRange">
            <summary>
              Looks up a localized string similar to Index should be in [{0}...{1}] range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection">
            <summary>
              Looks up a localized string similar to Index with name &apos;{0}&apos; already exists in EntityInfo.Indexes collection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexWithNameXIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Index with name &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexXCanNotBeBothPartialAndClustered">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; can not be both partial and clustered.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIndexXIsNotFound">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInheritanceSchemaIsInvalid">
            <summary>
              Looks up a localized string similar to Inheritance schema &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceIsEmpty">
            <summary>
              Looks up a localized string similar to Instance is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceIsLocked">
            <summary>
              Looks up a localized string similar to Instance is locked..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceMultipleResults">
            <summary>
              Looks up a localized string similar to Multiple instances of type &apos;{0}&apos; with specified key are found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceMustBeLockedBeforeThisOperation">
            <summary>
              Looks up a localized string similar to Instance must be locked before this operation..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceMustHaveSyncRoot">
            <summary>
              Looks up a localized string similar to A instance must have non-null IHasSyncRoot.SyncRoot property value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInstanceNotFound">
            <summary>
              Looks up a localized string similar to Instance of type &apos;{0}&apos; with specified key is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInterfaceXDoesNotBelongToXHierarchy">
            <summary>
              Looks up a localized string similar to Interface &apos;{0}&apos; does not belong to &apos;{1}&apos; hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInterfaceXIsImplementedByTypesMappedToDifferentDatabasesYZ">
            <summary>
              Looks up a localized string similar to Interface &apos;{0}&apos; is implemented by types mapped to different databases: {1}, {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInternalError">
            <summary>
              Looks up a localized string similar to Internal error: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidActionType">
            <summary>
              Looks up a localized string similar to Invalid action type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidActiveScope">
            <summary>
              Looks up a localized string similar to Active scope is invalid - it differs from the expected one. Probably you have forgot to dispose some nested scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidAfterPathPropertyValue">
            <summary>
              Looks up a localized string similar to Invalid AfterPath property value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidArgumentsNonNullTypeNameIsAllowedIfAndOnlyIfTypeEqualsSqlTypeUnknown">
            <summary>
              Looks up a localized string similar to Invalid arguments: non-null &apos;typeName&apos; is allowed if and only if &apos;type&apos; equals &apos;SqlType.Unknown&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidArgumentsPrecisionAndLengthShouldNotBeUsedTogether">
            <summary>
              Looks up a localized string similar to Invalid arguments: &apos;precision&apos; and &apos;length&apos; should not be used together.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidArgumentsScaleAndPrecisionShouldBeUsedTogether">
            <summary>
              Looks up a localized string similar to Invalid arguments: &apos;scale&apos; and &apos;precision&apos; should be used together.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidArgumentType">
            <summary>
              Looks up a localized string similar to Invalid argument type: expected type is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidBooleanStringX">
            <summary>
              Looks up a localized string similar to Invalid boolean string &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidCapacity">
            <summary>
              Looks up a localized string similar to The specified capacity value is less than collection count..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidCast">
            <summary>
              Looks up a localized string similar to Cast from &apos;{0}&apos; to &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidConstraintType">
            <summary>
              Looks up a localized string similar to Invalid constraint type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidContextActivationSequence">
            <summary>
              Looks up a localized string similar to Invalid context activation sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidContextDeactivationSequence">
            <summary>
              Looks up a localized string similar to Invalid context deactivation sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidDirectionValue">
            <summary>
              Looks up a localized string similar to Invalid Direction value (Direction.None)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalideIncrementValue">
            <summary>
              Looks up a localized string similar to Increment value must be greater then zero..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidExpressionType">
            <summary>
              Looks up a localized string similar to Invalid expression type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidFieldMapSizeExpectedX">
            <summary>
              Looks up a localized string similar to Invalid field map size. Expected {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidFieldNameX">
            <summary>
              Looks up a localized string similar to Invalid field name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidFieldValueConstraintXIsViolated">
            <summary>
              Looks up a localized string similar to Invalid field value, constraint {0} is violated..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidFillFactorXValueMustBeBetween0And1">
            <summary>
              Looks up a localized string similar to Invalid fill factor &apos;{0}&apos;. Value must be between 0 and 1..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidForeignKeyStructure">
            <summary>
              Looks up a localized string similar to Invalid ForeignKey structure: its column sequence do not match PrimaryKey column sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidFormatterProcessType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; formatter process type is invalid for the current operation..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidIncludedColumnsCollection">
            <summary>
              Looks up a localized string similar to IncludedColumns collection is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidKeyParams">
            <summary>
              Looks up a localized string similar to Unable to create Key. Key params do not correspond to its structure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidKeyString">
            <summary>
              Looks up a localized string similar to String representaion of the Key has invalid format..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidLengthAttributeOnXField">
            <summary>
              Looks up a localized string similar to Invalid Length attribute on &apos;{0}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidMappingNameX">
            <summary>
              Looks up a localized string similar to Invalid mapping name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidNestingOfNodeX">
            <summary>
              Looks up a localized string similar to Invalid Nesting of node &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidNodeIdentifier">
            <summary>
              Looks up a localized string similar to Invalid node identifier..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidNodeState">
            <summary>
              Looks up a localized string similar to Invalid node state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidNumberOfParametersInNewExpression">
            <summary>
              Looks up a localized string similar to Invalid number of parameters in NewExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidObjectSerializerSimilarValueSerializerExists">
            <summary>
              Looks up a localized string similar to Object serializer is invalid, since similar value serializer exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidParentValue">
            <summary>
              Looks up a localized string similar to Invalid Parent value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidPrecisionAttributeOnFieldX">
            <summary>
              Looks up a localized string similar to Invalid Precision attribute on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidPrefetchSelectorX">
            <summary>
              Looks up a localized string similar to Invalid prefetch selector &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidPrimaryKeyColumnsCollection">
            <summary>
              Looks up a localized string similar to PrimaryKeyColumns collection is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidPrimaryKeyStructure">
            <summary>
              Looks up a localized string similar to Invalid PrimaryKeyInfo structure: sequence KeyColumns and ValueColumns do not match sequence of all the Columns of the table..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidRecordType">
            <summary>
              Looks up a localized string similar to Record with invalid (possibly - unspecified) type is found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidScaleAttributeOnFieldX">
            <summary>
              Looks up a localized string similar to Invalid Scale attribute on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidScopeDisposalOrder">
            <summary>
              Looks up a localized string similar to Invalid scope disposal order..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidSerializerBehaviorMustNotBeReferable">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; can&apos;t be an IsReferable serializer, since it serializes IReference type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidSerializerType">
            <summary>
              Looks up a localized string similar to Generic parameter T is resolved to associated &apos;{0}&apos;, although &apos;{1}&apos; is expected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidSession">
            <summary>
              Looks up a localized string similar to The Session of specified ISessionBound object is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidSortExpressionX">
            <summary>
              Looks up a localized string similar to Invalid sort expression &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidTransactionState">
            <summary>
              Looks up a localized string similar to Invalid transaction state (&apos;{0}&apos;). Expected state(s) is (are) &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidTupleDescriptorExpectedDescriptorIs">
            <summary>
              Looks up a localized string similar to Invalid TupleDescriptor. Expected descriptor is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidUpgraderVersion">
            <summary>
              Looks up a localized string similar to Invalid upgrader version..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidUrl">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is invalid URL..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidUsageOfTheOrientationArgument">
            <summary>
              Looks up a localized string similar to Invalid usage of the &quot;orientation&quot; argument..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExInvalidUsageOfTheRowCountArgument">
            <summary>
              Looks up a localized string similar to Invalid usage of the &quot;rowCount&quot; argument..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExIsolationLevelXIsNotSupported">
            <summary>
              Looks up a localized string similar to Isolation level &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemAlreadyExists">
            <summary>
              Looks up a localized string similar to Item already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemByKeyXWasNotFound">
            <summary>
              Looks up a localized string similar to Item by key =&apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemCantBeCachedIncompatibleType">
            <summary>
              Looks up a localized string similar to The specified item cannot be cached because its type is incompatible with underlying storage format..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemCantBeComparedIncompatibleType">
            <summary>
              Looks up a localized string similar to The specified item cannot be cached because its type is incompatible with ITuple..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemIsInUse">
            <summary>
              Looks up a localized string similar to Specified item is already in use..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemIsNotInUse">
            <summary>
              Looks up a localized string similar to Specified item is not in use..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemIsNotPooled">
            <summary>
              Looks up a localized string similar to Specified item isn&apos;t pooled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemNotFound">
            <summary>
              Looks up a localized string similar to Specified item isn&apos;t found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemNotFoundInEntitySet">
            <summary>
              Looks up a localized string similar to Item is not found in EntitySet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemsForCycleXAreNotSpecified">
            <summary>
              Looks up a localized string similar to Items for cycle &apos;{0}&apos; are not specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithKeyXWasNotFound">
            <summary>
              Looks up a localized string similar to Item with key &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithNameWasNotFound">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithNameXAlreadyExistsInY">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; already exists in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithNameXIsNotFound">
            <summary>
              Looks up a localized string similar to Item with Name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExItemWithTheSameKeyHasBeenAdded">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExJoinExpressionShouldBeNullForCrossApplyAndOuterApply">
            <summary>
              Looks up a localized string similar to Join expression should be NULL for CROSS APPLY &amp; OUTER APPLY..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyAlreadyExists">
            <summary>
              Looks up a localized string similar to Key already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyCanNotBeNull">
            <summary>
              Looks up a localized string similar to Key can not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyComparerNotSupportedInGroupJoin">
            <summary>
              Looks up a localized string similar to Unable to translate expression &apos;{0}&apos;. Key comparer is not supported in GroupJoin..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyContainsMultipleFieldsWithIsTypeIdTrueFlag">
            <summary>
              Looks up a localized string similar to Key contains multiple fields with IsTypeId==true flag..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyFieldCantBeOfXType">
            <summary>
              Looks up a localized string similar to Key field can&apos;t be of &apos;{0}&apos; type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyFieldsXAndXHaveTheSamePositionX">
            <summary>
              Looks up a localized string similar to Key fields &apos;{0}&apos; and &apos;{1}&apos; have the same position: &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyFieldXInTypeYShouldNotHaveSetAccessor">
            <summary>
              Looks up a localized string similar to Key property &apos;{0}&apos; declared in &apos;{1}&apos; should not have public or protected set accessor. Use base protected constructor to set Key value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyFieldXWasNotFoundInTypeY">
            <summary>
              Looks up a localized string similar to Key field &apos;{0}&apos; was not found in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyFieldXXIsNotFound">
            <summary>
              Looks up a localized string similar to Key field &apos;{0}.{1}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyGeneratorAttributeOnTypeXRequiresNameToBeSet">
            <summary>
              Looks up a localized string similar to [KeyGenerator] attribute on type &apos;{0}&apos; requires Name to be set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyGeneratorsXAndYHaveTheSameSeedValue">
            <summary>
              Looks up a localized string similar to Key generators &apos;{0}&apos; and &apos;{1}&apos; have the same seed value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyIndexesAreSpecifiedForNonGenericKey">
            <summary>
              Looks up a localized string similar to Key indexes are specified for non-generic Key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyMustHaveExactType">
            <summary>
              Looks up a localized string similar to Key must have exact type here..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyOfSpecifiedTypeCannotBeGeneratedByThisKeyGenerator">
            <summary>
              Looks up a localized string similar to Key of specified type cannot be generated by this KeyGenerator..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyOfXDoesNotMatchKeyOfY">
            <summary>
              Looks up a localized string similar to Key of &apos;{0}&apos; does not match key of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch">
            <summary>
              Looks up a localized string similar to Key provider &apos;{0}&apos; and hierarchy {1} key field amount mismatch..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyProviderXShouldDefineAtLeastOneKeyField">
            <summary>
              Looks up a localized string similar to Key provider &apos;{0}&apos; should define at least one key field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeysOfXAndXNotCompatible">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos;. Keys of &apos;{1}&apos; and &apos;{2}&apos; not compatible..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyStructureForXContainsNULLValue">
            <summary>
              Looks up a localized string similar to Key structure for &apos;{0}&apos; contains NULL value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyValuesArrayIsEmpty">
            <summary>
              Looks up a localized string similar to Key values array is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyXIsNotFound">
            <summary>
              Looks up a localized string similar to Key {0} is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyXShouldHaveExactType">
            <summary>
              Looks up a localized string similar to Key {0} should have exact type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExKeyXWasNotFoundInStorage">
            <summary>
              Looks up a localized string similar to Key &apos;{0}&apos; was not found in storage..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLambdaExpressionReturnedByXShouldReturnValueThatIsAssignableToY">
            <summary>
              Looks up a localized string similar to LambdaExpression returned by &apos;{0}&apos; should return value that is assignable to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLambdaExpressionReturnedByXShouldTakeOneParameterOfTypeYOrAnyBaseTypeOfIt">
            <summary>
              Looks up a localized string similar to LambdaExpression returned by &apos;{0}&apos; should take one parameter of type &apos;{1}&apos; or any base type of it.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLambdaParameterIsOutOfScope">
            <summary>
              Looks up a localized string similar to Lambda parameter is out of scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLambdaParameterXIsOutOfScope">
            <summary>
              Looks up a localized string similar to Lambda parameter &apos;{0}&apos; is out of scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLambdaXMustHaveOnlyOneParameter">
            <summary>
              Looks up a localized string similar to Lambda &apos;{0}&apos; must have only one parameter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLeftJoinDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to LeftJoin does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLegacySchemaIsNotCompatible_DetailsX">
             <summary>
               Looks up a localized string similar to Legacy schema is not compatible. Details: 
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLengthConstraintViolationOnFieldX">
            <summary>
              Looks up a localized string similar to &apos;Length&apos; constraint violation on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLengthShouldBeNotNegativeValue">
            <summary>
              Looks up a localized string similar to Length should be not negative value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLimitOfGraphDepthIsExceeded">
            <summary>
              Looks up a localized string similar to The limit of the graph depth is exceeded..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLinkedOperationMissingFormat">
            <summary>
              Looks up a localized string similar to Linked operation for property {0} missing..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLinqTranslatorDoesNotSupportMethodX">
            <summary>
              Looks up a localized string similar to Unable to translate expression &apos;{0}&apos;. LINQ translator does not support method &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLiteralTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Literal type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLocalCollectionShouldNotBeQueryRoot">
            <summary>
              Looks up a localized string similar to Local collection should not be query root..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLockDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to Lock does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLockXIsNotSupported">
            <summary>
              Looks up a localized string similar to Lock &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLogManagerAlreadyInitialized">
            <summary>
              Looks up a localized string similar to LogManager already initialized..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLogManagerMustBeInitializedBeforeUsing">
            <summary>
              Looks up a localized string similar to LogManager must be initialized before using..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExLoopInActionDependencyChain">
            <summary>
              Looks up a localized string similar to Loop in action dependency chain is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMappingForPropertyXHasAlreadyBeenRegistered">
            <summary>
              Looks up a localized string similar to The mapping for the property {0} has already been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMaterializationErrorTypeIdColumnDoesNotExistsInTheUnderlyingRecordSet">
            <summary>
              Looks up a localized string similar to Materialization error: Entity&apos;s TypeId column does not exist in the underlying RecordSet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMaxItemCountIsN">
            <summary>
              Looks up a localized string similar to Maximal item count is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMeasurementIsAlreadyCompleted">
            <summary>
              Looks up a localized string similar to Measurement is already completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMeasurementMustHaveValue">
            <summary>
              Looks up a localized string similar to Measurement &apos;{0}&apos; must have value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMemberIsNotPublicPropertyOrField">
            <summary>
              Looks up a localized string similar to Member: &apos;{0}&apos; is not a Public Property or Field of Type: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMemberXIsNotFoundCheckThatSuchMemberExists">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; is not found. Check that either static parameterless method or static property with such name exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMemberXIsNotSupported">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMemberXOfTypeYIsNotInitializedCheckIfConstructorArgumentIsCorrectOrFieldInitializedThroughInitializer">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; of type &apos;{1}&apos; is not initialized. Check if constructor argument is correct or field initialized through initializer..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMemberXShouldReturnValueThatIsAssignableToLambdaExpression">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; should return value that is assignable to LambdaExpression.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMergeOperationRequireIntersectionOfOperands">
            <summary>
              Looks up a localized string similar to Merge operation require intersection of operands..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMethodCallExpressionXIsNotSupported">
            <summary>
              Looks up a localized string similar to MethodCall expression &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMethodXIsntSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; method isn&apos;t supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMethodXNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMinMaxValuesAreNotSupportedForTupleFieldAdvancedComparer">
            <summary>
              Looks up a localized string similar to MinMaxValues aren&apos;t supported for TupleFieldAdvancedComparer..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMistmatchCountOfLeftAndRightExpressions">
            <summary>
              Looks up a localized string similar to Mistmatch count of left and right expressions..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExModelObjectCannotBeRemoved">
            <summary>
              Looks up a localized string similar to Model object cannot be removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMoreThanOneEnabledXIsProvidedForAssemblyY">
            <summary>
              Looks up a localized string similar to More than one enabled {0} is provided for assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMoreThenOneIncludedColumnReferenceToColumnX">
            <summary>
              Looks up a localized string similar to IncludedColumns collection contains more then one reference to column &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMoreThenOneKeyColumnReferenceToColumnX">
            <summary>
              Looks up a localized string similar to KeyColumns collection contains more then one reference to column &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMoreThenOneValueColumnReferenceToColumnX">
            <summary>
              Looks up a localized string similar to ValueColumns collection contains more then one reference to column &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultidatabaseModeIsActiveButNoDatabaseSpecifiedForX">
            <summary>
              Looks up a localized string similar to Multi-database mode is active, but no database specified for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleAssociatesMatch">
            <summary>
              Looks up a localized string similar to Multiple associates match type &apos;{0}&apos; by its interfaces (at least &apos;{1}&apos; and &apos;{2}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleAttributesOfTypeXAreNotAllowedHere">
            <summary>
              Looks up a localized string similar to {0}: multiple attributes of type &apos;{1}&apos; are not allowed here..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleHintsFound">
            <summary>
              Looks up a localized string similar to Multiple hints found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleLanguagesNotSupportedForFulltextColumnXOfIndexY">
            <summary>
              Looks up a localized string similar to Multiple languages not supported for fulltext column {0} of index {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleResults">
            <summary>
              Looks up a localized string similar to Specified query returns multiple results..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultipleServicesMatchToTheSpecifiedArguments">
            <summary>
              Looks up a localized string similar to Multiple services match to the specified arguments..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExMultischemaModeIsActiveButNoSchemaSpecifiedForX">
            <summary>
              Looks up a localized string similar to Multi-schema mode is active, but no schema specified for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNameForParameterXIsNotFound">
            <summary>
              Looks up a localized string similar to Name for parameter &apos;{0}&apos; is not found&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNameMustBeNotNullOrEmpty">
            <summary>
              Looks up a localized string similar to Name must be not null or empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNameXIsInvalid">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNestedCollectionIsNotSupported">
            <summary>
              Looks up a localized string similar to Nested collection is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNestedFieldXIsNotSupported">
            <summary>
              Looks up a localized string similar to Nested field &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoAvailableItems">
            <summary>
              Looks up a localized string similar to There are no more available items..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoCurrentComparer">
            <summary>
              Looks up a localized string similar to Comparer.Current is null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoCurrentSession">
            <summary>
              Looks up a localized string similar to There is no current Session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoCurrentUpgrader">
            <summary>
              Looks up a localized string similar to Upgarder.Current is null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNodeTypeIsUnknown">
            <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNodeXMustBeProcessedBeforeBeingComparedAsReferenceValueOfYZ">
            <summary>
              Looks up a localized string similar to Node &quot;{0}&quot; must be processed before being compared as reference (value of &quot;{1}&quot;.{2})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoMessageTemplateIsRegisteredForCodeX">
            <summary>
              Looks up a localized string similar to No message template is registered for code: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNonEnumParametersForEnumHasFlagAreNotSupported">
            <summary>
              Looks up a localized string similar to Non-enum parameters for Enum.HasFlag are not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoNesting">
            <summary>
              Looks up a localized string similar to Nesting must be created for any node..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNonLinqCallsAreNotSupportedWithinQueryExecuteDelayed">
            <summary>
              Looks up a localized string similar to Non-LINQ calls are not supported within Query.ExecuteDelayed.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNonTemporaryKeysMustBeGeneratedByDescendants">
            <summary>
              Looks up a localized string similar to Non-temporary keys must be generated by descendants..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoObjectWithSpecifiedKey">
            <summary>
              Looks up a localized string similar to There is no object with specified key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoOperationRegistrationScope">
            <summary>
              Looks up a localized string similar to No operation registration scope. Use OperationRegistry.BeginRegistration method to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNormalizedExpressionMustBeRoot">
            <summary>
              Looks up a localized string similar to The normalized boolean expression must be the root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNormalizedExpressionMustHaveXForm">
            <summary>
              Looks up a localized string similar to The normalized boolean expression must have the &apos;{0}&apos; form..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNormalizedExpressionMustNotBeRoot">
            <summary>
              Looks up a localized string similar to The normalized boolean expression must not be the root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNotInitialized">
            <summary>
              Looks up a localized string similar to Instance is not initialized (or not initialized properly)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNotNullableConstraintViolationOnFieldX">
            <summary>
              Looks up a localized string similar to &apos;NotNullable&apos; constraint violation on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNoUpgradeHandlerIsFoundForAssemblyXVersionY">
            <summary>
              Looks up a localized string similar to No upgrade handler is found for assembly &apos;{0}&apos;, version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNullableAndNullableOnUpgradeCannotBeUsedWithXField">
            <summary>
              Looks up a localized string similar to Nullable and NullableOnUpgrade flags can&apos;t be used with &apos;{0}&apos; field. They can be used only with reference-typed fields (except Structure descendants)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExNullablePropertyXIsBoundToPropertyYThatIsNotNullable">
            <summary>
              Looks up a localized string similar to The nullable property {0} is bound to the property {1} that isn&apos;t nullable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExObjectAndContextAreIncompatible">
            <summary>
              Looks up a localized string similar to The specified object and the context are incompatible..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExObjectIsReadOnly">
            <summary>
              Looks up a localized string similar to Object is read-only..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOfTypeSupportsOnlyEntityConversion">
            <summary>
              Looks up a localized string similar to OfType supports casting only inside IEntity hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOldActiveOperationIsStillRunning">
            <summary>
              Looks up a localized string similar to You can&apos;t Activate new operation, since old ActiveOperation is still running..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyBreakableNodesSadSmile">
            <summary>
              Looks up a localized string similar to Only breakable nodes :(.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyEntitiesCouldBeHierarchyRoots">
            <summary>
              Looks up a localized string similar to Only entities could be hierarchy roots..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyEqualityRangesAreSupported">
            <summary>
              Looks up a localized string similar to Only equality ranges are supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyNormalizedExpressionCanBeAddedAsChildToRoot">
            <summary>
              Looks up a localized string similar to Only the normalized expression having the different normal form can be added as the immediate descendant to the root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyOneAncestorOfEachInstanceOfThisGenericTypeIsAllowed">
            <summary>
              Looks up a localized string similar to Only one ancestor of each instance of this generic type is allowed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyOneOperationCanBeRegisteredInEachScope">
            <summary>
              Looks up a localized string similar to Only one operation can be registered in each scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyOnePrimaryOperationCanBeLogged">
            <summary>
              Looks up a localized string similar to Only one primary operation can be logged by each OperationContext instance..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyPrefetchMethodSupportedButFoundX">
            <summary>
              Looks up a localized string similar to Only &apos;Prefetch(source, expression, params[] expressions)&apos; method is supported within prefetch expression. But found &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlyPropertAccessPrefetchOrAnonymousTypeSupportedButFoundX">
            <summary>
              Looks up a localized string similar to Only persistented property access, calls of Prefetch method or anonymous type constructors are supported, but found &apos;{0}&apos; expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlySecondaryIndexesCanBeDeclaredPartial">
            <summary>
              Looks up a localized string similar to Only secondary indexes can be declared partial..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlySingleColumnKeySupported">
            <summary>
              Looks up a localized string similar to Only single-column key supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnlySqlLiteralOrSqlPlaceholderCanBeUsedInLimitOffset">
            <summary>
              Looks up a localized string similar to Only SqlLiteral or SqlPlaceholder can be used in Limit/Offset.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOnOwnerRemoveActionIsNotEqualToOnTargetRemoveAction">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; OnOwnerRemove action is not equal to &apos;{2}.{3}&apos; OnTargetRemove action..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationIsNotMarkedAsStarted">
            <summary>
              Looks up a localized string similar to Operation isn&apos;t marked as started. See Sessopn.Operations.OperationStarted() method..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationIsNotRegisteredYet">
            <summary>
              Looks up a localized string similar to Operation isn&apos;t registered yet. See Session.Oeprations.RegisterOperations()..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationLinkTypeUndefined">
            <summary>
              Looks up a localized string similar to Operation LinkType should be defined before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationMustBeLocked">
            <summary>
              Looks up a localized string similar to Operation must be locked before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationPropertyNameUndefined">
            <summary>
              Looks up a localized string similar to Operation PropertyName must be specified before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationStartedIsAlreadyCalledForThisOperation">
            <summary>
              Looks up a localized string similar to OperatonStarted is alerady called for this operation..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOperationXIsNotSupported">
            <summary>
              Looks up a localized string similar to Operation &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOptionXIsMutuallyExclusiveWithOptionY">
            <summary>
              Looks up a localized string similar to Option &apos;{0}&apos; is mutually exclusive with option &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider">
            <summary>
              Looks up a localized string similar to The ordering of records is not specified for RowNumberProvider..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOrderKeyNotFoundInMapping">
            <summary>
              Looks up a localized string similar to Order key not found in mapping..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOriginIsNotNull">
            <summary>
              Looks up a localized string similar to Origin is not null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOriginIsNull">
            <summary>
              Looks up a localized string similar to Origin is null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOuterParameterReferenceFoundButNoSqlCompilerProvided">
            <summary>
              Looks up a localized string similar to Outer parameter reference found, but no SqlCompiler provided.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExOutOfTransactionScope">
            <summary>
              Looks up a localized string similar to Object is outside of initial transaction scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPairedFieldXHasWrongTypeItShouldBeReferenceToEntityOrAEntitySet">
            <summary>
              Looks up a localized string similar to Paired field &apos;{0}&apos; has wrong type. A descendant of Entity or EntitySet is expected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPairedFieldXYWasNotFoundInZType">
            <summary>
              Looks up a localized string similar to Paired field &apos;{0}.{1}&apos; was not found in &apos;{2}&apos; type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPairedIdentityColumnsForTypesXAndXNotFound">
            <summary>
              Looks up a localized string similar to Paired identity columns for types &apos;{0}&apos; and &apos;{1}&apos; not found.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPairToAttributeCanNotBeAppliedToXField">
            <summary>
              Looks up a localized string similar to [Association] attribute with PairTo can not be use with field &apos;{0}&apos; of type &apos;{1}&apos;. It is already applied to field &apos;{2}&apos; of type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExParameterExpressionMustHaveSameTypeAsProjectionExpressionItemProjector">
            <summary>
              Looks up a localized string similar to ParameterExpression must have same type as ProjectionExpression.ItemProjector.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExParametersCountIsNotSameAsSourceColumnListsCount">
            <summary>
              Looks up a localized string similar to Parameters count is not same as source column lists count..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExParameterXIsNotATupleAccessExpression">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; is not a tuple access expression.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPartOfUrlContainsForbiddenCharacters">
            <summary>
              Looks up a localized string similar to Part of URL contains forbidden characters. Forbidden characters: .
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPathXNotFound">
            <summary>
              Looks up a localized string similar to Node with path &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExpectedTargetModel">
            <summary>
              Looks up a localized string similar to Expected target model.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPersistentTypeXIsNotEntityOrPersistentInterface">
            <summary>
              Looks up a localized string similar to Persistent type &apos;{0}&apos; is not entity or persistent interface..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically">
            <summary>
              Looks up a localized string similar to Explicit mapping name setting is redundant. The same name &apos;{0}&apos; will be generated automatically..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPoolMustBeSyncronized">
            <summary>
              Looks up a localized string similar to Pool should be in syncronized mode to utilize AutoCleanup feature..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPoolWrongKey">
            <summary>
              Looks up a localized string similar to Item already exists in the pool with another key..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPortOutOfRange">
            <summary>
              Looks up a localized string similar to Port value must be in [0,65535] range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPositionValueShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Position value should be greater than zero..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrecisionShouldBeNonNegativeValue">
            <summary>
              Looks up a localized string similar to Precision should be non-negative value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPredicateContainsAccessesToDifferentApplyParameters">
            <summary>
              Looks up a localized string similar to Predicate contains accesses to different ApplyParameters..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrefetchDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to Prefetch does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExpressionsOfTypeXAreNotSupported">
            <summary>
              Looks up a localized string similar to expressions of type &apos;{0}&apos; are not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExpressionXIsUnknown">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; is unknown..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExpressionXShouldTakeYParameters">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; should take {1} parameters.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrimaryKeyColumnCanNotBeNullable">
            <summary>
              Looks up a localized string similar to Primary key column can not be nullable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrimaryKeyFieldCantBeChanged">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is a part of primary key. It can&apos;t be changed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrimaryKeyFieldXCanTBeMarkedAsVersion">
            <summary>
              Looks up a localized string similar to Primary key field &apos;{0}&apos; can&apos;t be marked as Version..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPrimitivePropertyXIsBoundToPropertyYThatIsNotPrimitive">
            <summary>
              Looks up a localized string similar to The primitive property {0} is bound to the property {1} that isn&apos;t primitive..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExProcessingOfVoidProviderIsNotSupported">
            <summary>
              Looks up a localized string similar to Processing of VoidProvider is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertiesXAndYHaveDifferentPrimitiveTypes">
            <summary>
              Looks up a localized string similar to The properties {0} and {1} have different primitive types..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertiesXAndYHaveIncompatibleTypes">
            <summary>
              Looks up a localized string similar to The properties &quot;{0}&quot; and &quot;{1}&quot; have incompatible types..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyDoesNotHaveGetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of type &apos;{1}&apos; does not have public get accessor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyDoesNotHaveSetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of type &apos;{1}&apos; does not have public set accessor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyIsAlreadyInitialized">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is already initialized..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyIsNotInitialized">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not initialized (or not initialized properly)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyValueMustBelongToTheSameModel">
            <summary>
              Looks up a localized string similar to Property value must belong to the same Model..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyXDoesnTHavePublicSetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; doesn&apos;t have public setter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyXMustBeDeclaredInTypeY">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; must be declared in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyXYDoesnTHavePublicGetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}.{1}&apos; doesn&apos;t have public getter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExPropertyXYIsNotFound">
            <summary>
              Looks up a localized string similar to Property &quot;{0}.{1}&quot; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExProviderMustBeEitherCompilableProviderOrExecutableProvider">
            <summary>
              Looks up a localized string similar to Provider must be either CompilableProvider or ExecutableProvider.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExProviderXDoesNotImplementLogProviderClass">
            <summary>
              Looks up a localized string similar to Provider &apos;{0}&apos; does not implement LogProvider class..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExProviderXIsNotSupportedUseOneOfTheFollowingY">
            <summary>
              Looks up a localized string similar to Provider &quot;{0}&quot; is not supported. Use one of the following: {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExQueryContainsClosuresOfDifferentTypes">
            <summary>
              Looks up a localized string similar to The query contains closures of different types..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExQueryTaskIsNotExecutedYet">
            <summary>
              Looks up a localized string similar to Query task is not executed yet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRangeIsEmpty">
            <summary>
              Looks up a localized string similar to Range is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReaderIsNotInConsistentState">
            <summary>
              Looks up a localized string similar to Reader is not in consistent state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRecursiveAssociateLookupDetected">
            <summary>
              Looks up a localized string similar to Recursive associate lookup is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRecursiveConstructorParemeterDependencyIsDetected">
            <summary>
              Looks up a localized string similar to Recursive constructor paremeter dependency is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencedColumnsCountCantBeLessThenOne">
            <summary>
              Looks up a localized string similar to Referenced columns count cannot be less then one..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencedColumnXDoesNotBelongToIndexY">
            <summary>
              Looks up a localized string similar to Referenced column &quot;{0}&quot; does not belong to index &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencedFieldXAndPairedFieldAreEqual">
            <summary>
              Looks up a localized string similar to Referenced field &apos;{0}&apos; and paired field are equal..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferenceIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Reference &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferenceIsNotResolvedYet">
            <summary>
              Looks up a localized string similar to Reference &apos;{0}&apos; is not resolved yet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferenceIsNull">
            <summary>
              Looks up a localized string similar to Reference points to null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencePropertyXIsBoundToPropertyYThatIsNotReference">
            <summary>
              Looks up a localized string similar to The reference property {0} is bound to the property {1} that isn&apos;t reference..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencingColumnsCountCantBeLessThenOne">
            <summary>
              Looks up a localized string similar to Referencing columns count cannot be less then one..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencingEntityTupleIsNotLoaded">
            <summary>
              Looks up a localized string similar to The referencing entity&apos;s tuple is not loaded..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferencingEntityWithKeyXIsNotFound">
            <summary>
              Looks up a localized string similar to The referencing entity with key {0} is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExReferentialIntegrityViolation">
            <summary>
              Looks up a localized string similar to Referential integrity violation..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRequestIsNotPrepared">
            <summary>
              Looks up a localized string similar to Request is not prepared.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExResourcePropertyXIsNotOfStringType">
            <summary>
              Looks up a localized string similar to Resource property {0} is not of string type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExResultIsNotAvailable">
            <summary>
              Looks up a localized string similar to Result is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExResultTypeIncorrect">
            <summary>
              Looks up a localized string similar to Value of &apos;{0}&apos; type cannot be assigned to property of &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRowAmountShouldBePositiveNumber">
            <summary>
              Looks up a localized string similar to Row amount should be positive number..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRowNumberWindowFunctionIsNotSupportedOnThisVersionOfPostgreSql">
            <summary>
              Looks up a localized string similar to ROW_NUMBER window function is not supported on this version of PostgreSQL.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExRunningOperationRegistrationMustBeFinished">
            <summary>
              Looks up a localized string similar to Running operation registration must be finished before invocation of this method..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExScaleShouldBeNonNegativeValue">
            <summary>
              Looks up a localized string similar to Scale should be non-negative value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSchemaMappingRequiresMultischemaDomainConfiguration">
            <summary>
              Looks up a localized string similar to Schema mapping requires multischema domain configuration. Please provide at least DefaultSchema setting..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSchemaMustBeNotNull">
            <summary>
              Looks up a localized string similar to Schema must be not null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExScopeBoundTransactionCanBeCommittedOnlyByItsScope">
            <summary>
              Looks up a localized string similar to Scope-bound transaction can be committed only by its scope. Use TransactionScopeBase.Complete() \  Dispose() methods of  appropriate TransactionScopeBase descendant instance to do this..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExScopeCantBeDisposed">
            <summary>
              Looks up a localized string similar to Scope can&apos;t be disposed. Most likely it is bound to a different thread..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExScopeRequired">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSectionIsNotFoundInApplicationConfigurationFile">
            <summary>
              Looks up a localized string similar to Section &apos;{0}&apos; is not found in application configuration file..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSegmentIsOutOfRange">
            <summary>
              Looks up a localized string similar to Segment is out of range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSelectManyCollectionSelector0MustHaveOnlyOneLambdaParameter">
            <summary>
              Looks up a localized string similar to SelectMany collection selector &apos;{0}&apos; must have only one lambda parameter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSelectProviderRemovesColumnsUsedForOrdering">
            <summary>
              Looks up a localized string similar to The SelectProvider removes columns used for an ordering..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSequenceContainsMoreThanOneElement">
            <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSequenceContainsNoElements">
            <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSequenceXIsNotFoundInStorage">
            <summary>
              Looks up a localized string similar to Sequence &apos;{0}&apos; is not found in storage..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceCanNotBeAttachedToSessionWhileItIsPersistingTheChanges">
            <summary>
              Looks up a localized string similar to Service can not be attached to Session while it is persisting the changes..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceNotFound">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceOfTypeXIsNotAvailable">
            <summary>
              Looks up a localized string similar to Service of type &apos;{0}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection">
            <summary>
              Looks up a localized string similar to Service with name &apos;{0}&apos; already exists in StorageInfo.Services collection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceWithNameXOfTypeYIsNotAvailable">
            <summary>
              Looks up a localized string similar to Service with name &quot;{0}&quot; of type &apos;{1}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExServiceXIsNotSupported">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionBoundObjectOutOfSessionScope">
            <summary>
              Looks up a localized string similar to Session bound object is out of session scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionIsAlreadyDisposed">
            <summary>
              Looks up a localized string similar to Session is already disposed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionIsNotOpen">
            <summary>
              Looks up a localized string similar to Session is not open. Use Session.Open(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionOfAnotherSessionBoundMustBeTheSame">
            <summary>
              Looks up a localized string similar to Session of another SessionBound must be the same..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Session with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSessionXStillUsesSingleAvailableConnection">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos; still uses single available connection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSingleHierarchyIsMappedToMultipleDatabasesXY">
            <summary>
              Looks up a localized string similar to Single hierarchy is mapped to multiple databases: {0}, {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSizeShouldBeNotNegativeValue">
            <summary>
              Looks up a localized string similar to Size should be not negative value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSkipDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to &apos;Skip&apos; does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSkipNotSupportedInCompiledQueries">
            <summary>
              Looks up a localized string similar to &apos;Skip({0})&apos; not supported in compiled queries (Query.Execute). Use &apos;Skip(Expression&lt;Func&lt;int&gt;&gt;)&apos; instead.For example use &apos;Skip(()=&gt;{0})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSomeOperandsAreNotExpressionsOfTypeBoolean">
            <summary>
              Looks up a localized string similar to Some operands are not Expressions  of type &apos;System.Boolean&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSourceColumnListContainsNullValues">
            <summary>
              Looks up a localized string similar to Source column list contains null values..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecialCharacterXUsedAsEscapeCharacter">
            <summary>
              Looks up a localized string similar to Special character {0} used as escape character..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedCapacityIsLessThenCollectionCount">
            <summary>
              Looks up a localized string similar to The specified capacity value is less than collection count..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedConnectionDoesNotBelongToThisDriver">
            <summary>
              Looks up a localized string similar to Specified connection does not belong to this driver..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedExpressionCanNotBeParsed">
            <summary>
              Looks up a localized string similar to The specified expression can&apos;t be parsed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedExpressionIsNotMemberExpression">
            <summary>
              Looks up a localized string similar to The specified expression is not a MemberExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedKeyFieldTypeIsNotSupportedByThisTemporaryKeyGenerator">
            <summary>
              Looks up a localized string similar to Specified key field type is not supported by this temporary key generator..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedPrecisionXIsGreaterThanMaximumSupportedByStorageY">
            <summary>
              Looks up a localized string similar to Specified precision ({0}) is greater than maximum supported by storage ({1})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedPropertyXIsNotPersistent">
            <summary>
              Looks up a localized string similar to The specified property {0} is not persistent..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedRedoDescriptorCantBeLogged">
            <summary>
              Looks up a localized string similar to Specified RedoDescriptor can&apos;t be logged..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedTypeHierarchyIsDifferentFromKeyHierarchy">
            <summary>
              Looks up a localized string similar to The specified type&apos;s hierarchy is different from the key&apos;s hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedTypeShouldBeGeneratedTupleDescriptorOrItsDescendant">
            <summary>
              Looks up a localized string similar to Specified type should be either GeneratedTupleDescriptor or its descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSpecifiedValuesArentEnoughToCreateKeyForTypeX">
            <summary>
              Looks up a localized string similar to Specified values aren&apos;t enough to create key for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSqlContainerExpressionCanNotBeCompiled">
            <summary>
              Looks up a localized string similar to Sql container expression can not be compiled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSqlServerBelow2005IsNotSupported">
            <summary>
              Looks up a localized string similar to SQL Server below 2005 is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSqlServerSupportsTrimmingOfSpaceCharactersOnly">
            <summary>
              Looks up a localized string similar to SQL Server supports trimming of space characters only..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStateIsNotLoaded">
            <summary>
              Looks up a localized string similar to State is not loaded..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStateIsRemoved">
            <summary>
              Looks up a localized string similar to State is removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStateTransactionIsDifferent">
            <summary>
              Looks up a localized string similar to StateTransaction property value differs from the current transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStateWithKeyXIsAlreadyExists">
            <summary>
              Looks up a localized string similar to State with key &apos;{0}&apos; is already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStorageNodeIsAlreadySelected">
            <summary>
              Looks up a localized string similar to Storage node is already selected..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStorageNodeWithIdXIsNotFound">
            <summary>
              Looks up a localized string similar to Storage node with id &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStorageProviderXIsNotFound">
            <summary>
              Looks up a localized string similar to Storage provider &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStringDoesNotCorrespondToDescriptor">
            <summary>
              Looks up a localized string similar to String does not correspond to the specified descriptor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStringTrimSupportedOnlyWithConstants">
            <summary>
              Looks up a localized string similar to String.Trim(char[]), String.TrimStart(char[]), string.TrimEnd(char[]) supported only with argument being array of constants..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStructureOfFieldXDoesNotMatchStructureOfFieldY">
            <summary>
              Looks up a localized string similar to Structure of field &apos;{0}&apos; does not match structure of field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStructuresDoNotSupportFieldsOfTypeX">
            <summary>
              Looks up a localized string similar to Structures do not support fields of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExStructureXCantContainFieldOfTheSameType">
            <summary>
              Looks up a localized string similar to Structure &apos;{0}&apos; can&apos;t contain field of the same type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExSystemTimeChanged">
            <summary>
              Looks up a localized string similar to System date \ time has been changed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTableAlreadyHasSpecifiedName">
            <summary>
              Looks up a localized string similar to Table already has specified name..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTablePropertyIsNotSet">
            <summary>
              Looks up a localized string similar to Table is not set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTableXCantBeRemovedDueToForeignKeyYOfIgnoredTableOrColumn">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; can&apos;t be removed due to the foreign key &apos;{1}&apos; of a ignored table or column..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTableXCantBeRemovedDueToTheIgnoredColumnY">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; can&apos;t be removed due to the ignored column &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTableXIsNotFound">
            <summary>
              Looks up a localized string similar to Table with name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTakeDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to &apos;Take&apos; does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTakeNotSupportedInCompiledQueries">
            <summary>
              Looks up a localized string similar to &apos;Take({0})&apos; not supported in compiled queries (Query.Execute). Use &apos;Take(Expression&lt;Func&lt;int&gt;&gt;)&apos; instead.For example use &apos;Take(()=&gt;{0})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTargetMemberIsNotFoundForCompilerX">
            <summary>
              Looks up a localized string similar to Target member is not found for compiler {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTargetObjectExistsX">
            <summary>
              Looks up a localized string similar to Target object already exists: &quot;{0}&quot;. To assign a new one, you must remove the old one first..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTaskHasAlreadyBeenCompletedWithFault">
            <summary>
              Looks up a localized string similar to Task has already been completed with fault..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTemporaryTablesAreNotSupportedByCurrentStorage">
            <summary>
              Looks up a localized string similar to Temporary tables are not supported by current storage.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTemporaryTableXIsLocked">
            <summary>
              Looks up a localized string similar to Temporary table &apos;{0}&apos; is locked.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheDataTypeMustBeExactNumericWithoutScaleOrWithZeroScale">
            <summary>
              Looks up a localized string similar to The data type must be exact numeric without scale or with zero scale..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheDataTypeMustBeExactNumericWithScale0">
            <summary>
              Looks up a localized string similar to The data type must be exact numeric with scale 0..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheMaximumValueMustBeGreaterThanTheMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be greater than the minimum value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheNumberOfSourcesIsTooSmallExpected">
            <summary>
              Looks up a localized string similar to The number of sources is too small. Expected number is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThereAreNoSuitableTypes">
            <summary>
              Looks up a localized string similar to There are no suitable types in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThereIsNoCurrentHttpRequestOrSessionManagerIsnTBoundToItYet">
            <summary>
              Looks up a localized string similar to There is no current HttpRequest, or SessionManager is not bound to it yet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheScaleMustBeLessThanOrEqualToPrecision">
            <summary>
              Looks up a localized string similar to The scale must be less than or equal to precision..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheServiceIsAlreadyAttachedToSession">
            <summary>
              Looks up a localized string similar to The service is already attached to Session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTheStartValueShouldBeBetweenTheMinimumAndMaximumValue">
            <summary>
              Looks up a localized string similar to The start value should be between the minimum and maximum value..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisInstanceIsExpiredDueToTransactionBoundaries">
            <summary>
              Looks up a localized string similar to This instance is expired due to transaction boundaries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisMethodShouldNotBeCalledUseApplySessionExpressionInstead">
            <summary>
              Looks up a localized string similar to This method should not be called, use Apply(Session, Expression) instead.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisOperationIsNotAllowedForParameterContextOperatingWithExpectedValuesOfParameters">
            <summary>
              Looks up a localized string similar to This operation is not allowed for the parameter context operating with expected values of parameters..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisStorageDoesNotSupportX">
            <summary>
              Looks up a localized string similar to This storage does not support &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisStorageDoesNotSupportXValuesGreatherThanYSuppliedValueIsZ">
            <summary>
              Looks up a localized string similar to This storage does not support &apos;{0}&apos; values greather than &apos;{1}&apos;. Supplied value is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExThisStorageDoesNotSupportXValuesLessThanYSuppliedValueIsZ">
            <summary>
              Looks up a localized string similar to This storage does not support &apos;{0}&apos; values less than &apos;{1}&apos;. Supplied value is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionIsAlreadyActivated">
            <summary>
              Looks up a localized string similar to Transaction is already activated..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to Transaction is already open..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionIsNotActive">
            <summary>
              Looks up a localized string similar to Transaction is not active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionIsNotOpen">
            <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionIsRunning">
            <summary>
              Looks up a localized string similar to A transaction is running, but there should be no active transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionScopeIsCompletedCanNotBeSetToFalse">
            <summary>
              Looks up a localized string similar to TransactionScope.IsCompleted can not be set to &apos;false&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionShouldBeActive">
            <summary>
              Looks up a localized string similar to Transaction should be active.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTransactionShouldNotBeActive">
            <summary>
              Looks up a localized string similar to Transaction should not be active.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTranslationOfDateTimeToStringWithArbitraryArgumentsIsNotSupported">
            <summary>
              Looks up a localized string similar to Translation of DateTime.ToString(string) with arbitrary arguments is not supported. Use DateTime.ToString(&quot;s&quot;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTranslationOfInContainsIsNotSupportedInThisCase">
            <summary>
              Looks up a localized string similar to Translation of In/Contains is not supported in this case.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTranslationOfLiteralOfTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Translation of literal of type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeCantBeNull">
            <summary>
              Looks up a localized string similar to Type cannot be null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeColumnXForFulltextColumnYMustBeTypeOfString">
            <summary>
              Looks up a localized string similar to Type column &apos;{0}&apos; for fulltext column&apos;{1}&apos; must be type of string..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY">
            <summary>
              Looks up a localized string similar to TypeDef &apos;{0}&apos; already belongs to hierarchy with &apos;{1}&apos; root..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeDiscriminatorFieldIsAlreadySet">
            <summary>
              Looks up a localized string similar to TypeDiscriminator field is already set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeDiscriminatorIsNotFoundForXType">
            <summary>
              Looks up a localized string similar to Type discriminator field is not found for &apos;{0}&apos; type.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeDiscriminatorValueIsRequiredUnlessXIsMarkedAsDefaultTypeInHierarchy">
            <summary>
              Looks up a localized string similar to Type discriminator value is required unless {0} is marked as default type in hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeHasNoPrimaryIndex">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; has no primary index..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIdentifierXDefinesDifferentTypesInExtractedMapOfTypesAndDefinedByUserMapOfTypes">
            <summary>
              Looks up a localized string similar to Type identifier &apos;{0}&apos; defines different types in extracted map of types and defined by user map of types..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIdForTypeXIsNotFound">
            <summary>
              Looks up a localized string similar to TypeId for type &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIdIsNotAssignedForTypeX">
            <summary>
              Looks up a localized string similar to TypeId is not assigned for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIdXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type with TypeId={0} is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeInfoHierarchyMistmatch">
            <summary>
              Looks up a localized string similar to TypeInfo hierarchy does not correspond to provided hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIsMethodSupportsOnlyEntitiesAndStructures">
            <summary>
              Looks up a localized string similar to &apos;TypeIs&apos; method supports only Entities and Structures..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeIsNotSupportedByBinaryPrimitiveSerializer">
            <summary>
              Looks up a localized string similar to Type is not supported by BinaryPrimitiveSerializer..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeMustBeEntityDescendant">
            <summary>
              Looks up a localized string similar to Invalid type specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeNotFoundInModel">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not found in model..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeOfEntityStoredInKeyIsUndefined">
            <summary>
              Looks up a localized string similar to Type of entity stored in Key is undefined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeOfExpressionReturnValueIsNotX">
            <summary>
              Looks up a localized string similar to The type of the expression&apos;s return value is not &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeOfXMustBeADescendantOfYType">
            <summary>
              Looks up a localized string similar to Type of &apos;{0}&apos; must be a descendant of {1} type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeOfXPropertyMustBeY">
            <summary>
              Looks up a localized string similar to Type of {0} property must be {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypesOfValuesAreDifferent">
            <summary>
              Looks up a localized string similar to Types of values are different.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeWithNameXIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Type with name &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeWithNameXIsNotFoundInMetadata">
            <summary>
              Looks up a localized string similar to Type with name &apos;{0}&apos; is not found in metadata..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeWithNameXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type with name &apos;{0}&apos; isn&apos;t registered in the Domain..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeWithTypeIdXIsNotFound">
            <summary>
              Looks up a localized string similar to Type with type TypeId=&apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXCanNotBeTransformed">
            <summary>
              Looks up a localized string similar to The type {0} can&apos;t be transformed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXCantContainsVersionFieldsAsItsNotAHierarchyRoot">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; can&apos;t contain Version fields, because it is not a hierarchy root type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDeclaresClusteredIndexYButOnlyRootTypeCanDeclareClusteredIndexInSingleTableHierarchy">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; declares clustered index &apos;{1}&apos;, but only root type can declare clustered indexes in single table hierarhy.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDoesNotContainYField">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not contain &apos;{1}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDoesNotHasAnyPublicReadablePropertiesOrFieldsSoItCanTBePersistedToStorage">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not has any public readable properties or fields, so it can&apos;t be persisted to storage..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDoesNotHaveAParameterlessConstructor">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a parameterless constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDoesNotHavePropertyY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have property &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXDoesNotImplementYInterface">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement &apos;{1}&apos; interface..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXHasAlreadyBeenRegistered">
            <summary>
              Looks up a localized string similar to The type {0} has already been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXHasMultipleClusteredIndexesY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; has multiple clustered indexes: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXHasNotBeenRegistered">
            <summary>
              Looks up a localized string similar to The type {0} hasn&apos;t been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotCollatable">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not collatable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotFound">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotRegisteredInTheModel">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not registered in the model..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotStructure">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not structure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotSubclassOfTypeY">
            <summary>
              Looks up a localized string similar to The type {0} isn&apos;t a subclass of the type {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXIsNotSupportedInNewExpression">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported in &apos;new&apos; expression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXMustBelongToHierarchy">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must belong to hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXMustBeNonAbstractType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must be non-abstract type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXMustBeReferenceType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must be reference type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXMustImplementY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must implement &apos;{1}&apos;, or must be its descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXShouldNotBeGeneric">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; should not be generic..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExTypeXWasNotRegisteredForActivation">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; was not registered for activation..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToActivateEntitySetWithoutAssociation">
            <summary>
              Looks up a localized string similar to Unable to activate EntitySet for &apos;{0}&apos; field because it does not has association..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToApplyVersionOnFieldXOfTypeY">
            <summary>
              Looks up a localized string similar to Unable to apply VersionAttribute with VersionMode.Auto or Version.Mode.Manual mode set on field {0} of type {1}. Only VersionMode.Skip is allowed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToAssociateFieldXWithFieldYFieldXIsAlreadyMappedToFieldZ">
            <summary>
              Looks up a localized string similar to Unable to associate field &apos;{0}&apos; with field &apos;{1}&apos;. Field &apos;{0}&apos; is already mapped to field &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToAssociateTypeXWithTypeYTypeXIsAlreadyMappedToTypeZ">
            <summary>
              Looks up a localized string similar to Unable to associate type &apos;{0}&apos; with type &apos;{1}&apos;. Type &apos;{0}&apos; is already mapped to type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBindParametersToLambdaXParametersCountIsIncorrect">
            <summary>
              Looks up a localized string similar to Unable to bind parameters to lambda {0}. Parameters count is incorrect..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildFulltextIndexesForHierarchyWithInheritanceSchemaClassTable">
            <summary>
              Looks up a localized string similar to Unable to build full-text indexes for hierarchy &apos;{0}&apos; with InheritanceSchema.ClassTable..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildGenericInstanceTypesForXTypeBecauseItContainsMoreThen1GenericParameter">
            <summary>
              Looks up a localized string similar to Unable to build generic instance types for &apos;{0}&apos; type because it contains more then 1 generic parameter..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildGenericInstanceTypesForXTypeBecauseParameterIsNotConstrained">
            <summary>
              Looks up a localized string similar to Unable to build generic instance types for &apos;{0}&apos; type because parameter is not constrained..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildIndexXBecauseItWasBuiltOverInheritedFields">
            <summary>
              Looks up a localized string similar to Unable to build index {0} because it contains inherited fields..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildSubqueryResultForExpressionXResultTypeIsNotIEnumerable">
            <summary>
              Looks up a localized string similar to Unable to build subquery result for expression &apos;{0}&apos;. resultType is not IEnumerable&lt;&gt;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToBuildSubqueryResultForExpressionXStateContainsNoParameters">
            <summary>
              Looks up a localized string similar to Unable to build subquery result for expression &apos;{0}&apos;. State contains no parameters..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCancelDelayedTaskTaskHasBeenCanceled">
            <summary>
              Looks up a localized string similar to Unable to cancel delayed task: task has been canceled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCancelDelayedTaskTaskHasBeenCompleted">
            <summary>
              Looks up a localized string similar to Unable to cancel delayed task: task has been completed.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCancelDelayedTaskTaskHasBeenCompletedWithFault">
            <summary>
              Looks up a localized string similar to Unable to cancel delayed task: task has been completed with fault..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCastItemOfTypeXToY">
            <summary>
              Looks up a localized string similar to Unable to cast item of type &apos;{0}&apos; to &apos;{1}&apos; in queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCastNullValueToXUseXInstead">
            <summary>
              Looks up a localized string similar to Unable to cast null value to {0}; use {0}? instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCloneNonUserSessionConfiguration">
            <summary>
              Looks up a localized string similar to Unable to clone non-user session configuration..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskTaskHasBeenCancelled">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task: task has been cancelled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskTaskHasBeenCompleted">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task: task has been completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskTaskHasBeenCompletedWithFault">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task: task has been completed with fault..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskTaskHasNotBeenStartedYet">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task: task has not been started yet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskWithFaultTaskHasBeenCancelled">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task with fault: task has been cancelled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteDelayedTaskWithFaultTaskHasBeenCompleted">
            <summary>
              Looks up a localized string similar to Unable to complete delayed task with fault: task has been completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCompleteWithFaultUnstartedDelayedTaskTaskHasNotBeenStartedYet">
            <summary>
              Looks up a localized string similar to Unable to complete with fault unstarted delayed task: task has not been started yet..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCreateConnection">
            <summary>
              Looks up a localized string similar to Unable to create the connection. Check if all needed assemblies are available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCreateKeyForXHierarchy">
            <summary>
              Looks up a localized string similar to Unable to create key for &apos;{0}&apos; hierarchy. Key value or key generator should be specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToCreateProviderInstance">
            <summary>
              Looks up a localized string similar to Unable to create provider instance. Check if provider&apos;s class has static &quot;Instance&quot; property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToDefineTypeIdentifierXForTypeYTypeIsNotExists">
            <summary>
              Looks up a localized string similar to Unable to define type identifier &apos;{0}&apos; for type &apos;{1}&apos;. Type is not exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToFindColumnInPrimaryIndex">
            <summary>
              Looks up a localized string similar to Unable to find column &apos;{0}&apos; of index &apos;{1}&apos; in primary index..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToFindFactoryMethodForTypeXMakeSureAssemblyYProcessedByWeaver">
            <summary>
              Looks up a localized string similar to Unable to find factory method for type &apos;{0}&apos;. Make sure assembly &apos;{0}&apos; is processed by weaver. See section 2 of Manual for details..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToFindMasterAssociation">
            <summary>
              Looks up a localized string similar to Unable to find master association of association &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToGetTypeOfProviderByNameX">
            <summary>
              Looks up a localized string similar to Unable to get type of provider by name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToHandleEntitySetExpressionWithoutSpecifiedOwner">
            <summary>
              Looks up a localized string similar to Unable to handle EntitySetExpression without specified Owner..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToInitializeJoinIndexProviderColumnsCountMismatch">
            <summary>
              Looks up a localized string similar to Unable to initialize JoinIndexProvider. Columns count mismatch..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToMaterializeBackLocalCollectionItem">
            <summary>
              Looks up a localized string similar to Unable to materialize back local collection item &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToModifyDeletedObject">
            <summary>
              Looks up a localized string similar to Unable to modify removed object..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToOpenNewTransactionThereAreIncompletedAsynchronousQueries">
            <summary>
              Looks up a localized string similar to Unable to open new transaction, there are incompleted asynchronous queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnabletoParsePrefetchExpressionX">
            <summary>
              Looks up a localized string similar to Unable to parse prefetch expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToParseValueXForFieldY">
            <summary>
              Looks up a localized string similar to Unable to parse value &apos;{0}&apos; for field &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToPersistTypeXBecauseOfLoopReference">
            <summary>
              Looks up a localized string similar to Unable to persist type &apos;{0}&apos; to storage because of loop reference..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToProcessRecycledFieldDefinitionXOwnerTypeIsNotRegisteredInModel">
            <summary>
              Looks up a localized string similar to Unable to process recycled field definition &apos;{0}&apos;: owner type is not registered in model..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToRemapFieldExpression">
            <summary>
              Looks up a localized string similar to Unable to remap FieldExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToRemapKeyExpression">
            <summary>
              Looks up a localized string similar to Unable to remap KeyExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToRemoveOwnerFromEntitySetExpression">
            <summary>
              Looks up a localized string similar to Unable to remove Owner from EntitySetExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToResolveDatabaseForNodeXPleaseVerifyThatThisDatabaseExists">
            <summary>
              Looks up a localized string similar to Unable to resolve database for node &apos;{0}&apos;. Please verify that this database exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToResolveOwnerOfFieldExpressionX">
            <summary>
              Looks up a localized string similar to Unable to resolve owner of FieldExpression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToResolveOwnerOfStructureExpressionX">
            <summary>
              Looks up a localized string similar to Unable to resolve owner of StructureExpression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToResolveSchemaForNodeXPleaseVerifyThatThisSchemaExists">
            <summary>
              Looks up a localized string similar to Unable to resolve schema for node &apos;{0}&apos;. Please verify that this schema exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToResolveTypeForKeyX">
            <summary>
              Looks up a localized string similar to Unable to resolve type for Key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToRollbackNestedTransactionThereAreIncompletedAsynchronousQueries">
            <summary>
              Looks up a localized string similar to Unable to rollback nested transaction: there are incompleted asynchronous queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToRollbackNestedTransactionThereAreUnenumeratedResultsOfAsynchronousQueries">
            <summary>
              Looks up a localized string similar to Unable to rollback nested transaction: there are unenumerable results of asynchronous queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToSetIndexedFlagOnEntitySetFieldX">
            <summary>
              Looks up a localized string similar to Unable to set &apos;Indexed&apos; flag on EntitySet field {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToSetIndexedFlagOnStructureFieldX">
            <summary>
              Looks up a localized string similar to Unable to set &apos;Indexed&apos; flag on Structure field {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToSetKeyFieldXExplicitly">
            <summary>
              Looks up a localized string similar to Unable to set Key field &apos;{0}&apos; explicitly..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToStartDelayedTaskTaskHasAlreadyBeenStarted">
            <summary>
              Looks up a localized string similar to Unable to start delayed task: task has already been started..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToStartDelayedTaskTaskHasBeenCancelled">
            <summary>
              Looks up a localized string similar to Unable to start delayed task: task has been cancelled..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToStartDelayedTaskTaskhasBeenCompleted">
            <summary>
              Looks up a localized string similar to Unable to start delayed task: task has been completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToStartDelayedTaskTaskHasBeenCompletedWithFault">
            <summary>
              Looks up a localized string similar to Unable to start delayed task: task has been completed with fault..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToStoreUntypedKeyToStorage">
            <summary>
              Looks up a localized string similar to Unable to store untyped &apos;Key&apos; to storage. Use &apos;{0}&apos; instead of &apos;Key&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToTranslateLambdaExpressionXBecauseItRequiresToMaterializeEntityOfTypeX">
            <summary>
              Looks up a localized string similar to Unable to translate lambda expression &apos;{0}&apos; because it requires to materialize entity of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToTranslateXExpressionSeeInnerExceptionForDetails">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; expression. See inner exception for details..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToTranslateXInPartialIndexDefinitionForIndexYReasonZ">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; in partial index definition for index &apos;{1}&apos;. Reason: {2}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToUseAsynchronousQueriesInsideSessionActivationScope">
            <summary>
              Looks up a localized string similar to Unable to use asynchronous queries inside session activation scope..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToUseBaseImplementationOfVisitGenericExpressionWithoutSpecifyingGenericProcessorDelegate">
            <summary>
              Looks up a localized string similar to Unable to use base implementation of VisitGenericExpression without specifying genericProcessor delegate..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToUseElementAtIntInQueryExecuteUseElementAtFuncIntInstead">
            <summary>
              Looks up a localized string similar to Usage of ElementAt(int) or ElementAtOrDefault(int) in Query.Execute is wrong. Use ElementAt(Func&lt;int&gt;) or ElementAtOrDefault(Func&lt;int&gt;) instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToUseExpressionXAsXParameterOfLambdaXBecauseOfTypeMistmatch">
            <summary>
              Looks up a localized string similar to Unable to use expression {0} as {1} parameter of lambda {2} because of type mistmatch..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnableToUseIQueryableXInQueryExecuteStatement">
            <summary>
              Looks up a localized string similar to Unable to use IQueryable &apos;{0}&apos; in Query.Execute statement..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnauthorizedAccessDeclarationOfCallerTypeIsNotInRegisteredAssembly">
            <summary>
              Looks up a localized string similar to Unauthorized: the caller is declared outside of any of registered assemblies..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnboundColumn">
            <summary>
              Looks up a localized string similar to Unbound column &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUndefinedForeignKey">
            <summary>
              Looks up a localized string similar to ForeignKey is undefined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUndefinedPrimaryKey">
            <summary>
              Looks up a localized string similar to PrimaryKey is undefined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUndefinedTypeOfColumnX">
            <summary>
              Looks up a localized string similar to Type of column &quot;{0}&quot; is undefined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUndefinedTypeOfSequenceX">
            <summary>
              Looks up a localized string similar to Type of sequence &quot;{0}&quot; is undefined..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnderlyingStorageProviderDoesNotSupportSQL">
            <summary>
              Looks up a localized string similar to Underlying storage provider does not support SQL..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnknownEntitySerializationKindX">
            <summary>
              Looks up a localized string similar to Unknown entity serialization kind &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnknownExpressionType">
            <summary>
              Looks up a localized string similar to Unknown expression type: &apos;{0} ({1})&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnknownInSyntax">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos; expression. Unknown &quot;In&quot; syntax..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnsupportedColumnType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported by current storage provider..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnsupportedExpressionType">
            <summary>
              Looks up a localized string similar to Unsupported expression type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnsupportedFieldTypeX">
            <summary>
              Looks up a localized string similar to Unsupported field type: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnsupportedIndex">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; with attributes &apos;{1}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUnsupportedType">
            <summary>
              Looks up a localized string similar to Unsupported type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeHintSourceFieldNotFound">
            <summary>
              Looks up a localized string similar to Upgrade hint error. Source field &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeHintSourceTypeNotFound">
            <summary>
              Looks up a localized string similar to Upgrade hint error. Source type &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeHintTargetFieldNotFound">
            <summary>
              Looks up a localized string similar to Upgrade hint error. Target field &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeHintTargetTypeNotFound">
            <summary>
              Looks up a localized string similar to Upgrade hint error. Target type &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeOfAssemblyXFromVersionYToZIsNotSupported">
            <summary>
              Looks up a localized string similar to Upgrade of assembly &apos;{0}&apos; from version &apos;{1}&apos; to &apos;{2}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUpgradeSequenceValidationFailure">
            <summary>
              Looks up a localized string similar to Upgrade sequence validation failure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUseLogCaptureScopeConstructorInstead">
            <summary>
              Looks up a localized string similar to Use LogCaptureScope constructor instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUseLogIndentScopeConstructorInstead">
            <summary>
              Looks up a localized string similar to Use LogIndentScope constructor instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUseMethodXOnFirstInsteadOfSingle">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos;. Use method (&apos;{1}&apos;) on First/FirstOrDefault instead of Single/SingleOrDefault..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUserDefinedTypeIdentifierXForTypeYBeyongTheLimitsDefinedForDatabaseZ">
            <summary>
              Looks up a localized string similar to Custom type identifier &apos;{0}&apos; for type &apos;{1}&apos; beyongs the limits defined for database &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExUserDefinedTypeIdentifierXForTypeYLessThan100">
            <summary>
              Looks up a localized string similar to User defined type identifier &apos;{0}&apos; for type &apos;{1}&apos;  less then 100..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValidateVersionEqTrueIsIncompatibleWithPersistRequestKindEqInsert">
            <summary>
              Looks up a localized string similar to validateVersion=true is incompatible with PersistRequestKind=Insert.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValidationContextIsInvalid">
            <summary>
              Looks up a localized string similar to Validation context is in invalid state. This means that some validation error has happened, but later it was suppressed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValidationFailed">
            <summary>
              Looks up a localized string similar to Validation failed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValidatorXConfigurationFailedOnTypeYFieldZWithMessageA">
            <summary>
              Looks up a localized string similar to Validator &apos;{0}&apos; configuration failed on type &apos;{1}&apos; field &apos;{2}&apos;. {3}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValidatorXConfigurationFailedOnTypeYWithMessageZ">
            <summary>
              Looks up a localized string similar to Validator &apos;{0}&apos; configuration failed on type &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueForParameterXIsNotSet">
            <summary>
              Looks up a localized string similar to Value for parameter &apos;{0}&apos; is not set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueForPlaceholderXIsNotSet">
            <summary>
              Looks up a localized string similar to Value for placeholder &apos;{0}&apos; is not set..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to Value is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueIsNotAcceptableForOnTargetRemoveProperty">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos;: &apos;{2}&apos; value is not acceptable for &apos;OnTargetRemove&apos; property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueIsNotAvailable">
            <summary>
              Looks up a localized string similar to Value is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueOfParameterWCantBeXIfValueOfParameterYIsZ">
            <summary>
              Looks up a localized string similar to The value of the parameter {0} can&apos;t be {1}, if the value of the parameter {2} is {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueShouldBeXDescendant">
            <summary>
              Looks up a localized string similar to Value should be &apos;{0}&apos; descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Value with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueWithNameXIsNotFound">
            <summary>
              Looks up a localized string similar to Value with name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExValueXIsNotAllowedHere">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed or invalid here..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionConflict">
            <summary>
              Looks up a localized string similar to Version conflict..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionConflictEx">
            <summary>
              Looks up a localized string similar to Version conflict on object {0}: expected: {1} = {2}, but it is {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionFieldXCanTBeLazyLoadField">
            <summary>
              Looks up a localized string similar to Version field &apos;{0}&apos; can&apos;t be LazyLoad field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionFieldXCanTBeOfYType">
            <summary>
              Looks up a localized string similar to Version field &apos;{0}&apos; can&apos;t be of {1} type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionFieldXCanTBeSystemField">
            <summary>
              Looks up a localized string similar to Version field &apos;{0}&apos; can&apos;t be System field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionOfEntityWithKeyXDiffersFromTheExpectedOne">
            <summary>
              Looks up a localized string similar to Version of entity with key &apos;{0}&apos; differs from the expected one..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVersionRootObjectCantImplementIHasVersionRoots">
            <summary>
              Looks up a localized string similar to Version root object can&apos;t implement IHasVersionRoots..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExVisitKeyFieldIsNotSupportedByX">
            <summary>
              Looks up a localized string similar to VisitKeyField is not supported by &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExWrongKeyStructure">
            <summary>
              Looks up a localized string similar to Wrong key structure..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExWrongPersistentTypeCandidate">
            <summary>
              Looks up a localized string similar to Wrong persistent type candidate: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExWrongSourceCollectionElementType">
            <summary>
              Looks up a localized string similar to Source collection contains at least one item of type &quot;{0}&quot;, that cannot be cast to the item type of the destination collection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXCantBeExecuted">
            <summary>
              Looks up a localized string similar to {0} can&apos;t be executed on specified sources..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXDescendantIsAlreadyARootOfAnotherHierarchy">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; descendant is already a root of another hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXDoesNotSupportX">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not support &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXFieldIsNotDeclaredInEntityDescendantSoCannotBeUsedAsTypeDiscriminator">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field is not declared in Entity descendant, so cannot be used as type discriminator..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXImplementorsDontBelongToAnyHierarchy">
            <summary>
              Looks up a localized string similar to {0} implementors don&apos;t belong to any hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXIsNeitherClassNorValueType">
            <summary>
              Looks up a localized string similar to The {0} is neither class nor value type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXIsNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXIsNotValidNameForX">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not valid name for {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXIsObsoleteUseYAndZInstead">
            <summary>
              Looks up a localized string similar to {0} is obsolete. Use {1} and {2} instead..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXMustBeActive">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must be active..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXMustBeInheritedFromX">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must be inherited from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXNameCantBeEmpty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; name can&apos;t be empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXYFieldPairedToZAFieldShouldBeBButCurrentIsC">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; field, which is declared as paired to &apos;{2}.{3}&apos; field, should be of type &apos;{4}&apos; but actually it is &apos;{5}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExXYFieldPairedToZAFieldShouldBeEntitySetOfBButCurrentIsC">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; field, which is declared as paired to &apos;{2}.{3}&apos; field, should be &apos;EntitySet&lt;{4}&gt;&apos; but it is &apos;EntitySet&lt;{5}&gt;&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ExYouMustEitherApplyOrCancelCachedChangesToChangeThisProperty">
            <summary>
              Looks up a localized string similar to You must either apply or cancel cached changes before changing this property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FailedToCreateRegularExpressionFromPatternX">
            <summary>
              Looks up a localized string similar to Failed to create regular expression from pattern &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FieldShouldBeOfComparableType">
            <summary>
              Looks up a localized string similar to Field should be of comparable type..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FieldShouldBeOfTypeX">
            <summary>
              Looks up a localized string similar to Field should be of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FieldX">
            <summary>
              Looks up a localized string similar to  Field: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FieldXDoesNotExistInTableForY">
            <summary>
              Looks up a localized string similar to field &apos;{0}&apos; does not exist in table for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Full">
            <summary>
              Looks up a localized string similar to full.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.FullTextQueries">
            <summary>
              Looks up a localized string similar to Full text queries.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Generators">
            <summary>
              Looks up a localized string similar to Generators.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.HasVersionFormat">
            <summary>
              Looks up a localized string similar to {0} (v{1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.HierarchyColumns">
            <summary>
              Looks up a localized string similar to Hierarchy columns.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Indexes">
            <summary>
              Looks up a localized string similar to Indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.InfinitesimalFormat">
            <summary>
              Looks up a localized string similar to {0}{1}d.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Infinity">
            <summary>
              Looks up a localized string similar to inf.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ItemChangeCountFormat">
            <summary>
              Looks up a localized string similar to {0} change(s).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ItemChangeFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.JoinKeysLengthMismatch">
            <summary>
              Looks up a localized string similar to Unable to translate &apos;{0}&apos;. Join keys length mismatch..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.KeyFormat">
            <summary>
              Looks up a localized string similar to {0}, {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.KeyFormatUnknownKeyType">
            <summary>
              Looks up a localized string similar to {0} (unknown), {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.KeyGenerators">
            <summary>
              Looks up a localized string similar to Key generators.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.KeyMapping">
            <summary>
              Looks up a localized string similar to Key mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Known">
            <summary>
              Looks up a localized string similar to known.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Length">
            <summary>
              Looks up a localized string similar to Length.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogAsyncOperationError">
            <summary>
              Looks up a localized string similar to Async operation error..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogAttemptToUseDisposedInstance">
            <summary>
              Looks up a localized string similar to Attempt to use disposed instance of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogAutomaticUpgradeSequenceValidation">
            <summary>
              Looks up a localized string similar to Automatic upgrade sequence validation.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogBuildingDeclaredFieldXY">
            <summary>
              Looks up a localized string similar to Building declared field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogBuildingIndexX">
            <summary>
              Looks up a localized string similar to Building index &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogBuildingInheritedFieldXY">
            <summary>
              Looks up a localized string similar to Building inherited field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogBuildingInterfaceFieldXY">
            <summary>
              Looks up a localized string similar to Building interface field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogBuildingX">
            <summary>
              Looks up a localized string similar to Building {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogCalculatingDatabaseDependencies">
            <summary>
              Looks up a localized string similar to Calculating database dependencies.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogCantFindAssociateFor">
            <summary>
              Looks up a localized string similar to Can&apos;t find {0} (&apos;{1}&apos;) for type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogChangesAreSuccessfullyApplied">
            <summary>
              Looks up a localized string similar to Changes are successfully applied..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogClearingComparisonResultX">
             <summary>
               Looks up a localized string similar to Clearing comparison result:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.LogComparisonResultX">
             <summary>
               Looks up a localized string similar to Comparison result:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.LogCreatingX">
            <summary>
              Looks up a localized string similar to Creating {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDefiningFieldX">
            <summary>
              Looks up a localized string similar to Defining field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDefiningHierarchyForTypeX">
            <summary>
              Looks up a localized string similar to Defining hierarchy for type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDefiningIndexes">
            <summary>
              Looks up a localized string similar to Defining indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDefiningX">
            <summary>
              Looks up a localized string similar to Defining &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDisconnectedStateCancelChanges">
            <summary>
              Looks up a localized string similar to DisconnectedState.CancelChanges.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDomainIsDisposing">
            <summary>
              Looks up a localized string similar to Domain is disposing..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDomainIsDisposingByAFinalizer">
            <summary>
              Looks up a localized string similar to Domain is disposing by a finalizer..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogDomainModelIsNotFoundInStorage">
            <summary>
              Looks up a localized string similar to Domain model is not found in the storage..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogException">
            <summary>
              Looks up a localized string similar to Exception!.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogExecutingActionX">
            <summary>
              Looks up a localized string similar to Executing action: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogExErrorSettingDefaultValueXForColumnYInTypeZ">
            <summary>
              Looks up a localized string similar to Error setting default value {0} for column &apos;{1}&apos; in type &apos;{2}&apos;. Most likely, its type is incorrect..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogExplicitLazyLoadAttributeOnFieldXIsRedundant">
            <summary>
              Looks up a localized string similar to Explicit LazyLoad=true on field &apos;{0}&apos; is redundant..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogExtractedSchema">
            <summary>
              Looks up a localized string similar to Extracted schema:.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogFailedToAddSchemaHintXErrorY">
             <summary>
               Looks up a localized string similar to Failed to add schema hint &apos;{0}&apos; to schema hint collection. The hint will be ignored.
            Likely, the schema object (table, column, etc.) it references does not exists, because it was manually removed from the database.
            Error: {1}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.LogFailedToExtractDomainModelFromStorage">
            <summary>
              Looks up a localized string similar to Failed to extract domain model from the storage..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogFailedToExtractMetadataFromXYZ">
            <summary>
              Looks up a localized string similar to Failed to extract metadata from &apos;{0}.{1}&apos;: {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogFieldX">
            <summary>
              Looks up a localized string similar to Field: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogFullTextIndexesAreNotSupportedByCurrentStorageIgnoringIndexX">
            <summary>
              Looks up a localized string similar to Full text indexes are not supported by current storage, ignoring index &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogGenericAssociateCreationHasFailedFor">
            <summary>
              Looks up a localized string similar to &apos;{0}&lt;{1}, {2}&gt;&apos; creation has failed for &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogGenericAssociateIsUsedFor">
            <summary>
              Looks up a localized string similar to &apos;{0}&lt;{1}, {2}&gt;&apos; was used for &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogHierarchyX">
            <summary>
              Looks up a localized string similar to Hierarchy: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogIndexX">
            <summary>
              Looks up a localized string similar to Index: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogInspectingHierarchyX">
            <summary>
              Looks up a localized string similar to Inspecting hierarchy &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogInspectingModelDefinition">
            <summary>
              Looks up a localized string similar to Inspecting model definition.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogInspectingTypeX">
            <summary>
              Looks up a localized string similar to Inspecting type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogItemFormat">
            <summary>
              Looks up a localized string similar to {0}:.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogMetadataAssemblyCreatedX">
            <summary>
              Looks up a localized string similar to Metadata.Assembly created: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogMetadataAssemblyUpdatedXFromVersionYToZ">
            <summary>
              Looks up a localized string similar to Metadata.Assembly updated: &apos;{0}&apos;, from version &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogMetadataTypeRenamedXToY">
            <summary>
              Looks up a localized string similar to Metadata.Type renamed: &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogOpeningSessionX">
            <summary>
              Looks up a localized string similar to Opening session &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogProcessingFixupActions">
            <summary>
              Looks up a localized string similar to Processing fixup actions.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogProcessingMappingRules">
            <summary>
              Looks up a localized string similar to Processing mapping rules.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogProcessingX">
            <summary>
              Looks up a localized string similar to Processing &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogRegionBegin">
            <summary>
              Looks up a localized string similar to {0}: started..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogRegionEnd">
            <summary>
              Looks up a localized string similar to {0}: completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogRelationSyncUndoError">
            <summary>
              Looks up a localized string similar to Error during undoing the relation synchronization..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogReusingCachedMappingInformationForX">
            <summary>
              Looks up a localized string similar to Reusing cached mapping information for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSafeDisposeFailing">
            <summary>
              Looks up a localized string similar to Safe dispose of &apos;{0}&apos; failing..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogScopeDisposeError">
            <summary>
              Looks up a localized string similar to Scope dispose error..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionManagerEndRequestMethodWasNotInvoked">
            <summary>
              Looks up a localized string similar to SessionManager.EndRequest method was not invoked during processing of the previous request to this module..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXBeginningTransactionWithYIsolationLevel">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Beginning transaction @ {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXCachingY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Caching: {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXClosingConnectionY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Closing connection &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXCommittedTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Committed transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXCommittingTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Committing transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXCommitTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Commit transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXCreatingConnection">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Creating connection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisconnectedStateApplyChanges">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. DisconnectedState.ApplyChanges.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisconnectedStateAttach">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. DisconnectedState.Attach.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisconnectedStateConnect">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. DisconnectedState.Connect().
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisconnectedStateDisconnect">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. DisconnectedState is disconnected.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisposing">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Disposing..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXDisposingConnection">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Disposing connection..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXEntityWithKeyYIdentifiedAsZ">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Identifying entity: Key = &apos;{1}&apos;, identified as &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXGettingValueKeyYFieldZ">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Getting value: Key = &apos;{1}&apos;, Field = &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXInvalidate">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Invalidate..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXMakeSavepointY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Make savepoint &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXMaterializingYKeyZ">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Materializing {1}: Key = &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXOpeningConnectionY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Opening connection &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXOpeningTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Opening transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXPersistCompleted">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Persist completed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXPersistingReasonY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Persisting (reason: {1})..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXQueryY">
             <summary>
               Looks up a localized string similar to Session &apos;{0}&apos;. SQL batch: 
            {1}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXReleaseSavepointY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Release savepoint &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRemappingEntityKeys">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Remapping entity keys..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRemovingKeyY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Removing: Key = &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXResolvingKeyYExactTypeIsUnknownFetchIsRequired">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Resolving key &apos;{1}&apos;. Exact type is unknown. Fetch is required..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXResolvingKeyYExactTypeIsZ">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Resolving key &apos;{1}&apos;. Exact type is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXResolvingKeyYKeyIsAlreadyResolved">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Resolving key &apos;{1}&apos;. Key is already resolved..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRollbackToSavepointY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Rollback to savepoint &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRollbackTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Rollback transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRolledBackTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Rolled back transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXRollingBackTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Rolling back transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXSchemaUpgradeScriptY">
             <summary>
               Looks up a localized string similar to Session &apos;{0}&apos;. Schema upgrade script:
            {1}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXSettingValueKeyYFieldZ">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Setting value: Key = &apos;{1}&apos;, Field = &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXTransaction">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Transaction.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXUpdatingCacheY">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Updating cache: {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSessionXVersionValidationFailedKeyYVersionZExpected3">
            <summary>
              Looks up a localized string similar to Session &apos;{0}&apos;. Version validation failed: Key = &apos;{1}&apos;, Version = &apos;{2}&apos; (expected version = &apos;{3}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSkippingEntityXAsItDoesNotBelongToAnyHierarchyThusItCannotBePersistent">
            <summary>
              Looks up a localized string similar to Skipping entity &apos;{0}&apos; as it does not belong to any hierarchy thus it cannot be persistent..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSkippingSchemaSynchronization">
            <summary>
              Looks up a localized string similar to Skipping schema synchronization..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSpecificationOfTypeColumnForFulltextColumnIsNotSupportedByCurrentStorageIgnoringTypeColumnSpecificationForColumnX">
            <summary>
              Looks up a localized string similar to Specification of type column for fulltext column is not supported by current storage. Ignoring type column specification for column &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogStorageXDoesNotSupportPartialIndexesIgnoringFilterForPartialIndexY">
            <summary>
              Looks up a localized string similar to Storage &apos;{0}&apos; does not support partial indexes, ignoring filter for partial index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSyncContextMustHaveNoPendingActions">
            <summary>
              Looks up a localized string similar to SyncContext must have no pending actions at this point..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogSynchronizingSchemaInXMode">
            <summary>
              Looks up a localized string similar to Synchronizing schema in {0} mode.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogTargetSchema">
            <summary>
              Looks up a localized string similar to Target schema:.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogUnableToCloseSingleAvailableConnectionItIsStillUsedBySessionX">
            <summary>
              Looks up a localized string similar to Unable to close single available connection: it is still used by session &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogUnableToGetDefaultHasherForTypeXxx">
            <summary>
              Looks up a localized string similar to Unable to get default hasher for type {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogUnableToGetDefaultNodeComparerForTypeXxx">
            <summary>
              Looks up a localized string similar to Unable to get default SQL comparer for type {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogUndoError">
            <summary>
              Looks up a localized string similar to Error during Undo execution: descriptor {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogValidatingMappingConfiguration">
            <summary>
              Looks up a localized string similar to Validating mapping configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.LogValidationFailed">
            <summary>
              Looks up a localized string similar to Validation failed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.MaxOrMinPropertyShouldBeSpecified">
            <summary>
              Looks up a localized string similar to &apos;Max&apos; or &apos;Min&apos; property should be specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.MemberAccessSequenceContainsNonPersistentFields">
            <summary>
              Looks up a localized string similar to member access sequence contains non-persistent fields.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.MetadataAssemblyFormat">
            <summary>
              Looks up a localized string similar to {0} (Version={1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.MetadataTypeFormat">
            <summary>
              Looks up a localized string similar to {0} (Id={1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Model">
            <summary>
              Looks up a localized string similar to Model.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ModelDefinition">
            <summary>
              Looks up a localized string similar to Model Definition.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NA">
            <summary>
              Looks up a localized string similar to n/a.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NativeType">
            <summary>
              Looks up a localized string similar to Native type.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NodeCollectionFullNameFormat">
            <summary>
              Looks up a localized string similar to {0}.{1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NodeFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NodeInfoFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NotAvailable">
            <summary>
              Looks up a localized string similar to n/a.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Null">
            <summary>
              Looks up a localized string similar to null.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.NullableMark">
            <summary>
              Looks up a localized string similar to ?.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.OnlyPrimitiveAndReferenceFieldsAreSupported">
            <summary>
              Looks up a localized string similar to only primitive and reference fields are supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Operations">
            <summary>
              Looks up a localized string similar to Operations.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.OriginalExceptions">
            <summary>
              Looks up a localized string similar to Original exception(s).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.OriginalMessageX">
            <summary>
              Looks up a localized string similar to Original message &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PairFormat">
            <summary>
              Looks up a localized string similar to ({0}, {1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ParametersOfTypeOtherThanXAreNotSupported">
            <summary>
              Looks up a localized string similar to parameters of type other than &apos;{0}&apos; are not supported.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Partial">
            <summary>
              Looks up a localized string similar to partial.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Precision">
            <summary>
              Looks up a localized string similar to Precision.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyChangeFormat">
            <summary>
              Looks up a localized string similar to +{0}: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyPairFormat">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyValueCanNotBeEmpty">
            <summary>
              Looks up a localized string similar to {0}: value can not be empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyValueCanNotBeNull">
            <summary>
              Looks up a localized string similar to {0}: value can not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyValueLengthMustBeInXYRange">
            <summary>
              Looks up a localized string similar to {0}: length of the value must be in [{1} ... {2}] range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.PropertyValueMustBeInXYRange">
            <summary>
              Looks up a localized string similar to {0}: value must be in [{1} ... {2}] range..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.QueryX">
            <summary>
              Looks up a localized string similar to Query &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReadOnly">
            <summary>
              Looks up a localized string similar to read-only.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReadOnlyShort">
            <summary>
              Looks up a localized string similar to r/o.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReadWrite">
            <summary>
              Looks up a localized string similar to read-write.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReadWriteShort">
            <summary>
              Looks up a localized string similar to r/w.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Recursive">
            <summary>
              Looks up a localized string similar to recursive.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReferenceFormat">
            <summary>
              Looks up a localized string similar to #({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReferentialIntegrityViolationOnAttemptToRemoveXKeyY">
             <summary>
               Looks up a localized string similar to Referential integrity violation on attempt to remove &apos;{0}&apos;, Key=&apos;{1}&apos;.
            Association: {2}
            Referencing Entity Key: {3}
            Referenced Entity Key: {4}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.RefFormat">
            <summary>
              Looks up a localized string similar to Ref&lt;{0}&gt;({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.RegularExpressionPatternIsNotSpecified">
            <summary>
              Looks up a localized string similar to Regular expression pattern is not specified..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReleaseLogFormat">
            <summary>
              Looks up a localized string similar to {6:s} @{1,-5} {2,5} {3,-24} {4}{5}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ReversedFormat">
            <summary>
              Looks up a localized string similar to Reversed({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.RowNumberX">
            <summary>
              Looks up a localized string similar to RowNumber{0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Scale">
            <summary>
              Looks up a localized string similar to Scale.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SchemaComparisonResultFormat">
             <summary>
               Looks up a localized string similar to Schema comparison result: {0}
            Has unsafe actions: {1}
            Has column type changes: {2} 
            Compatible in ValidateLegacy mode: {3}
            
            Unsafe actions:
            {4}
            Schema hints:
            {5}
            Schema difference:
            {6}.
             </summary>
        </member>
        <member name="P:Xtensive.Strings.SegmentFormat">
            <summary>
              Looks up a localized string similar to [{0} ... {1}].
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SerializationDataFormat">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, #=&apos;{1}&apos; ({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SimpleLogFormat">
            <summary>
              Looks up a localized string similar to {3}: {5}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SqlErrorDetailsX">
            <summary>
              Looks up a localized string similar to SQL error details &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SqlErrorOccured">
            <summary>
              Looks up a localized string similar to SQL error occured..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.StorageErrorDetailsX">
            <summary>
              Looks up a localized string similar to Storage error details &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SubqueryXHeaderMustHaveOnlyOneColumn">
            <summary>
              Looks up a localized string similar to Subquery &apos;{0}&apos; header must have only one column..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.SystemTypes">
            <summary>
              Looks up a localized string similar to system types.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TableX">
            <summary>
              Looks up a localized string similar to  Table: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ThreadSafeCachedFormat">
            <summary>
              Looks up a localized string similar to ThreadSafeCached({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TransformedTupleFormat">
            <summary>
              Looks up a localized string similar to {0}: {1} of ({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TripletFormat">
            <summary>
              Looks up a localized string similar to ({0}, {1}, {2}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TupleDescriptorFormat">
            <summary>
              Looks up a localized string similar to TupleDescriptor({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TupleFormat">
            <summary>
              Looks up a localized string similar to ({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TupleTransformFormat">
            <summary>
              Looks up a localized string similar to {0}({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeIdForTypeXIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to TypeId for type {0} is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeIdRangeForDatabaseXYZIsExhausted">
            <summary>
              Looks up a localized string similar to Type ID range for database &apos;{0}&apos; ({1}, {2}) is exhausted.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Types">
            <summary>
              Looks up a localized string similar to Types.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeX">
            <summary>
              Looks up a localized string similar to Type: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeXDoesNotImplementYZField">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement &apos;{1}.{2}&apos; property..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeXDoesNotParticipateInTheSpecifiedAssociation">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not participate in the specified association..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeXIsNotAnYDescendant">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not an &apos;{1}&apos; descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.TypeXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UnableToDisposeItemWhenContainerIsNotDisposed">
            <summary>
              Looks up a localized string similar to Unable to dispose an item when disposable container has an invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UnableToInvalidateSessionStateNewlyCreatedEntitiesAreAttachedToSession">
            <summary>
              Looks up a localized string similar to Unable to invalidate session state: newly created entities are attached to session..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UnableToOpenNewTransactionThereAreUnenumerableResultsOfAsynchronousQueries">
            <summary>
              Looks up a localized string similar to Unable to open new transaction, there are unenumerable results of asynchronous queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UnableToSaveModifiedEnititiesThereAreIncompletedAsynchronousQueries">
            <summary>
              Looks up a localized string similar to Unable to save modified enitities, there are incompleted asynchronous queries..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Unknown">
            <summary>
              Looks up a localized string similar to unknown.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UnnamedNodeDisplayName">
            <summary>
              Looks up a localized string similar to &lt;Unnamed&gt;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.UpgradeSequence">
            <summary>
              Looks up a localized string similar to Upgrade sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.Validators">
            <summary>
              Looks up a localized string similar to Validators.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueCanNotBeLessThenX">
            <summary>
              Looks up a localized string similar to Value can not be less then {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueCanNotBeNull">
            <summary>
              Looks up a localized string similar to Value can not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueCanNotBeRemovedEntity">
            <summary>
              Looks up a localized string similar to Value can not be an entity that is already removed..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueDoesNotMatchRegexPatternX">
            <summary>
              Looks up a localized string similar to Value does not match regex pattern &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueLengthCanNotBeGreaterThanX">
            <summary>
              Looks up a localized string similar to Value length can not be greater than {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueLengthCanNotBeLessThanX">
            <summary>
              Looks up a localized string similar to Value length can not be less than {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueLengthCanNotBeLessThanXOrGreaterThanY">
            <summary>
              Looks up a localized string similar to Value length can not be less than {0} or greater than {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueLengthCanNotExceedX">
            <summary>
              Looks up a localized string similar to Value can not exceed {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldBeAValidEMail">
            <summary>
              Looks up a localized string similar to Value should be a valid e-mail..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldBeInTheFuture">
            <summary>
              Looks up a localized string similar to Value should be in the future..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldBeInThePast">
            <summary>
              Looks up a localized string similar to Value should be in the past..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldMatchRegexPatternX">
            <summary>
              Looks up a localized string similar to Value should match regex pattern &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeEmpty">
            <summary>
              Looks up a localized string similar to Value should not be empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeEmptyOrEmpty">
            <summary>
              Looks up a localized string similar to Value should not be null or empty..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeGreaterThanMax">
            <summary>
              Looks up a localized string similar to Value should not be greater than {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeLessThanMin">
            <summary>
              Looks up a localized string similar to Value should not be less than {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeLessThanMinOrGreaterThanMax">
            <summary>
              Looks up a localized string similar to Value should not be less than {0} or greater than {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueShouldNotBeNull">
            <summary>
              Looks up a localized string similar to Value should not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueTypeMismatchForFieldX">
            <summary>
              Looks up a localized string similar to Value type mismatch for field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ValueX">
            <summary>
              Looks up a localized string similar to  Value: {0};.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.VersionFieldXCanTBeTypeIdField">
            <summary>
              Looks up a localized string similar to Version field &apos;{0}&apos; can&apos;t be TypeId field..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.X">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.XInY">
            <summary>
              Looks up a localized string similar to {0} in {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.XIsNotApplicableToYDescendants">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not applicable to &apos;{1}&apos; descendants..
            </summary>
        </member>
        <member name="P:Xtensive.Strings.XW0001">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Strings.ZeroAssemblyVersion">
            <summary>
              Looks up a localized string similar to &lt;none&gt;.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.GetValueDelegate`1">
            <summary>
            Incapsulates <see cref="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32,Xtensive.Tuples.TupleFieldState@)"/> method.
            </summary>
            <typeparam name="TValue">Type of a value.</typeparam>
            <param name="tuple">Tuple to use.</param>
            <param name="descriptor">Field descriptor.</param>
            <param name="fieldState">State of a field.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Tuples.SetValueDelegate`1">
            <summary>
            Incapsulates <see cref="M:Xtensive.Tuples.Tuple.SetValue``1(System.Int32,``0)"/> method.
            </summary>
            <typeparam name="TValue">Type of a value.</typeparam>
            <param name="tuple">Tuple to use.</param>
            <param name="descriptor">Field descriptor.</param>
            <param name="value">A value.</param>
        </member>
        <member name="T:Xtensive.Tuples.DifferentialTuple">
            <summary>
            Differential tuple. Combines read-only <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> tuple
            with <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> tuple providing all the 
            changes made to <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Tuple">
            <summary>
            A base class for auto generated tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITuple">
            <summary>
            Describes a tuple.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITupleFactory">
            <summary>
            <see cref="T:Xtensive.Tuples.Tuple"/> factory contract.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ITupleFactory.CreateNew">
            <summary>
            Creates new instance of the tuple of the same type.
            </summary>
            <returns>A new instance of the tuple of the same type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.Clone">
            <summary>
            Clones the tuple.
            </summary>
            <returns>A new instance of the tuple of the same type
            and with the same field values.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetFieldState(System.Int32)">
            <summary>
            Gets the field state associated with the field.
            </summary>
            <param name="fieldIndex">Index of the field to get the state for.</param>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValue(System.Int32)">
            <summary>
            Gets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the field value by its index, if it is available;
            otherwise returns default value for field type.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValueOrDefault(System.Int32)">
            <summary>
            Gets the value field value by its index, if it is available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>) and is not null (see <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/>);
            otherwise returns <see langword="null"/>.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value, if it is available and not null; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to set value of.</param>
            <param name="fieldValue">Field value.</param>
            <exception cref="T:System.InvalidCastException">Type of stored value is incompatible
            with the specified one.</exception>
        </member>
        <member name="P:Xtensive.Tuples.ITuple.Descriptor">
            <summary>
            Gets tuple descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITuple.Count">
            <summary>
            Gets field count for this instance.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Tuple.HashCodeMultiplier">
            <summary>
            Per-field hash code multiplier used in <see cref="M:Xtensive.Tuples.Tuple.GetHashCode"/> calculation.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Xtensive#Tuples#ITupleFactory#CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Xtensive#Tuples#ITuple#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.CreateNew">
            <see cref="M:Xtensive.Tuples.ITupleFactory.CreateNew" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Clone">
            <see cref="M:Xtensive.Tuples.ITuple.Clone" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetFieldState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValueOrDefault(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value field value by its index, if it is available;
            otherwise returns <see langword="default(T)"/>.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, <see langword="default(T)"/>.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32)">
            <summary>
            Gets the value field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
            <exception cref="T:System.InvalidCastException">Value is available, but it can't be cast
            to specified type. E.g. if value is <see langword="null"/>, field is struct, 
            but <typeparamref name="T"/> is not a <see cref="T:System.Nullable`1"/> type.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValueOrDefault``1(System.Int32)">
            <summary>
            Gets the value field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidCastException">Value is available, but it can't be cast
            to specified type. E.g. if value is <see langword="null"/>, field is struct, 
            but <typeparamref name="T"/> is not a <see cref="T:System.Nullable`1"/> type.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.SetValue``1(System.Int32,``0)">
            <summary>
            Sets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to set value of.</param>
            <param name="fieldValue">Field value.</param>
            <typeparam name="T">The type of value to set.</typeparam>
            <exception cref="T:System.InvalidCastException">Type of stored value and <typeparamref name="T"/>
            are incompatible.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetMappedContainer(System.Int32,System.Boolean)">
            <summary>
            Gets the tuple containing actual value of the specified field.
            </summary>
            <param name="fieldIndex">Index of the field to get the value container for.</param>
            <returns>Tuple container and remapped field index.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create(System.Type[])">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field types.
            </summary>
            <param name="fieldTypes">Array of field types.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create(Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its descriptor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``1(``0)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <param name="value">Value of the only tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``1(Xtensive.Tuples.TupleDescriptor,``0)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value">Value of the only tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``2(``0,``1)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``2(Xtensive.Tuples.TupleDescriptor,``0,``1)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``3(Xtensive.Tuples.TupleDescriptor,``0,``1,``2)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``4(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``5(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3,``4)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <param name="value6">Value of the 6th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``6(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <param name="value6">Value of the 6th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Parse(Xtensive.Tuples.TupleDescriptor,System.String)">
            <see cref="M:Xtensive.Tuples.TupleFormatExtensions.Parse(Xtensive.Tuples.TupleDescriptor,System.String)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.#ctor">
            <summary>
            Initializes a new instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Tuple.Descriptor">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.Tuple.Count">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.IsChanged(System.Int32)">
            <summary>
            Indicates whether field with specified <paramref name="fieldIndex"/> is changed.
            </summary>
            <param name="fieldIndex">Index of the field to check.</param>
            <returns><see langword="True"/> if specified field is changed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Merge">
            <summary>
            Merges the <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> with the <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetMappedContainer(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Reset">
            <summary>
            Resets all the changes in <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> by re-creating it.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="origin">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.#ctor(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="origin">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> property value.</param>
            <param name="difference">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> property value.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptors mismatch.</exception>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Count">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Origin">
            <summary>
            Gets original tuple.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Difference">
            <summary>
            Gets or sets difference tuple.
            Can be <see langword="null" /> (acts as if no values are available in this tuple).
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.FastReadOnlyTuple">
            <summary>
            Fast read-only <see cref="T:Xtensive.Tuples.Tuple"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
            <summary>
            <inherited/>
            Always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="source">The tuple to create the fast read-only tuple from.</param>
        </member>
        <member name="P:Xtensive.Tuples.FastReadOnlyTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.MergeBehavior">
            <summary>
            Possible tuple merge behaviors.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.Default">
            <summary>
            The same as <see cref="F:Xtensive.Tuples.MergeBehavior.PreferOrigin"/>
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.PreferOrigin">
            <summary>
            Origin values are preferrable.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.PreferDifference">
            <summary>
            Difference values are preferrable.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Packed.PackedFieldAccessor.Getter">
            <summary>
            Getter delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Packed.PackedFieldAccessor.Setter">
            <summary>
            Setter delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Packed.PackedFieldAccessor.NullableGetter">
            <summary>
            Nullable getter delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Packed.PackedFieldAccessor.NullableSetter">
            <summary>
            Nullable setter delegate.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.RegularTuple">
            <summary>
            Base class for any regular tuple.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.#ctor">
            <summary>
            Initializes new instance of this type.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ReferencedTuple">
            <summary>
            Tuple that references another tuple by getter delegate.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.#ctor(System.Func{Xtensive.Tuples.Tuple})">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="tupleGetter">The delegate to get inner tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.ReferencedTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CombineTransform">
            <summary>
            This class is used for source <see cref="T:Xtensive.Tuples.Tuple"/>s combining.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.MapTransform">
            <summary>
            Base class for any tuple field mapping transform.
            Maps fields of destination tuple to fields of a set of source tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TupleTransformBase">
            <summary>
            Base class for any tuple transform.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITupleTransform">
            <summary>
            Tuple transformation definition.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ITupleTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="arguments">Transformation arguments.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.Descriptor">
            <summary>
            Gets <see cref="T:Xtensive.Tuples.TupleDescriptor"/> describing the tuples
            this transform may produce.
            <see langword="Null"/> means "any" (i.e. transform definition 
            is not descriptor-dependent).
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.DefaultResult">
            <summary>
            Gets the default result tuple.
            Can be used to get default values for the result tuple fields.
            Must be a read-only tuple.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.IsReadOnly">
            <summary>
            Indicates whether transform always produces read-only tuples or not.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TupleTransformBase.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TupleTransformBase.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.DefaultResult">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="F:Xtensive.Tuples.Transform.MapTransform.NoMapping">
            <summary>
            Means that no mapping is available for the specified field index.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple[])">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="sources">Transformation sources.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source">Transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source1">First transformation source.</param>
            <param name="source2">Second transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source1">First transformation source.</param>
            <param name="source2">Second transformation source.</param>
            <param name="source3">Third transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
            <param name="map"><see cref="P:Xtensive.Tuples.Transform.MapTransform.Map"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,System.Int32[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
            <param name="map"><see cref="P:Xtensive.Tuples.Transform.MapTransform.SingleSourceMap"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.SourceCount">
            <summary>
            Gets the count of source <see cref="N:Xtensive.Tuples"/> this transform maps to the target one.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.SingleSourceMap">
            <summary>
            Gets or sets destination-to-source field map for the first source only.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.Map">
            <summary>
            Gets or sets destination-to-source field map.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sources">Source tuple descriptors.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CombineTransform.Sources">
            <summary>
            Gets tuple descriptors this transform merges.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutInTransform">
            <summary>
            Cuts in specified value to the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.#ctor(System.Boolean,System.Int32,Xtensive.Tuples.TupleDescriptor[])">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="index">Start index.</param>
            <param name="sources">Source tuple descriptors.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutInTransform.Index">
            <summary>
            Gets the start index at witch this transform cuts in specified value.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutInTransform.Sources">
            <summary>
            Gets tuple descriptors this transform cuts in.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutInTransform`1">
            <summary>
            Cuts in specified value to the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,`0)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.#ctor(System.Boolean,System.Int32,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="index">Start index.</param>
            <param name="source1">Source tuple descriptor.</param>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutOutTransform">
            <summary>
            Cuts out specified <see cref="P:Xtensive.Tuples.Transform.CutOutTransform.Segment"/> from the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Segment{System.Int32})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sourceDescriptor">Source tuple descriptor.</param>
            <param name="segment">The segment to cut out.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutOutTransform.Segment">
            <summary>
            Gets the segment this transform cuts out.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping arbitrary count of source tuples to a single one (this).
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TransformedTuple`1">
            <summary>
            Base class for all transformed tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TransformedTuple">
            <summary>
            Base class for any transformed tuples.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TransformedTuple.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Transform">
            <summary>
            Gets the transform used to produce this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Arguments">
            <summary>
            Gets a list of arguments used in <see cref="M:Xtensive.Tuples.ITupleTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])"/> method
            to produce this tuple.
            <see langword="Null"/> means arguments are unknown an this stage.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TransformedTuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="transform">Tuple transform.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple`1.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple`1.TypedTransform">
            <summary>
            Gets or sets the transform used to produce this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple[])">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="transform">The transform.</param>
            <param name="sources">Source tuples.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple1">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping 1 source tuple to a single one (this).
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="transform">The transform.</param>
            <param name="source">Source tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple3">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping up to 3 source tuples to a single one (this).
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="transform">The transform.</param>
            <param name="source1">First source tuple.</param>
            <param name="source2">2nd source tuple.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="transform">The transform.</param>
            <param name="source1">First source tuple.</param>
            <param name="source2">2nd source tuple.</param>
            <param name="source3">3rd source tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple">
            <summary>
            A tuple wrapper for <see cref="T:Xtensive.Tuples.Transform.ReadOnlyTransform"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.WrappingTransformTupleBase">
            <summary>
            Base class for one-to-one tuple transformations.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="tuple">Tuple to provide the wrapper for.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Count">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Arguments">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="tuple">Tuple to provide read-only wrapper for.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.Arguments">
            <inheritdoc/>
            <remarks>
            This method always returns <see cref="P:Xtensive.Collections.ArrayUtils`1.EmptyArray"/> of <see cref="T:System.Object"/>s
            to block any access to the original tuple.
            </remarks>
        </member>
        <member name="T:Xtensive.Tuples.Transform.ReadOnlyTransform">
            <summary>
            Describes read-only tuple transformation.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <summary>
            Typed version of <see cref="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])"/>.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source">Transformation argument.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="P:Xtensive.Tuples.Transform.ReadOnlyTransform.Instance">
            <summary>
            Gets the only instance of this type.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.ReadOnlyTransform.IsReadOnly">
            <summary>
            <inheritdoc/>
            Implementation in this class always returns <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.SegmentTransform">
            <summary>
            Extracts specified <see cref="P:Xtensive.Tuples.Transform.SegmentTransform.Segment"/> from the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Segment{System.Int32})">
            <summary>
            Initializes a new instance of this type.
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sourceDescriptor">Source tuple descriptor.</param>
            <param name="segment">The segment to extract.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.SegmentTransform.Segment">
            <summary>
            Gets the segment this transform extracts.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TupleTransformType">
            <summary>
            Enumerates possible tuple transformation types.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Default">
            <summary>
            Default transform type (<see cref="F:Xtensive.Tuples.Transform.TupleTransformType.Auto"/>).
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Auto">
            <summary>
            Transform type is detected automatically based on sources.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.TransformedTuple">
            <summary>
            <see cref="F:Xtensive.Tuples.Transform.TupleTransformType.TransformedTuple"/> must be returned.
            A wrapper performing specified transform on-the-fly is returned.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Tuple">
            <summary>
            <see cref="T:Xtensive.Tuples.RegularTuple"/> must be returned.
            Transform is performed right now and a newly created tuple is returned.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.TupleDescriptor">
            <summary>
            Tuple descriptor.
            Provides information about <see cref="T:Xtensive.Tuples.Tuple"/> structure.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetCommonPartLength(Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Gets the length of the common part.
            </summary>
            <param name="other">The other descriptor.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.IsValueType(System.Int32)">
            <summary>
            Determines whether the specified field is a value type field.
            </summary>
            <param name="fieldIndex">Index of the field to check.</param>
            <returns>
            <see langword="true"/> if specified field is a value type field; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Equals(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Type[])">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">List of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">List of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">Enumerable of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Head(System.Int32)">
            <summary>
            Creates tuple descriptor containing head of the current one.
            </summary>
            <param name="headFieldCount">Head field count.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Tail(System.Int32)">
            <summary>
            Creates tuple descriptor containing tail of the current one.
            </summary>
            <param name="tailFieldCount">Tail field count.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``1">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``2">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``3">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``4">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``5">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``6">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Empty">
            <summary>
            Gets the empty tuple descriptor.
            </summary>
            <value>The empty tuple descriptor.</value>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.TotalCount">
            <summary>
            Gets total count of compiled descriptors.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.IsInitialized">
            <summary>
            Indicates whether class for handling underlying 
            <see cref="T:Xtensive.Tuples.Tuple"/> is already compiled.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.TupleType">
            <summary>
            Gets the type of underlying <see cref="T:Xtensive.Tuples.Tuple"/>
            implementation. <see langword="Null"/>, if
            <see cref="P:Xtensive.Tuples.TupleDescriptor.IsInitialized"/>==<see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.TupleExtensions">
            <summary>
            Various extension methods for <see cref="T:Xtensive.Tuples.Tuple"/> and <see cref="T:Xtensive.Tuples.Tuple"/> types.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified source index 
            and pastes them to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified target index. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
            <param name="targetStartIndex">The index in the <paramref name="target"/> tuple at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified source index 
            and pastes them to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the <paramref name="startIndex"/>
            and pastes them into <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Copies all the elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element
            and pastes them into <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element.
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32[])">
            <summary>
            Copies a set of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple[],Xtensive.Tuples.Tuple,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            Copies a set of elements from <paramref name="sources"/> <see cref="T:Xtensive.Tuples.Tuple"/>s
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="sources">Source tuples to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Collections.FixedList3{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            Copies a set of elements from <paramref name="sources"/> <see cref="T:Xtensive.Tuples.Tuple"/>s
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="sources">Source tuples to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.Combine(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Combines the <paramref name="left"/> with <paramref name="right"/>.
            </summary>
            <param name="left">The first <see cref="T:Xtensive.Tuples.Tuple"/> to combine.</param>
            <param name="right">The second <see cref="T:Xtensive.Tuples.Tuple"/> to combine.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.GetSegment(Xtensive.Tuples.Tuple,Xtensive.Core.Segment{System.Int32})">
            <summary>
            Cuts out <paramref name="segment"/> from <paramref name="tuple"/> <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The <see cref="T:Xtensive.Tuples.Tuple"/> to get segment from.</param>
            <param name="segment">The <see cref="T:Xtensive.Core.Segment`1"/> to cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the specified
            <paramref name="behavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="length">The number of elements to process.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptors mismatch.</exception>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="length">The number of elements to process.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the specified
            <paramref name="behavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToRegular(Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Tuples.RegularTuple"/> instance "filled" with the same field values
            as the specified <paramref name="source"/> tuple.
            </summary>
            <param name="source">The tuple to clone as <see cref="T:Xtensive.Tuples.RegularTuple"/>.</param>
            <returns>A new instance of <see cref="T:Xtensive.Tuples.RegularTuple"/> with the same field values
            as the specified <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToReadOnly(Xtensive.Tuples.Tuple,Xtensive.Tuples.Transform.TupleTransformType)">
            <summary>
            Converts <paramref name="source"/> tuple to read-only one.
            </summary>
            <param name="source">The tuple to convert to read-only.</param>
            <param name="transformType">The type of transformation to perform.</param>
            <returns>Read-only version of <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToFastReadOnly(Xtensive.Tuples.Tuple)">
            <summary>
            Converts <paramref name="source"/> tuple to fast read-only one.
            </summary>
            <param name="source">The tuple to convert to fast read-only.</param>
            <returns>Fast read-only version of <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.GetFieldStateMap(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState)">
            <summary>
            Gets the field state map of the specified <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Tuples.Tuple"/> to inspect.</param>
            <param name="requestedState">The state to compare with.</param>
            <returns>Newly created <see cref="T:System.Collections.BitArray"/> instance which holds inspection result.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.Initialize(Xtensive.Tuples.Tuple,System.Collections.BitArray)">
            <summary>
            Initializes the specified <see cref="T:Xtensive.Tuples.Tuple"/> with default values.
            </summary>
            <param name="target">Tuple to initialize.</param>
            <param name="nullableMap"><see cref="T:System.Collections.BitArray"/> instance that flags that field should have null value.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptor field count is not equal to <paramref name="nullableMap"/> count.</exception>
        </member>
        <member name="T:Xtensive.Tuples.TupleFieldState">
            <summary>
            Defines field state that can be set or get for each field in <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Default">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Available">
            <summary>
            Field value is available in tuple.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Null">
            <summary>
            Field has null value.
            Used with both nullable and non-nullable fields.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.TupleFieldStateExtensions">
            <summary>
            Extension methods for <see cref="T:Xtensive.Tuples.TupleFieldState"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsAvailable(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsNull(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsAvailableAndNull(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has both <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> and <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flags.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has both <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> and <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flags; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.HasValue(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag and has no <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value is equal to <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Xtensive.Tuples.TupleFormatExtensions">
            <summary>
            Extension methods for <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.ToString(Xtensive.Tuples.Tuple,System.Boolean)">
            <summary>
            Converts the <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> to 
            its string representation.
            </summary>
            <param name="source">The tuple to convert.</param>
            <param name="format">Indicates whether to use <see cref="M:Xtensive.Tuples.TupleFormatExtensions.Format(Xtensive.Tuples.Tuple)"/>,
            or <see cref="M:Xtensive.Tuples.Tuple.ToString"/> method.</param>
            <returns>String representation of <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.Format(Xtensive.Tuples.Tuple)">
            <summary>
            Returns string representation of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:Xtensive.Tuples.Tuple"/> to format.</param>
            <returns>
            String representation of the specified <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.Parse(Xtensive.Tuples.TupleDescriptor,System.String)">
            <summary>
            Returns a <see cref="T:Xtensive.Tuples.Tuple"/> with specified <paramref name="descriptor"/>
            parsed from the <paramref name="source"/> string.
            </summary>
            <param name="descriptor">The descriptor of <see cref="T:Xtensive.Tuples.Tuple"/> to parse.</param>
            <param name="source">The string to parse.</param>
            <returns>A <see cref="T:Xtensive.Tuples.Tuple"/> parsed from the <paramref name="source"/> string.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> string 
            can't be parsed to a <see cref="T:Xtensive.Tuples.Tuple"/> with specified <paramref name="descriptor"/>.</exception>
        </member>
        <member name="T:Xtensive.Tuples.TupleUpdater">
            <summary>
             Helper type allowing to update tuples using functional style syntax.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleUpdater.SetValue(System.Int32,System.Object)">
            <summary>
            Updates the field of <see cref="P:Xtensive.Tuples.TupleUpdater.Tuple"/> with the specified index.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <param name="value">The new field value</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleUpdater.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            Initializes new instance of this type.
            </summary>
            <param name="tuple">The tuple to wrap.</param>
        </member>
        <member name="P:Xtensive.Tuples.TupleUpdater.Tuple">
            <summary>
            Gets the wrapped tuple.
            </summary>
            <value>The tuple.</value>
        </member>
    </members>
</doc>
